// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module('App', function(exports, top) {
    var Login, Teacher, Views;
    Teacher = (function(_super) {

      __extends(Teacher, _super);

      function Teacher() {
        return Teacher.__super__.constructor.apply(this, arguments);
      }

      Teacher.prototype.syncName = 'user';

      return Teacher;

    })(Backbone.Model);
    Login = (function(_super) {

      __extends(Login, _super);

      function Login() {
        return Login.__super__.constructor.apply(this, arguments);
      }

      Login.prototype.syncName = 'student';

      Login.prototype.defaults = {
        email: '@',
        password: '*',
        forgot: false,
        attempts: 0
      };

      Login.prototype.validate = function(attrs) {
        var email, errs, password;
        email = attrs.email, password = attrs.password;
        errs = [];
        if (!email.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/i)) {
          errs.push({
            type: 'email',
            message: 'invalid email address'
          });
        }
        if (errs.length) {
          return errs;
        } else {
          return null;
        }
      };

      Login.prototype.getKey = function(cb) {
        console.log(this.toJSON());
        return window.sock.emit('auth', this.toJSON(), cb);
      };

      Login.prototype.emailKey = function(cb) {
        var params;
        params = {
          email: this.get('email'),
          password: '*',
          forgot: true
        };
        console.log(params);
        return window.sock.emit('auth', params, cb);
      };

      return Login;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.className = 'teacher-page-view container';

      Main.prototype.tagName = 'div';

      Main.prototype.initialize = function() {
        this.login = new Login;
        return this.views = {
          login: new App.Views.Login({
            model: this.login
          })
        };
      };

      Main.prototype.template = function() {
        div({
          "class": 'page-header'
        }, function() {
          return div({
            "class": 'row'
          }, function() {
            div({
              "class": 'span1'
            }, function() {
              return img({
                src: "" + (this.get('twitterImg'))
              });
            });
            return div({
              "class": 'span10'
            }, function() {
              h1(" " + (this.get('teacherName') || this.get('twitterName')));
              if (this.get('email')) {
                return a({
                  href: "mailto:" + (this.get('email'))
                }, function() {
                  return i({
                    "class": 'icon-envelope'
                  }, " " + (this.get('email')));
                });
              }
            });
          });
        });
        return div({
          "class": 'login-cont'
        }, function() {});
      };

      Main.prototype.render = function() {
        Main.__super__.render.call(this);
        this.views.login.render().open(this.$('.login-cont'));
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.Login = (function(_super) {

      __extends(Login, _super);

      function Login() {
        return Login.__super__.constructor.apply(this, arguments);
      }

      Login.prototype.className = 'login-screen';

      Login.prototype.tagName = 'div';

      Login.prototype.initialize = function() {
        var _this = this;
        this.model.on('change:attempts', function() {
          return _this.model.getKey(function(err, key) {
            if (key) {
              return window.location = "/studentAuth/" + key;
            } else {
              return _this.showError(err);
            }
          });
        });
        return this.model.on('change:forgot', function() {
          return _this.model.emailKey(function(err, resp) {
            if (resp) {
              _this.clearErrors();
              _this.$('.message').addClass('alert').text('Check your email for a link to sign in!');
              return _this.$('.i-forgot').hide();
            } else {
              _this.model.set('forgot', 'false', {
                silent: true
              });
              return _this.showError(err);
            }
          });
        });
      };

      Login.prototype.events = {
        'click .sign-in': 'signIn',
        'click .i-forgot': 'iForgot',
        'keyup .password': function(e) {
          if (e.which === 13) {
            return this.signIn();
          }
        }
      };

      Login.prototype.clearErrors = function() {
        this.$(".control-group.error .help-block").text('');
        return this.$(".control-group.error").removeClass('error').addClass('success');
      };

      Login.prototype.showError = function(errs) {
        var err, _i, _len;
        if (!_.isArray(errs)) {
          errs = [errs];
        }
        this.clearErrors();
        for (_i = 0, _len = errs.length; _i < _len; _i++) {
          err = errs[_i];
          this.$("." + err.type + "-control").removeClass('success').addClass('error');
          this.$("." + err.type + "-control").find(".help-block").text(err.message || 'Invalid ', err.type);
        }
        return this.$("." + errs[0].type).select();
      };

      Login.prototype.iForgot = function() {
        var _this = this;
        this.$('.password-control').hide();
        this.$('.sign-in').hide();
        return this.model.set({
          email: this.$('.email').val(),
          password: '*',
          forgot: true
        }, {
          error: function(m, errs) {
            return _this.showError(errs);
          }
        });
      };

      Login.prototype.signIn = function(event) {
        var _this = this;
        return this.model.set({
          email: this.$('.email').val(),
          password: this.$('.password').val() || '*',
          attempts: 1 + this.model.get('attempts')
        }, {
          error: function(m, errs) {
            return _this.showError(errs);
          }
        });
      };

      Login.prototype.template = function() {
        return div({
          "class": 'row'
        }, function() {
          return div({
            "class": 'span4 student-header well'
          }, function() {
            div({
              "class": ''
            }, function() {
              h2(' Welcome, students!');
              return p("Sign in below. If you forget your password, don't worry, it can be emailed to you.");
            });
            form({
              "class": ''
            }, function() {
              div({
                "class": 'control-group email-control'
              }, function() {
                return div({
                  "class": 'controls'
                }, function() {
                  return div({
                    "class": 'input-prepend'
                  }, function() {
                    span({
                      "class": 'add-on icon-envelope'
                    });
                    input({
                      type: 'text',
                      "class": 'email',
                      placeholder: 'email'
                    });
                    return span({
                      "class": 'help-block'
                    });
                  });
                });
              });
              div({
                "class": 'control-group password-control'
              }, function() {
                return div({
                  "class": 'controls'
                }, function() {
                  return div({
                    "class": 'input-prepend'
                  }, function() {
                    span({
                      "class": 'add-on icon-key'
                    });
                    input({
                      type: 'password',
                      "class": 'password',
                      placeholder: 'password'
                    });
                    return span({
                      "class": 'help-block'
                    });
                  });
                });
              });
              return div({
                "class": 'message'
              }, function() {});
            });
            return div({
              "class": 'btn-toolbar'
            }, function() {
              button({
                "class": 'sign-in btn btn-info icon-signin'
              }, ' Sign in');
              return button({
                "class": 'i-forgot btn btn-warning'
              }, function() {
                text('I forgot my ');
                return i({
                  "class": 'icon-key'
                });
              });
            });
          });
        });
      };

      Login.prototype.render = function() {
        this.$el.html(ck.render(this.template));
        this.delegateEvents();
        return this;
      };

      return Login;

    })(Backbone.View);
    return exports.Controller = (function(_super) {

      __extends(Controller, _super);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype.initialize = function(teacher) {
        this.teacher = teacher;
        this.teacher = new Teacher;
        return this.views = {
          main: new Views.Main({
            model: this.teacher
          })
        };
      };

      Controller.prototype.clearViews = function(exceptFor) {
        var key, view, _ref, _results;
        _ref = this.views;
        _results = [];
        for (key in _ref) {
          view = _ref[key];
          if (key !== exceptFor) {
            _results.push(view.remove());
          }
        }
        return _results;
      };

      Controller.prototype.routes = {
        '': 'home'
      };

      Controller.prototype.home = function() {
        var _this = this;
        this.clearViews();
        this.teacher.set('twitterName', 'geodyer');
        return this.teacher.fetch({
          success: function() {
            return _this.views.main.render().open();
          }
        });
      };

      return Controller;

    })(Backbone.Router);
  });

  $(function() {
    window.router = new App.Controller;
    return Backbone.history.start();
  });

}).call(this);
