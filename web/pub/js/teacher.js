// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module('App.Activity', function(exports, top) {
    var Collection, Model, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'activity';

      Model.prototype.idAttribute = '_id';

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'activity';

      return Collection;

    })(Backbone.Collection);
    _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1];
    return exports.Views = Views = {};
  });

  module('App.Board', function(exports, top) {
    var Views;
    exports.Views = Views = {};
    Views.Input = (function(_super) {

      __extends(Input, _super);

      function Input() {
        return Input.__super__.constructor.apply(this, arguments);
      }

      Input.prototype.className = 'modal fade hide';

      Input.prototype.tagName = 'div';

      Input.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        return this.on('open', function() {
          _this.$el.modal('show');
          _this.$el.on('shown', function() {});
          return _this.$el.on('hidden', function() {
            _this.unbind();
            return _this.remove();
          });
        });
      };

      Input.prototype.events = {
        'click .save': 'save',
        'click .cancel': 'close',
        'click .btn': function(e) {
          return e.preventDefault();
        }
      };

      Input.prototype.save = function() {
        var data, el, _i, _len, _ref;
        data = {
          label: this.$('.label').val(),
          placeholder: this.$('.placeholder').val(),
          size: this.$('.size .active').attr('data-val'),
          answer: this.$('.answer').val(),
          feedbacks: []
        };
        _ref = this.$('.feedback');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          data.feedbacks.push({
            expr: $(el).find('.match').val(),
            feedback: $(el).find('.fb').val()
          });
        }
        this.trigger('save', data);
        return this.close();
      };

      Input.prototype.close = function() {
        return this.$el.modal('hide');
      };

      Input.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3("Insert question input");
        });
        div({
          "class": 'modal-body',
          style: 'max-height:300px;'
        }, function() {
          form({
            "class": 'form-horizontal'
          }, function() {
            div({
              "class": 'control-group'
            }, function() {
              label({
                "class": 'control-label'
              }, "Question or label");
              return div({
                "class": 'controls'
              }, function() {
                input({
                  type: 'text',
                  "class": 'label',
                  value: "" + this.options.label
                });
                return div({
                  "class": 'help-block'
                }, "(this is for you, student won't see this)");
              });
            });
            div({
              "class": 'control-group'
            }, function() {
              label({
                "class": 'control-label'
              }, "Placeholder text");
              return div({
                "class": 'controls'
              }, function() {
                input({
                  type: 'text',
                  "class": 'placeholder'
                });
                return div({
                  "class": 'help-block'
                }, "This will show up inside the input");
              });
            });
            div({
              "class": 'control-group size'
            }, function() {
              label({
                "class": 'control-label'
              }, 'Size');
              return div({
                "class": 'btn-group controls',
                'data-toggle': 'buttons-radio'
              }, function() {
                button({
                  "class": 'btn',
                  'data-val': 'small'
                }, "Small");
                button({
                  "class": 'btn active',
                  'data-val': 'medium'
                }, "Medium");
                return button({
                  "class": 'btn',
                  'data-val': 'large'
                }, "Large");
              });
            });
            return div({
              "class": 'control-group'
            }, function() {
              label({
                "class": 'control-label'
              }, "Correct answer(s)");
              return div({
                "class": 'controls'
              }, function() {
                input({
                  "class": 'answer',
                  type: 'text'
                });
                return div({
                  "class": 'help-block'
                }, "You may use regular expressions to match many responses");
              });
            });
          });
          return table({
            "class": 'table'
          }, function() {
            var i, _i, _results;
            tr(function() {
              return td({
                colspan: 2
              }, "Give feedback...");
            });
            _results = [];
            for (i = _i = 1; _i <= 3; i = ++_i) {
              _results.push(tr({
                "class": 'feedback'
              }, function() {
                td(function() {
                  return input({
                    type: 'text',
                    "class": 'match',
                    placeholder: 'when answer matches'
                  });
                });
                return td(function() {
                  return input({
                    type: 'text',
                    "class": 'fb',
                    placeholder: 'feedback to student'
                  });
                });
              }));
            }
            return _results;
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return button({
            "class": 'btn btn-success icon-ok save'
          }, " Insert question input");
        });
      };

      return Input;

    })(Backbone.View);
    Views.TTS = (function(_super) {

      __extends(TTS, _super);

      function TTS() {
        return TTS.__super__.constructor.apply(this, arguments);
      }

      TTS.prototype.className = 'modal fade hide';

      TTS.prototype.tagName = 'div';

      TTS.prototype.languages = {
        eng: 'English',
        fr: 'Français',
        spa: 'Español',
        ger: 'Deutch',
        ita: 'Italiano'
      };

      TTS.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        _.defaults(this.options, {
          gender: 'f',
          language: 'eng',
          rate: '',
          textToSay: ''
        });
        return this.on('open', function() {
          _this.$el.modal('show');
          _this.$el.on('shown', function() {
            return _this.$('input').focus();
          });
          return _this.$el.on('hidden', function() {
            _this.unbind();
            return _this.remove();
          });
        });
      };

      TTS.prototype.events = {
        'click .save': 'save',
        'click .try-it': 'tryIt',
        'click .cancel': 'close',
        'click .btn': function(e) {
          return e.preventDefault();
        }
      };

      TTS.prototype.save = function() {
        this.trigger('save', {
          language: this.$('.language .active').attr('data-val'),
          gender: this.$('.gender .active').attr('data-val'),
          textToSay: this.$('.text-to-say').val(),
          rate: this.$('.rate').val()
        });
        return this.close();
      };

      TTS.prototype.close = function() {
        return this.$el.modal('hide');
      };

      TTS.prototype.tryIt = function(e) {
        e.preventDefault();
        console.log('hi');
        return this.tts({
          language: this.$('.language .active').attr('data-val'),
          gender: this.$('.gender .active').attr('data-val'),
          textToSay: this.$('.text-to-say').val(),
          rate: this.$('.rate').val()
        });
      };

      TTS.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3("Insert pronunciation");
        });
        div({
          "class": 'modal-body'
        }, function() {
          return form(function() {
            div({
              "class": 'control-group'
            }, function() {
              label("Text to speak");
              return input({
                type: 'text',
                "class": 'text-to-say',
                value: "" + this.options.textToSay
              });
            });
            div({
              "class": 'control-group'
            }, function() {
              label("Language");
              return div({
                "class": 'btn-group language',
                'data-toggle': 'buttons-radio'
              }, function() {
                var label, lang, _ref, _results;
                _ref = this.languages;
                _results = [];
                for (lang in _ref) {
                  label = _ref[lang];
                  _results.push(button({
                    'data-val': "" + lang,
                    "class": "btn " + (this.options.language === lang ? 'active' : '')
                  }, " " + label));
                }
                return _results;
              });
            });
            div({
              "class": 'control-group'
            }, function() {
              label("Gender");
              return div({
                "class": 'btn-group gender',
                'data-toggle': 'buttons-radio'
              }, function() {
                button({
                  'data-val': 'f',
                  "class": "btn " + (this.options.gender !== 'm' ? 'active' : '')
                }, " Female");
                return button({
                  'data-val': 'm',
                  "class": "btn " + (this.options.gender === 'm' ? 'active' : '')
                }, " Male");
              });
            });
            div({
              "class": 'control-group'
            }, function() {
              label("Speed");
              return select({
                "class": 'rate'
              }, function() {
                option({
                  value: ''
                }, "Normal");
                option({
                  value: 'slow'
                }, "Slow");
                return option({
                  value: 'fast'
                }, "Fast");
              });
            });
            return button({
              "class": 'btn try-it icon-comment-alt'
            }, " Try it!");
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn cancel'
          }, " Cancel");
          return button({
            "class": 'btn btn-success icon-ok save'
          }, " Insert audio");
        });
      };

      TTS.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        return this;
      };

      return TTS;

    })(Backbone.View);
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'lab-whiteboard';

      Main.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.model.on('change:visible', function() {
          _this.$('.accordion-group').toggleClass('visible');
          _this.$('.toggle-visible').toggleClass('icon-eye-close').toggleClass('icon-eye-open');
          return _this.$('.editor-area').toggleClass('visible');
        });
        return this.on('open', function() {
          _this.trigger('ready');
          _this.$('.editor-area').attr('contenteditable', true);
          _this.$('.editor-area').html(_this.model.get('html') || '');
          return _this.$('.editor-area').focus();
        });
      };

      Main.prototype.update = function() {
        return this.model.set('html', this.simplifiedHTML());
      };

      Main.prototype.document = document;

      Main.prototype.events = {
        'keyup .editor-area': 'update',
        'click button, a': 'update',
        'click .accordion-group': function() {
          return this.model.set('open', !this.model.get('open'));
        },
        'click .toggle-visible': function(e) {
          e.stopPropagation();
          return this.model.set('visible', !this.model.get('visible'));
        },
        'click .bold': 'bold',
        'click .italic': 'italic',
        'click .underline': 'underline',
        'click .link': 'link',
        'click .size': 'size',
        'click .insert-input': 'insertInput',
        'click .insert-table': 'insertTable',
        'click .insert-tts': 'insertTTS',
        'click .wb-tts i': function(e) {
          var v;
          v = new Views.TTS(JSON.parse(Base64.decode($(e.currentTarget).parent().attr('data-config'))));
          return v.render().open();
        }
      };

      Main.prototype.simplifiedHTML = function() {
        var body;
        body = this.$('.editor-area').html();
        return body;
      };

      Main.prototype.getSelectedText = function() {
        var _ref;
        if ((_ref = this.document) != null ? _ref.selection : void 0) {
          return document.selection.createRange().text;
        } else if (this.document) {
          return document.getSelection().toString();
        }
      };

      Main.prototype.getSelectedHtml = function() {
        var _ref;
        if ((_ref = this.document) != null ? _ref.selection : void 0) {
          return document.selection.createRange().html;
        }
      };

      Main.prototype.selectTest = function() {
        if (this.getSelectedText().length === 0) {
          alert('Select some text first.');
          return false;
        }
        return true;
      };

      Main.prototype.exec = function(type, arg) {
        if (arg == null) {
          arg = null;
        }
        return this.document.execCommand(type, false, arg);
      };

      Main.prototype.query = function(type) {
        return this.document.queryCommandValue(type);
      };

      Main.prototype.bold = function(e) {
        e.preventDefault();
        return this.exec('bold');
      };

      Main.prototype.italic = function(e) {
        e.preventDefault();
        return this.exec('italic');
      };

      Main.prototype.underline = function(e) {
        e.preventDefault();
        return this.exec('underline');
      };

      Main.prototype.list = function(e) {
        e.preventDefault();
        return this.exec('insertUnorderedList');
      };

      Main.prototype.insertInput = function(e) {
        var data, selectedText, v,
          _this = this;
        e.preventDefault();
        selectedText = this.getSelectedText();
        data = {
          label: selectedText,
          placeholder: '',
          size: 'span6',
          answer: ''
        };
        this.exec('insertHTML', "&nbsp;<span class='temp-hold wb-input'><input type='text' class='" + data.size + "' /></span>&nbsp;");
        v = new Views.Input({
          label: data.label
        });
        v.render().open();
        return v.on('save', function(data) {
          console.log(data);
          _this.$('.temp-hold input').attr('placeholder', data.placeholder).removeClass().addClass("input-" + data.size);
          _this.$('.temp-hold').attr('data-config', Base64.encode(JSON.stringify(data))).removeClass('temp-hold').attr('contenteditable', false);
          return _this.update();
        });
      };

      Main.prototype.insertTable = function(e) {
        console.log(e.currentTarget);
        e.preventDefault();
        return this.exec('insertHTML', "&nbsp;<table class='table table-condensed table-bordered'><tr><td>1</td><td>2</td></tr></table>&nbsp;");
      };

      Main.prototype.insertTTS = function(e) {
        var data, selectedText, v,
          _this = this;
        selectedText = this.getSelectedText();
        data = {
          textToSay: selectedText,
          language: 'eng',
          gender: 'f',
          rate: ''
        };
        this.exec('insertHTML', "&nbsp;<span contenteditable=false data-config='" + (Base64.encode(JSON.stringify(data))) + "' class='wb-tts temp-hold'>" + selectedText + "</span>&nbsp;");
        v = new Views.TTS({
          textToSay: data.textToSay
        });
        v.render().open();
        return v.on('save', function(data) {
          _this.$('.temp-hold').attr('data-config', Base64.encode(JSON.stringify(data))).removeClass('temp-hold').attr('contenteditable', false).html("" + (selectedText ? data.textToSay + ' ' : '') + "<i class='icon-volume-up'/>");
          return _this.update();
        });
      };

      Main.prototype.link = function(e) {
        var href;
        e.preventDefault();
        this.exec('unlink');
        href = prompt('Enter a link:', 'http://');
        if (!href || href === 'http://') {
          return;
        }
        if (!/:\/\//.test(href)) {
          href = 'http://' + href;
        }
        return this.exec('createLink', href);
      };

      Main.prototype.size = function(e) {
        e.preventDefault();
        return this.exec('fontSize', $(e.target).attr('data-size'));
      };

      Main.prototype.loadTemplate = function(e) {
        e.preventDefault();
        return this.$('.editor-area').html(this.templates[$(e.currentTarget).attr('data-template')]);
      };

      Main.prototype.template = function() {
        return div({
          "class": "accordion-group " + (this.model.get('visible') ? 'visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle icon-edit',
              'data-toggle': 'collapse',
              'data-target': ".lab-wb-" + this.label
            }, function() {
              text(" Whiteboard " + this.label);
              return span({
                "class": 'btn-group pull-right'
              }, function() {});
            });
          });
          return div({
            "class": "collapse" + (this.model.get('open') ? ' in' : '') + " lab-wb-" + this.label + " accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner wb-cont'
            }, function() {
              return div({
                "class": "wb-cont-" + this.label
              }, function() {
                div({
                  "class": 'wb-header'
                }, function() {
                  return div({
                    "class": 'btn-toolbar'
                  }, function() {
                    div({
                      "class": 'btn-group pull-right right-group'
                    }, function() {
                      var _ref;
                      return button({
                        "class": "btn btn-mini icon-eye-" + (((_ref = this.model) != null ? _ref.get('visible') : void 0) ? 'open active' : 'close') + " toggle-visible"
                      });
                    });
                    return div({
                      "class": 'btn-group pull-left left-group'
                    }, function() {
                      button({
                        "class": 'btn btn-mini icon-bold bold'
                      });
                      button({
                        "class": 'btn btn-mini icon-italic italic'
                      });
                      button({
                        "class": 'btn btn-mini icon-underline underline'
                      });
                      button({
                        "class": 'btn btn-mini icon-link link'
                      });
                      a({
                        "class": "btn btn-mini dropdown-toggle icon-text-height",
                        'data-toggle': "dropdown",
                        href: "#"
                      }, function() {
                        return span({
                          "class": 'caret'
                        });
                      });
                      ul({
                        "class": 'dropdown-menu'
                      }, function() {
                        li(function() {
                          return a({
                            href: '#',
                            "class": 'size',
                            'data-size': 2
                          }, 'small');
                        });
                        li(function() {
                          return a({
                            href: '#',
                            "class": 'size',
                            'data-size': 4
                          }, 'medium');
                        });
                        return li(function() {
                          return a({
                            href: '#',
                            "class": 'size',
                            'data-size': 5
                          }, 'large');
                        });
                      });
                      button({
                        "class": 'btn btn-mini icon-question-sign insert-input'
                      });
                      button({
                        "class": 'btn btn-mini icon-table insert-table'
                      });
                      return button({
                        "class": 'btn btn-mini icon-comment-alt insert-tts'
                      });
                    });
                  });
                });
                return div({
                  "class": 'wb-body'
                }, function() {
                  return div({
                    "class": 'editor-area',
                    contenteditable: 'true'
                  }, function() {});
                });
              });
            });
          });
        });
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.$('.editor-area').toggleClass('visible', this.model.get('visible'));
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
  });

  module('App.Card', function(exports, top) {
    var Collection, Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      return Collection;

    })(Backbone.Collection);
    return _.extend(exports, {
      Model: Model,
      Collection: Collection,
      Views: Views = {}
    });
  });

  module('App.CardStack', function(exports, top) {
    var Collection, Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'stack';

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'stack';

      return Collection;

    })(Backbone.Collection);
    _.extend(exports, {
      Model: Model,
      Collection: Collection,
      Views: Views = {}
    });
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'li';

      ListItem.prototype.className = 'cardstack-item';

      ListItem.prototype.template = function() {
        return span({
          "class": 'thumbnail'
        }, function() {
          return h3("" + (this.model.get('title')));
        });
      };

      ListItem.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        return this;
      };

      return ListItem;

    })(Backbone.View);
    Views.List = (function(_super) {

      __extends(List, _super);

      function List() {
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.tagName = 'div';

      List.prototype.className = 'cardstack-list';

      List.prototype.template = function() {
        div({
          "class": 'controls-cont'
        }, function() {});
        return ul({
          "class": 'thumbnails cardstack-list-cont'
        }, function() {});
      };

      List.prototype.addItem = function(stack) {
        var itemView;
        itemView = new Views.ListItem({
          model: stack
        });
        itemView.render().open(this.$('.cardstack-list-cont'));
        return this;
      };

      List.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.renderControls();
        return this.renderList();
      };

      return List;

    })(UI.List);
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'container buffer-top';

      Main.prototype.template = function() {};

      return Main;

    })(Backbone.View);
  });

  module('App.File', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'file';

      Model.prototype.idAttribute = '_id';

      Model.prototype.thumbBase = "http://s3.amazonaws.com/lingualabio-media";

      Model.prototype.baseUrl = 'https://lingualabio-media.s3.amazonaws.com';

      Model.prototype.iconHash = {
        image: 'picture',
        video: 'play-circle',
        audio: 'volume-up',
        pdf: 'file'
      };

      Model.prototype.studentName = function() {
        var _ref;
        if (this.get("student")) {
          return (_ref = top.app.data.students.get(this.get('student'))) != null ? _ref.get('name') : void 0;
        } else {
          return null;
        }
      };

      Model.prototype.src = function(dl) {
        var base, _ref;
        if (dl == null) {
          dl = false;
        }
        base = dl ? '/dl' : this.baseUrl;
        switch (this.get('type')) {
          case 'image':
            return "" + base + "/" + (this.get('filename')) + "." + (this.get('ext'));
          case 'video':
            if (top.Modernizr.video.webm) {
              return "" + base + "/" + (this.get('filename')) + ".webm";
            } else if (top.Modernizr.video.h264) {
              return "" + base + "/" + (this.get('filename')) + ".mp4";
            }
            break;
          case 'audio':
            return "" + base + "/" + ((_ref = this.get('filename')) != null ? _ref : this.id) + ".mp3";
        }
      };

      Model.prototype.thumbnail = function() {
        switch (this.get('type')) {
          case 'audio':
            if (this.get('student')) {
              return '/img/cassette.svg';
            } else {
              return '/img/sound.svg';
            }
            break;
          case 'video':
            return "" + this.baseUrl + "/" + (this.get('filename')) + "_0004.png";
          case 'image':
            return "" + this.baseUrl + "/" + (this.get('filename')) + "." + (this.get('ext'));
        }
      };

      Model.prototype.dimensions = function() {
        var img, v;
        switch (this.get('type')) {
          case 'audio':
            return {
              width: null,
              height: null
            };
          case 'video':
            v = $('<video/>').attr('src', this.src())[0];
            return {
              width: v.videoWidth,
              height: v.videoHeight
            };
          case 'image':
            img = new Image();
            img.src = this.src();
            return {
              width: img.width,
              height: img.height
            };
        }
      };

      Model.prototype.icon = function() {
        if (this.get('type') === 'application') {
          return this.iconHash[this.get('ext')];
        } else {
          return this.iconHash[this.get('type')];
        }
      };

      Model.prototype.match = function(query, type, student) {
        var re, _ref;
        re = new RegExp(query, 'i');
        return (student ? this.get('student') : true) && (type === this.get('type') || type === null) && ((re.test(this.get('title'))) || (re.test(this.get('tags'))) || (re.test((_ref = top.app.data.students.get(this.get('student'))) != null ? _ref.get('name') : void 0)));
      };

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "file" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('title'));
      };

      Model.prototype.formattedSize = function() {
        var size;
        size = this.get('size');
        size = size / 1024;
        if ((0 < size && size < 1000)) {
          return "" + (Math.round(size * 10) / 10) + "KB";
        }
        size = size / 1024;
        if (size > 0) {
          return "" + (Math.round(size * 10) / 10) + "MB";
        }
      };

      Model.prototype.formattedDuration = function() {
        var dur, mins, secs;
        dur = this.get('duration');
        if (dur) {
          secs = moment.duration(dur).seconds();
          mins = moment.duration(dur).minutes();
          return "" + mins + ":" + (secs < 10 ? '0' : '') + secs;
        } else {
          return "?s";
        }
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'file';

      Collection.prototype.initialize = function() {};

      Collection.prototype.modelType = function() {
        return "files";
      };

      Collection.prototype.iconHash = {
        image: 'picture',
        video: 'play-circle',
        audio: 'volume-up',
        pdf: 'file'
      };

      Collection.prototype.comparator = function(f) {
        var _ref;
        return 0 - (moment((_ref = f.get('modified')) != null ? _ref : 0).valueOf());
      };

      Collection.prototype.modifiedVal = function() {
        var _ref;
        return moment((_ref = this.get('modified')) != null ? _ref : 0).valueOf();
      };

      Collection.prototype.allTags = function() {
        return _.union(_.flatten(this.map(function(m) {
          var _ref, _ref1;
          return (_ref = (_ref1 = m.get('tags')) != null ? _ref1.split('|') : void 0) != null ? _ref : [];
        })));
      };

      Collection.prototype.filteredBy = function(term) {
        return this.filter(function(m) {
          var re;
          re = new RegExp(term, 'i');
          return re.test(m.get('title'));
        });
      };

      Collection.prototype.recUploads = function(request) {
        if (request) {
          return this.filter(function(m) {
            return m.get('request') === request;
          });
        } else {
          return [];
        }
      };

      Collection.prototype.recUploadsForStudent = function(id) {
        return this.filter(function(m) {
          return m.get('student') === id;
        });
      };

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        console.log('updating ', model);
        switch (method) {
          case 'create':
            return this.add(model);
          case 'update':
            return this.get(model._id).set(model);
          case 'feedback':
            return this.get(model._id).set({
              feedback: model.feedback
            });
          case 'progress':
            console.log('setting: ', model);
            return this.get(model._id).set({
              prepProgress: model.prepProgress,
              status: model.status
            });
          case 'status':
            return this.get(model._id).set(model);
        }
      };

      Collection.prototype.filtered = function(ui) {
        var student, term, type,
          _this = this;
        if (ui == null) {
          ui = {};
        }
        term = ui.term, type = ui.type, student = ui.student;
        return this.filter(function(m) {
          return m.match(term != null ? term : '', type, student);
        });
      };

      Collection.prototype.selectedFiltered = function(ui) {
        return _.filter(this.filtered(ui), function(m) {
          var _ref;
          return _ref = m.id, __indexOf.call(ui.selected, _ref) >= 0;
        });
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        term: '',
        currentListView: 'list',
        adding: false
      };

      return UIState;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.ModalListItem = (function(_super) {

      __extends(ModalListItem, _super);

      function ModalListItem() {
        return ModalListItem.__super__.constructor.apply(this, arguments);
      }

      ModalListItem.prototype.tagName = 'tr';

      ModalListItem.prototype.className = 'modal-list-item';

      ModalListItem.prototype.template = function() {
        td({
          "class": 'thumb'
        }, function() {
          return img({
            src: "" + (this.model.thumbnail())
          });
        });
        return td(function() {
          return div("" + (this.model.get('title')));
        });
      };

      ModalListItem.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return ModalListItem;

    })(Backbone.View);
    Views.ModalSelector = (function(_super) {

      __extends(ModalSelector, _super);

      function ModalSelector() {
        return ModalSelector.__super__.constructor.apply(this, arguments);
      }

      ModalSelector.prototype.tagName = 'div';

      ModalSelector.prototype.className = 'modal fade hide file-selector';

      ModalSelector.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        ModalSelector.__super__.initialize.call(this);
        this.state.set({
          term: '',
          students: null,
          type: null
        });
        this.on('open', function() {
          _this.$el.modal('show');
          return _this.$el.on('hidden', function() {
            return _this.remove();
          });
        });
        return this.state.on('change:type', function() {
          return _this.renderList();
        });
      };

      ModalSelector.prototype.events = {
        'click .filter-by-type button': function(e) {
          var type;
          this.$(e.currentTarget).tooltip('hide');
          type = $(e.currentTarget).attr('data-filter');
          if (this.state.get('type') === type) {
            return this.state.set('type', null);
          } else {
            return this.state.set('type', type);
          }
        }
      };

      ModalSelector.prototype.doSearch = function(e) {
        return this.state.set('term', $(e.currentTarget).val());
      };

      ModalSelector.prototype.template = function() {
        div({
          "class": 'modal-head controls-cont'
        }, function() {});
        return div({
          "class": 'modal-body'
        }, function() {
          return table({
            "class": 'table table-hover table-condensed'
          }, function() {
            thead(function() {
              return tr(function() {
                return td({
                  colspan: 5,
                  "class": 'message-cont'
                }, function() {});
              });
            });
            return tbody({
              "class": 'list-cont'
            }, function() {});
          });
        });
      };

      ModalSelector.prototype.addItem = function(file, prepend) {
        var v, _ref;
        if (prepend == null) {
          prepend = false;
        }
        if (this.collection.length === 1) {
          if ((_ref = this.msg) != null) {
            _ref.remove();
          }
        }
        v = new Views.ModalListItem({
          model: file,
          collection: this.collection,
          state: this.state
        });
        v.render();
        console.log(v);
        if (prepend) {
          return v.$el.prependTo(this.$('.list-cont'));
        } else {
          return v.$el.appendTo(this.$('.list-cont'));
        }
      };

      ModalSelector.prototype.close = function() {
        this.$el.modal('hide');
        return this;
      };

      ModalSelector.prototype.controlsTemplate = function() {
        return div({
          "class": 'navbar'
        }, function() {
          return div({
            "class": 'navbar-inner'
          }, function() {
            div({
              "class": "brand"
            }, "Your files");
            div({
              "class": 'btn-group pull-left filter-by-type'
            }, function() {
              var icon, label, _ref, _results;
              _ref = this.collection.iconHash;
              _results = [];
              for (label in _ref) {
                icon = _ref[label];
                _results.push(button({
                  rel: 'tooltip',
                  'data-title': "show only " + label,
                  'data-filter': "" + label,
                  "class": "btn icon-" + icon + " filter-" + label + " " + (this.state.get('type') === label ? 'active' : '')
                }));
              }
              return _results;
            });
            return form({
              "class": 'navbar-search pull-right'
            }, function() {
              return input({
                type: 'text',
                "class": 'search-query',
                placeholder: 'search files'
              });
            });
          });
        });
      };

      ModalSelector.prototype.renderModalControls = function() {
        var _this = this;
        this.$('controls-cont').html(ck.render(this.controlsTemplate, this));
        this.$('.search-query').typeahead({
          source: this.collection.allTags()
        });
        this.$('.search-query').on('change', function() {
          return _this.state.set('term', _this.$('.search-query').val());
        });
        return this;
      };

      ModalSelector.prototype.renderControls = function() {};

      ModalSelector.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        if (!this.collection.length) {
          this.msg = new UI.Alert({
            message: 'You have no media files.'
          });
          this.msg.render().open(this.$('.message-cont'));
        }
        this.renderList();
        this.renderModalControls();
        return this;
      };

      return ModalSelector;

    })(UI.List);
    Views.Detail = (function(_super) {

      __extends(Detail, _super);

      function Detail() {
        return Detail.__super__.constructor.apply(this, arguments);
      }

      Detail.prototype.tagName = 'div';

      Detail.prototype.className = 'file-detail container buffer-top';

      Detail.prototype.initialize = function(options) {
        this.options = options;
      };

      Detail.prototype.template = function() {
        return div({
          "class": 'row-fluid'
        }, function() {
          div({
            "class": 'span8'
          }, function() {
            switch (this.model.get('type')) {
              case 'video':
                return video({
                  src: "" + (this.model.src()),
                  controls: 'true',
                  "class": 'span12'
                });
              case 'audio':
                return audio({
                  src: "" + (this.model.src()),
                  controls: 'true',
                  "class": 'span12'
                });
              case 'image':
                return img({
                  src: "" + (this.model.src()),
                  "class": 'span12'
                });
            }
          });
          return div({
            "class": 'span3'
          }, function() {});
        });
      };

      Detail.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Detail;

    })(Backbone.View);
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'files-main container';

      Main.prototype.selectIcons = {
        'all': 'check',
        'none': 'check-empty',
        'some': 'reorder'
      };

      Main.prototype.selectStrings = {
        'all': 'Unselect all',
        'none': 'Select all',
        'some': 'Unselect all'
      };

      Main.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        Main.__super__.initialize.call(this);
        this.state.set('type', null);
        _.defaults(this.state, {
          term: '',
          student: null,
          type: null,
          show: 30,
          page: 0
        });
        this.searchBox = new top.App.Teacher.Views.SearchBox({
          collection: this.collection
        });
        this.searchBox.on('change', function(v) {
          return _this.state.set('term', v);
        });
        this.state.on('change:type', function() {
          _this.renderControls();
          return _this.renderList();
        });
        return this.state.on('change:student', function() {
          _this.renderControls();
          return _this.renderList();
        });
      };

      Main.prototype.events = {
        'click .record-video': 'recordVideo',
        'click .upload-google-drive': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.GOOGLE_DRIVE);
        },
        'click .upload-box': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.BOX);
        },
        'click .upload-drop-box': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.DROPBOX);
        },
        'click .upload-computer': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.COMPUTER);
        },
        'click .upload-instagram': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.INSTAGRAM);
        },
        'click .upload-flickr': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.FLICKR);
        },
        'click .upload-url': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.URL);
        },
        'click .upload-find-images': function(e) {
          e.preventDefault();
          return this.uploadFromCloud(filepicker.SERVICES.IMAGE_SEARCH);
        },
        'click .delete-students': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            collection: this.collection.getByIds(this.state.get('selected')),
            modelType: this.collection.modelType(true)
          });
          return dc.render().open();
        },
        'click .toggle-select-all': 'toggleSelectFiltered',
        'click .filter-by-type button': function(e) {
          var type;
          this.$(e.currentTarget).tooltip('hide');
          type = $(e.currentTarget).attr('data-filter');
          if (this.state.get('type') === type) {
            return this.state.set('type', null);
          } else {
            return this.state.set('type', (type === 'all' ? null : type));
          }
        },
        'click .filter-by-student button': function(e) {
          this.$(e.currentTarget).tooltip('hide');
          return this.state.set('student', !this.state.get('student'));
        }
      };

      Main.prototype.selectedFiltered = function() {
        return this.collection.selectedFiltered(this.state.toJSON());
      };

      Main.prototype.filtered = function() {
        return this.collection.filtered(this.state.toJSON());
      };

      Main.prototype.selectState = function() {
        if (this.selectedFiltered().length === 0) {
          return 'none';
        } else if (this.selectedFiltered().length === this.filtered().length) {
          return 'all';
        } else {
          return 'some';
        }
      };

      Main.prototype.controlsTemplate = function() {
        var numFiltered, numSelected, numSelectedFiltered;
        numSelectedFiltered = this.selectedFiltered().length;
        numFiltered = this.filtered().length;
        numSelected = this.state.get('selected').length;
        return div({
          "class": 'btn-toolbar span12'
        }, function() {
          var f;
          div({
            "class": 'btn-group pull-left'
          }, function() {
            return button({
              "class": "btn btn-mini pull-left icon-" + this.selectIcons[this.selectState()] + " toggle-select-all"
            }, " " + this.selectStrings[this.selectState()]);
          });
          button({
            "class": 'btn btn-mini stats'
          }, "" + numFiltered + ((f = this.state.get('type')) ? " " + f : '') + " files " + (this.state.get('student') ? 'by students ' : '') + "shown, " + (this.state.get('selected').length) + " selected");
          div({
            "class": 'btn-group pull-right'
          }, function() {
            a({
              rel: 'tooltip',
              'data-toggle': 'dropdown',
              'data-original-title': 'Upload files from your computer or services like Box, DropBox or Google Drive',
              "class": 'btn btn-mini btn-success dropdown-toggle icon-cloud',
              href: '#'
            }, function() {
              text(' Upload from... ');
              return span({
                "class": 'caret'
              });
            });
            return ul({
              "class": 'dropdown-menu'
            }, function() {
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-computer '
                }, function() {
                  i({
                    "class": 'sbicon-home'
                  });
                  return text(' Your computer');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-box '
                }, function() {
                  i({
                    "class": 'sbicon-box'
                  });
                  return text(' Box');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-google-drive '
                }, function() {
                  i({
                    "class": 'sbicon-gdrive'
                  });
                  return text(' Google Drive');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-drop-box '
                }, function() {
                  i({
                    "class": 'sbicon-dropbox'
                  });
                  return text(' Dropbox');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-instagram '
                }, function() {
                  i({
                    "class": 'sbicon-instagram'
                  });
                  return text(' Instagram');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-flickr '
                }, function() {
                  i({
                    "class": 'sbicon-flickr'
                  });
                  return text(' Flickr');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-find-images '
                }, function() {
                  i({
                    "class": 'icon-picture'
                  });
                  return text(' Public web images');
                });
              });
              return li(function() {
                return a({
                  href: "#",
                  "class": 'upload-url '
                }, function() {
                  i({
                    "class": 'icon-globe'
                  });
                  return text(' A specific URL');
                });
              });
            });
          });
          div({
            "class": 'btn-group pull-right'
          }, function() {
            return button({
              rel: 'tooltip',
              'data-original-title': 'You can record a video right from here!',
              "class": 'btn btn-mini btn-inverse record-video icon-facetime-video'
            }, ' Record a video');
          });
          if (this.state.get('selected').length) {
            div({
              "class": 'btn-group pull-right'
            }, function() {
              return button({
                "class": 'btn btn-mini btn-danger icon-trash delete-students'
              }, ' Delete');
            });
          }
          div({
            "class": 'btn-group pull-right filter-by-type',
            'data-toggle': "buttons-radio"
          }, function() {
            var icon, label, _ref, _results;
            _ref = this.collection.iconHash;
            _results = [];
            for (label in _ref) {
              icon = _ref[label];
              _results.push(button({
                rel: 'tooltip',
                'data-title': "show only " + label,
                'data-filter': "" + label,
                "class": "btn btn-mini icon-" + icon + " filter-" + label + " " + (this.state.get('type') === label ? 'active' : '')
              }));
            }
            return _results;
          });
          return div({
            "class": 'btn-group pull-right filter-by-student',
            'data-toggle': 'buttons-checkbox'
          }, function() {
            return button({
              rel: 'tooltip',
              'data-title': 'show only student submissions',
              "class": "btn btn-mini icon-user " + (this.state.get('student') ? 'active' : '')
            });
          });
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'message-cont'
        }, function() {});
        div({
          "class": 'controls-cont row'
        }, function() {});
        return table({
          "class": 'list-main-cont table table-hover table-condensed'
        }, function() {
          thead({
            "class": 'new-item-cont'
          });
          tbody({
            "class": 'list-cont'
          }, function() {});
          return tfoot(function() {
            return tr(function() {
              return td({
                colspan: 10,
                "class": 'show-more-cont'
              }, function() {});
            });
          });
        });
      };

      Main.prototype.addItem = function(file, prepend) {
        var v, _ref;
        if (prepend == null) {
          prepend = false;
        }
        if (this.collection.length === 1) {
          if ((_ref = this.msg) != null) {
            _ref.remove();
          }
        }
        v = new Views.ListItem({
          model: file,
          collection: this.collection,
          state: this.state
        });
        v.render();
        if (prepend) {
          return v.$el.prependTo(this.$('.list-cont'));
        } else {
          return v.$el.appendTo(this.$('.list-cont'));
        }
      };

      Main.prototype.fpServices = {
        'record a video': {
          service: filepicker.SERVICES.VIDEO,
          icon: 'facetime-video'
        }
      };

      Main.prototype.uploadFromCloud = function(service) {
        var _this = this;
        return window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          services: [service],
          metadata: true,
          maxsize: 50 * 1024 * 1024
        }, function(url, data) {
          console.log(data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
      };

      Main.prototype.recordVideo = function() {
        var _this = this;
        return window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          services: [filepicker.SERVICES.VIDEO],
          metadata: true
        }, function(url, data) {
          console.log(data);
          return _this.collection.create(new Model({
            title: "Video Recording " + (moment().format("YYYY-MMM-D")),
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
      };

      Main.prototype.uploadFromComputer = function(service) {
        var _this = this;
        return window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          services: [filepicker.SERVICES.COMPUTER],
          metadata: true,
          maxsize: 50 * 1024 * 1024
        }, function(url, data) {
          console.log(data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
      };

      Main.prototype.handleFileUpload = function() {
        return console.log($('.file-picker-url').val());
      };

      Main.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, this));
        if (!this.collection.length) {
          this.msg = new UI.Alert({
            message: 'You have no media files to use for your activities! Click the green upload button above to get started.'
          });
          this.msg.render().open(this.$('.new-item-cont'));
        }
        this.searchBox.render();
        this.state.set('term', '');
        this.renderList();
        this.renderControls();
        wait(500, function() {
          return _this.setMoreTrigger();
        });
        this.delegateEvents();
        return this;
      };

      return Main;

    })(UI.List);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'file-list-item list-item';

      ListItem.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.tags = new UI.TagsModal({
          tags: this.model.get('tags')
        });
        this.tags.on('change', function(arr, str) {
          return _this.model.save({
            tags: str
          });
        });
        this.model.on('change:prepProgress', function() {
          return _this.renderThumb();
        });
        this.model.on('change:status', function() {
          return _this.renderThumb();
        });
        this.options.state.on('change:selected', function() {
          return _this.updateSelectStatus();
        });
        return this.model.on('remove', function() {
          return _this.remove();
        });
      };

      ListItem.prototype.events = {
        'change .title': function(e) {
          return this.model.save({
            title: $(e.target).val()
          });
        },
        'click .thumb-cont, .detail': function() {
          if (this.model.get('student')) {
            if (this.model.get('type') === 'audio') {
              return top.app.router.navigate("/student/" + (this.model.get('student')) + "/recording/" + this.model.id, true);
            }
          } else {
            return top.app.router.navigate("/file/" + this.model.id, true);
          }
        },
        'click .select-item': 'toggleSelect',
        'click .delete-item': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            collection: [this.model],
            modelType: this.model.collection.modelType(true)
          });
          return dc.render().open();
        },
        'click .tags-list': function() {
          var tm,
            _this = this;
          tm = new UI.TagsModal({
            tags: this.model.get('tags'),
            label: this.model.get('title'),
            typeahead: app.tagList()
          });
          tm.render();
          return tm.on('change', function(arr, str) {
            _this.model.save('tags', str);
            return _this.render();
          });
        }
      };

      ListItem.prototype.updateSelectStatus = function() {
        this.$('.select-item').toggleClass('icon-check', this.isSelected()).toggleClass('icon-check-empty', !this.isSelected());
        return this.$el.toggleClass('info', this.isSelected());
      };

      ListItem.prototype.isSelected = function() {
        var _ref;
        return _ref = this.model.id, __indexOf.call(this.options.state.get('selected'), _ref) >= 0;
      };

      ListItem.prototype.toggleSelect = function() {
        if (this.isSelected()) {
          this.options.state.set('selected', _.without(this.options.state.get('selected'), this.model.id));
        } else {
          this.options.state.get('selected').push(this.model.id);
        }
        return this.options.state.trigger("change:selected");
      };

      ListItem.prototype.thumbTemplate = function() {
        if (this.get('status') !== 'finished') {
          div('processing');
          return div({
            "class": 'progress progress-striped active'
          }, function() {
            return div({
              "class": 'bar',
              style: "width: " + (this.get('prepProgress' || 5)) + "%"
            });
          });
        } else {
          if (this.thumbnail()) {
            return img({
              src: "" + (this.thumbnail()),
              "class": 'thumb'
            });
          } else {
            return i({
              "class": "icon-" + (this.icon()) + " icon-large"
            });
          }
        }
      };

      ListItem.prototype.template = function() {
        var urls;
        urls = this.model.get('urls');
        td(function() {
          return i({
            "class": "" + (this.isSelected() ? 'icon-check' : 'icon-check-empty') + " select-item"
          });
        });
        td({
          "class": "thumb-cont " + (this.model.get('type'))
        }, function() {});
        td(function() {
          div(input({
            "class": 'title span3',
            type: 'text',
            value: "" + (this.model.get('title'))
          }));
          return div({
            "class": 'timestamp'
          }, function() {
            var _ref, _ref1, _ref2;
            if (this.model.get('student')) {
              return div({
                "class": 'recorded'
              }, "recorded " + (moment((_ref = this.model.get('created')) != null ? _ref : new Date()).calendar()));
            } else {
              div({
                "class": 'uploaded'
              }, "uploaded " + (moment((_ref1 = this.model.get('created')) != null ? _ref1 : new Date()).calendar()));
              return div({
                "class": 'modified'
              }, "last modified " + (moment((_ref2 = this.model.get('modified')) != null ? _ref2 : new Date()).calendar()));
            }
          });
        });
        td(function() {
          var studentName;
          if ((studentName = this.model.studentName())) {
            span({
              "class": 'student icon-user'
            }, " " + studentName);
          }
          return span({
            "class": 'tags-list span3'
          }, function() {
            var tag, _i, _len, _ref, _ref1, _results;
            if (this.model.get('tags')) {
              span({
                "class": 'pull-left icon-tags'
              });
              _ref1 = (_ref = this.model.get('tags')) != null ? _ref.split('|') : void 0;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                tag = _ref1[_i];
                _results.push(span({
                  "class": 'tag'
                }, " " + tag));
              }
              return _results;
            } else {
              return span({
                "class": 'icon-tags'
              }, " +tags");
            }
          });
        });
        td(function() {
          var _ref;
          div({
            "class": 'size icon-truck'
          }, " " + (this.model.formattedSize()));
          if ((_ref = this.model.get('type')) === 'audio' || _ref === 'video') {
            return div({
              "class": 'duration icon-time'
            }, " " + (this.model.formattedDuration()));
          }
        });
        return td(function() {
          return span({
            "class": 'btn-group'
          }, function() {
            button({
              rel: 'tooltip',
              title: 'open/view this file',
              "class": 'btn btn-mini icon-share-alt detail-view'
            });
            a({
              rel: 'tooltip',
              title: 'download this file',
              "class": "btn btn-mini icon-download-alt download-item",
              href: "" + (this.model.src(true)),
              target: '_blank'
            }, function() {});
            return button({
              rel: 'tooltip',
              "class": 'btn btn-mini delete-item icon-trash',
              'data-original-title': 'delete this file'
            });
          });
        });
      };

      ListItem.prototype.deleteItem = function() {
        return this.model.destroy();
      };

      ListItem.prototype.renderThumb = function() {
        this.$('.thumb-cont').html(ck.render(this.thumbTemplate, this.model));
        return this;
      };

      ListItem.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.renderThumb();
        this.$('button, a').tooltip({
          placement: 'bottom'
        });
        this.updateSelectStatus();
        return this;
      };

      return ListItem;

    })(Backbone.View);
    return _ref = [Model, Collection, UI], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UI = _ref[2], _ref;
  });

  module('App.Lab', function(exports, top) {
    var Collection, Model, StudentRecording, StudentRecordings, UIState, Views, _ref;
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      return UIState;

    })(Backbone.Model);
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        this.updateState = __bind(this.updateState, this);
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'lab';

      Model.prototype.idAttribute = '_id';

      Model.prototype.initialize = function(attrs, options) {
        var throttledUpdate,
          _this = this;
        _.extend(this, options);
        this.set({
          'settings': new UIState,
          'whiteBoardA': new UIState({
            visible: false
          }),
          'whiteBoardB': new UIState,
          'mediaA': new UIState,
          'mediaB': new UIState,
          'recorder': new UIState({
            state: 'clean-slate'
          }),
          'questions': new UIState({
            visible: false
          }),
          'recordings': new StudentRecordings
        });
        this.attributes.teacherId = this.teacher.id;
        this.setState(this.teacher.get('labState'));
        throttledUpdate = _.throttle(this.updateState, 5000);
        this.students.on('change:online', function() {});
        this.get('whiteBoardA').on('change', function() {
          log('change wba');
          _this.remoteAction('whiteBoardA', 'update', _this.get('whiteBoardA').toJSON());
          return throttledUpdate();
        });
        this.get('whiteBoardB').on('change', function() {
          _this.remoteAction('whiteBoardB', 'update', _this.get('whiteBoardB').toJSON());
          return throttledUpdate();
        });
        this.get('mediaA').on('change', function() {
          _this.remoteAction('mediaA', 'update', _this.get('mediaA').toJSON());
          return throttledUpdate();
        });
        this.get('mediaB').on('change', function() {
          _this.remoteAction('mediaB', 'update', _this.get('mediaB').toJSON());
          return throttledUpdate();
        });
        this.get('recorder').on('change', function() {
          log('recorder:change');
          _this.remoteAction('recorder', 'update', _this.get('recorder').toJSON());
          return throttledUpdate();
        });
        return this.get('settings').on('change', function() {
          _this.remoteAction('settings', 'update', _this.get('settings').toJSON());
          return throttledUpdate();
        });
      };

      Model.prototype.fromDB = function(data) {
        var method, model, options, student;
        method = data.method, model = data.model, options = data.options;
        student = options.student;
        return this.students.get(student._id).trigger('recorder:state', model.recorder);
      };

      Model.prototype.setState = function(data) {
        var area, state, _results;
        _results = [];
        for (area in data) {
          state = data[area];
          log('setstate', area, state);
          _results.push(this.get(area).set(state));
        }
        return _results;
      };

      Model.prototype.addStudent = function(studentId) {
        var _this = this;
        return this.sync('add:student', null, {
          studentIds: [studentId],
          success: function(data) {
            return log('student added: ', data);
          }
        });
      };

      Model.prototype.removeStudent = function(studentId) {
        var _this = this;
        return this.sync('remove:student', null, {
          studentIds: [studentId],
          success: function(data) {
            return log('student removed', data);
          }
        });
      };

      Model.prototype.getStudents = function() {
        var _this = this;
        return this.sync('read:students', null, {
          success: function(data) {
            return log('students: ', data);
          }
        });
      };

      Model.prototype.getState = function() {
        var area, labState, state, _ref;
        labState = {};
        _ref = this.attributes;
        for (area in _ref) {
          state = _ref[area];
          labState[area] = state.attributes;
        }
        return labState;
      };

      Model.prototype.updateState = function() {
        var _this = this;
        return this.sync('update:state', this.getState(), {
          success: function(err, data) {
            return log('state updated: ', data);
          }
        });
      };

      Model.prototype.remoteAction = function(area, action, data) {
        var actionObj,
          _this = this;
        actionObj = {
          action: action
        };
        actionObj[area] = data;
        return this.sync('action', actionObj, {
          success: function(err, data) {
            return log('action complete: ', data);
          }
        });
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'lab';

      return Collection;

    })(Backbone.Collection);
    StudentRecording = (function(_super) {

      __extends(StudentRecording, _super);

      function StudentRecording() {
        return StudentRecording.__super__.constructor.apply(this, arguments);
      }

      return StudentRecording;

    })(Backbone.Model);
    StudentRecordings = (function(_super) {

      __extends(StudentRecordings, _super);

      function StudentRecordings() {
        return StudentRecordings.__super__.constructor.apply(this, arguments);
      }

      StudentRecordings.prototype.model = StudentRecording;

      return StudentRecordings;

    })(Backbone.Collection);
    _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1];
    exports.Views = Views = {};
    Views.Recording = (function(_super) {

      __extends(Recording, _super);

      function Recording() {
        return Recording.__super__.constructor.apply(this, arguments);
      }

      Recording.prototype.tagName = 'tr';

      Recording.prototype.className = 'recording';

      Recording.prototype.template = function() {
        td({
          "class": 'recording-index'
        }, "" + (1 + this.model.collection.indexOf(this.model)));
        return td({
          "class": "dur icon-" + (this.recorder.get('state') === 'stopped-recording' ? 'play' : 'ok') + " "
        }, " " + (moment.duration(this.model.get('duration')).seconds()) + "s");
      };

      Recording.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Recording;

    })(Backbone.View);
    Views.StudentUpload = (function(_super) {

      __extends(StudentUpload, _super);

      function StudentUpload() {
        return StudentUpload.__super__.constructor.apply(this, arguments);
      }

      StudentUpload.prototype.tagName = 'tr';

      StudentUpload.prototype.className = 'student-upload';

      StudentUpload.prototype.template = function() {
        var student;
        student = app.data.students.get(this.get('student'));
        td(function() {
          return i({
            "class": 'icon-comment'
          });
        });
        return td(function() {
          return "" + (student.get('name'));
        });
      };

      return StudentUpload;

    })(Backbone.View);
    Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        this.startRecordingIn = __bind(this.startRecordingIn, this);

        this.recordFor = __bind(this.recordFor, this);
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'recorder';

      Recorder.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.recTimer = new App.Activity.Timer;
        this.playTimer = new App.Activity.Timer;
        this.bigRecTimer = new App.Activity.Timer;
        this.waitTimer = new App.Activity.Timer;
        this.setTimerEvents();
        this.setStateEvents();
        this.collection.on('add', function() {
          return _this.renderRecordings();
        });
        this.collection.on('reset', function() {
          return _this.renderRecordings();
        });
        return this.options.filez.on('add', function(file) {
          return _this.renderUploads();
        });
      };

      Recorder.prototype.setTimerEvents = function() {
        var _this = this;
        this.playTimer.on('tick', function(data) {
          var secs, ticks;
          return ticks = data.ticks, secs = data.secs, data;
        });
        this.playTimer.on('seek', function(data) {
          var secs, ticks;
          return ticks = data.ticks, secs = data.secs, data;
        });
        this.recTimer.on('tick', function(data) {
          var minsLeft, secs, secsLeft, ticks, timeLeft, waitText;
          ticks = data.ticks, secs = data.secs;
          if (_this.model.get('state') === 'recording-duration') {
            timeLeft = moment.duration(_this.model.get('duration') - ticks);
            secsLeft = (Math.floor(timeLeft.seconds())) + 1;
            minsLeft = Math.floor(timeLeft.minutes());
            waitText = "recording, pauses in" + (minsLeft ? ' ' + minsLeft + 'm' : '') + " " + secsLeft + "s";
            return _this.$('.time-left-recording').text(waitText);
          }
        });
        return this.waitTimer.on('tick', function(data) {
          var minsLeft, secs, secsLeft, ticks, timeLeft, waitText;
          ticks = data.ticks, secs = data.secs;
          timeLeft = moment.duration(_this.model.get('delay') - ticks);
          secsLeft = (Math.floor(timeLeft.seconds())) + 1;
          minsLeft = Math.floor(timeLeft.minutes());
          waitText = "recording in" + (minsLeft ? ' ' + minsLeft + 'm' : '') + " " + secsLeft + "s";
          return _this.$('.time-until-record').text(waitText);
        });
      };

      Recorder.prototype.setStateEvents = function() {
        var _this = this;
        return this.model.on('change:state', function(m, state) {
          switch (state) {
            case 'recording':
              _this.recTimer.start();
              _this.bigRecTimer.start();
              break;
            case 'waiting-to-record':
              _this.waitTimer.start();
              break;
            case 'recording-duration':
              _this.waitTimer.stop();
              _this.recTimer.start();
              _this.bigRecTimer.start();
              break;
            case 'paused-recording':
              _this.collection.add({
                question: _this.model.get('question'),
                at: _this.bigRecTimer.currentMSecs() - _this.recTimer.currentMSecs(),
                delay: _this.model.get('delay'),
                duration: _this.recTimer.currentMSecs()
              });
              _this.recTimer.stop();
              _this.bigRecTimer.pause();
              _this.renderRecordings();
              break;
            case 'stopped-recording':
              _this.recTimer.stop();
              _this.bigRecTimer.stop();
              _this.renderRecordings();
              break;
            case 'playing':
              _this.playTimer.start();
              break;
            case 'paused-playing':
              _this.playTimer.pause();
              break;
            case 'stopped-playing':
              _this.playTimer.stop();
              break;
            case 'clean-slate':
              _this.recTimer.stop();
              _this.playTimer.stop();
              _this.bigRecTimer.stop();
              _this.collection.reset([]);
              log('resetting lastSubmit');
              _this.model.set({
                lastSubmit: null
              });
              break;
            case 'submitting':
              if (typeof console !== "undefined" && console !== null) {
                console.log('submitting...');
              }
          }
          _this.renderControls();
          return _this.renderUploads();
        });
      };

      Recorder.prototype.events = {
        'click .start-record': function(e) {
          e.preventDefault();
          return this.startRecordingIn($(e.currentTarget).attr('data-delay'), $(e.currentTarget).attr('data-duration'));
        },
        'click .pause-record': function() {
          return this.model.set('state', 'paused-recording');
        },
        'click .stop-record': function() {
          return this.model.set('state', 'stopped-recording');
        },
        'click .start-play': function() {
          return this.model.set('state', 'playing');
        },
        'click .pause-play': function() {
          return this.model.set('state', 'paused-playing');
        },
        'click .submit-rec': function() {
          this.model.set({
            state: 'submitting',
            lastSubmit: moment().valueOf(),
            tags: this.options.settings.get('tags'),
            title: this.options.settings.get('title')
          });
          return this.model.set('state', 'waiting-for-recordings');
        },
        'click .clean-slate': function() {
          return this.model.set('state', 'clean-slate');
        },
        'click .trash-rec': function() {
          this.model.set('state', 'clean-slate');
          this.model.set('recStart', 0);
          return this.model.set('recStop', 0);
        },
        'change .question-label': function(e) {
          return this.model.set('question', $(e.currentTarget).val());
        },
        'click .pause-on-record': function(e) {
          $(e.currentTarget).toggleClass('active');
          return this.model.set('pauseMediaOnRecord', !this.model.get('pauseMediaOnRecord'));
        },
        'click .student-control': function(e) {
          $(e.currentTarget).toggleClass('active');
          return this.model.set('studentControl', !this.model.get('studentControl'));
        }
      };

      Recorder.prototype.controlsTemplate = function() {
        var state;
        div({
          "class": 'btn-toolbar'
        }, function() {
          return div({
            "class": 'btn-group'
          }, function() {
            button({
              rel: 'tooltip',
              title: 'Give student control of the recorder',
              "class": "btn btn-mini student-control icon-hand-up " + (this.model.get('studentControl') ? 'active' : '')
            });
            return button({
              rel: 'tooltip',
              title: 'Automatically pause media while recording.',
              "class": "btn btn-mini icon-film pause-on-record " + (this.model.get('pauseMediaOnRecord') ? 'active' : '')
            });
          });
        });
        switch ((state = this.model.get('state'))) {
          case 'clean-slate':
          case 'paused-recording':
            input({
              type: 'text',
              placeholder: "What is question #" + (this.collection.length + 1),
              "class": 'span12 question-label pull-left'
            });
            div({
              "class": 'btn-toolbar'
            }, function() {
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-mini btn-danger icon-certificate start-record',
                  'data-delay': 0,
                  'data-duration': 0
                }, " record now");
              });
              div({
                "class": 'btn-group'
              }, function() {
                button({
                  "class": 'btn btn-mini btn-danger dropdown-toggle icon-time',
                  'data-toggle': 'dropdown'
                }, function() {
                  span(" rec ");
                  return span({
                    "class": 'caret'
                  });
                });
                return ul({
                  "class": 'dropdown-menu'
                }, function() {
                  li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 5,
                      'data-duration': 10
                    }, 'in 5s, for 10s');
                  });
                  li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 10,
                      'data-duration': 30
                    }, 'in 10s, for 30s');
                  });
                  li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 15,
                      'data-duration': 60
                    }, 'in 15s, for 1min');
                  });
                  li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 20,
                      'data-duration': 90
                    }, 'in 20s, for 1&frac12min');
                  });
                  li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 30,
                      'data-duration': 120
                    }, 'in 30s, for 2min');
                  });
                  li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 60,
                      'data-duration': 180
                    }, 'in 1min, for 3min');
                  });
                  return li(function() {
                    return a({
                      href: '#',
                      "class": 'start-record',
                      'data-delay': 60,
                      'data-duration': 240
                    }, 'in 1min, for 4min');
                  });
                });
              });
              if (state === 'paused-recording') {
                return button({
                  "class": 'btn btn-mini btn-inverse icon-sign-blank stop-record'
                }, ' fin');
              }
            });
            break;
          case 'waiting-to-record':
            div({
              "class": 'alert alert-info time-until-record'
            }, 'waiting to record');
            break;
          case 'recording-duration':
            div({
              "class": 'alert alert-danger time-left-recording'
            }, 'recording for duration');
            break;
          case 'recording':
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-mini btn-inverse icon-pause pause-record btn-block'
              }, ' pause');
            });
            break;
          case 'stopped-recording':
          case 'paused-playing':
          case 'stopped-playing':
          case 'playing':
            div({
              "class": 'time-played'
            });
            div({
              "class": 'btn-toolbar'
            }, function() {
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": "btn btn-mini btn-info " + (state === 'playing' ? 'icon-pause start-pause' : 'icon-play pause-play')
                }, ' play all');
              });
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-mini btn-success icon-download-alt submit-rec'
                }, ' collect');
              });
              return div({
                "class": 'btn-group pull-right'
              }, function() {
                return button({
                  "class": 'btn btn-mini btn-danger icon-trash trash-rec'
                }, ' discard');
              });
            });
            break;
          case 'submitting':
            log('submitting...');
            break;
          case 'waiting-for-recordings':
            div({
              "class": 'waiting-for-recordings'
            }, function() {});
        }
        return div({
          "class": 'btn-toolbar'
        }, function() {});
      };

      Recorder.prototype.renderControls = function() {
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this.options));
        this.$('[rel=tooltip]').tooltip();
        return this;
      };

      Recorder.prototype.formattedTime = function(time) {
        var mins, secs;
        mins = time.mins;
        secs = time.secs < 10 ? "0" + time.secs : time.secs;
        return "" + mins + ":" + secs;
      };

      Recorder.prototype.updateTimeRecorded = function() {
        log('time-rec');
        return this.$('.time-recorded').text(this.formattedTime(this.recTimer.currentTimeObj()));
      };

      Recorder.prototype.updateTimePlayed = function() {
        return this.$('.time-played').text(this.formattedTime(this.playTimer.currentTimeObj()));
      };

      Recorder.prototype.pauseRecording = function() {
        return this.model.set('state', 'paused-recording');
      };

      Recorder.prototype.recordFor = function(duration) {
        var _this = this;
        if (duration) {
          this.recTimer.stop();
          this.recTimer.addCues({
            at: duration,
            fn: function() {
              return _this.pauseRecording();
            }
          });
          return this.model.set({
            'state': 'recording-duration',
            'duration': duration * 1000
          });
        } else {
          return this.model.set('state', 'recording');
        }
      };

      Recorder.prototype.startRecordingIn = function(delay, duration) {
        var _this = this;
        if (delay) {
          this.waitTimer.stop();
          this.waitTimer.addCues({
            at: delay,
            fn: function() {
              return _this.recordFor(duration);
            }
          });
          return this.model.set({
            'state': 'waiting-to-record',
            'delay': delay * 1000
          });
        } else {
          return this.recordFor(duration);
        }
      };

      Recorder.prototype.renderRecordings = function() {
        var rec, rv, _i, _len, _ref1, _results;
        this.$('.student-recordings').empty();
        if (this.collection.length) {
          this.$('.student-recordings').html("" + this.collection.length + " responses so far");
        }
        _ref1 = this.collection.models;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          rec = _ref1[_i];
          rv = new Views.Recording({
            model: rec,
            recorder: this.model
          });
          _results.push(rv.render().open(this.$('.student-recordings')));
        }
        return _results;
      };

      Recorder.prototype.uploadTemplate = function() {
        var uploads;
        uploads = this.filez.recUploads(this.model.get('lastSubmit'));
        if (uploads.length === this.students.onlineControlled().length) {
          if (uploads.length > 1) {
            div({
              "class": "alert alert-succes icon-ok"
            }, " All " + uploads.length + " recordings received!");
          } else {
            div({
              "class": "alert alert-succes icon-ok"
            }, " Recording received!");
          }
          return button({
            "class": "btn btn-success clean-slate"
          }, " record again");
        } else {
          div({
            "class": "alert alert-warning icon-ok"
          }, " " + uploads.length + " recording" + (uploads.length > 1 ? 's' : '') + " received so far");
          return button({
            "class": "btn btn-warning clean-slate"
          }, " record again");
        }
      };

      Recorder.prototype.renderUploads = function() {
        var uploads;
        if (this.model.get('state') === 'waiting-for-recordings') {
          this.$('.student-uploads').html(ck.render(this.uploadTemplate, this.options));
          return uploads = this.options.filez.recUploads(this.model.get('lastSubmit'));
        } else {
          return this.$('.student-uploads').empty();
        }
      };

      Recorder.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {
            return span({
              "class": 'accordion-toggle icon-comment',
              'data-toggle': 'collapse',
              'data-target': '.lab-recorder'
            }, ' Recorder');
          });
          return div({
            "class": 'collapse lab-recorder accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              return div({
                "class": 'recorder-cont'
              }, function() {
                div({
                  "class": 'time-played'
                }, function() {});
                div({
                  "class": 'scrubber-cont'
                }, function() {});
                div({
                  "class": 'controls-cont'
                }, function() {});
                table({
                  "class": 'table table-condensed table-hover student-recordings'
                }, function() {});
                return table({
                  "class": 'table table-condensed table-hover student-uploads'
                }, function() {});
              });
            });
          });
        });
      };

      Recorder.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.renderControls();
        this.renderRecordings();
        this.renderUploads();
        return this;
      };

      return Recorder;

    })(Backbone.View);
    Views.EventsTimeLine = (function(_super) {

      __extends(EventsTimeLine, _super);

      function EventsTimeLine() {
        return EventsTimeLine.__super__.constructor.apply(this, arguments);
      }

      EventsTimeLine.prototype.tagName = 'div';

      EventsTimeLine.prototype.className = 'events-timeline';

      EventsTimeLine.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {
            return span({
              "class": 'accordion-toggle icon-cogs',
              'data-toggle': 'collapse',
              'data-target': '.lab-timeline'
            }, ' Timeline');
          });
          return div({
            "class": 'collapse lab-timeline accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              return h3("hi");
            });
          });
        });
      };

      return EventsTimeLine;

    })(Backbone.View);
    Views.MediaPlayer = (function(_super) {

      __extends(MediaPlayer, _super);

      function MediaPlayer() {
        return MediaPlayer.__super__.constructor.apply(this, arguments);
      }

      MediaPlayer.prototype.tagName = 'div';

      MediaPlayer.prototype.className = 'media-player';

      MediaPlayer.prototype.playbackRates = [0.5, 0.75, 1, 1.25, 1.5, 2];

      MediaPlayer.prototype.rateLabel = function(val) {
        switch (val) {
          case 0.5:
            return '&frac12;x';
          case 0.75:
            return '&frac34;x';
          case 1:
            return '1x';
          case 1.25:
            return '1&frac14;x';
          case 1.5:
            return '1&frac12;x';
          case 2:
            return '2x';
        }
      };

      MediaPlayer.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.state = new UIState({
          term: '',
          type: null,
          student: null
        });
        this.collection.on("load:" + this.options.label, function(file) {
          _this.model.set('file', file.attributes);
          _this.model.trigger('change:file', _this.model, _this.model.get('file'));
          _this.render();
          return _this.setPcEvents();
        });
        this.on('open', function() {
          return _this.setPcEvents();
        });
        this.model.on('change:visible', function() {
          _this.$('.accordion-group').toggleClass('visible');
          return _this.$('.toggle-visible').toggleClass('icon-eye-open').toggleClass('icon-eye-close').toggleClass('active');
        });
        this.model.on('change:muted', function(m, muted) {
          _this.$('.toggle-mute').toggleClass('icon-volume-up').toggleClass('icon-volume-off').toggleClass('active');
          return _this.pc.volume((muted ? 0.1 : 1));
        });
        this.model.on('change:fullscreen', function(m, fs) {
          return _this.$('.toggle-fullscreen').toggleClass('icon-fullscreen').toggleClass('icon-resize-small').toggleClass('active');
        });
        return this.state.on('change', function() {
          return _this.renderList();
        });
      };

      MediaPlayer.prototype.events = {
        'click .change-media': 'selectMedia',
        'click .speed-option': 'changeSpeed',
        'click .play': function() {
          return this.pc.play();
        },
        'click .pause': function() {
          return this.pc.pause();
        },
        'click .back-10': function() {
          return this.pc.currentTime(this.pc.currentTime() - 10);
        },
        'click .back-5': function() {
          return this.pc.currentTime(this.pc.currentTime() - 5);
        },
        'click .toggle-mute': function() {
          console.log('vol', this.pc.volume());
          return this.model.set('muted', !this.model.get('muted'));
        },
        'click .toggle-visible': function(e) {
          e.stopPropagation();
          return this.model.set('visible', !this.model.get('visible'));
        },
        'click .toggle-fullscreen': function(e) {
          return this.model.set('fullscreen', !this.model.get('fullscreen'));
        },
        'click .speed-inc': function() {
          return this.changeSpeed(1);
        },
        'click .speed-dec': function() {
          return this.changeSpeed(-1);
        },
        'keyup input.search-query': function(e) {
          return this.doSearch($(e.currentTarget).val());
        }
      };

      MediaPlayer.prototype.doSearch = function(term) {
        return this.state.set('term', term);
      };

      MediaPlayer.prototype.template = function() {
        var file;
        file = this.model.get('file') ? new App.File.Model(this.model.get('file')) : null;
        return div({
          "class": "accordion-group" + (this.model.get('visible') ? ' visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle '
            }, function() {
              var _ref1, _ref2;
              span({
                'data-toggle': 'collapse',
                'data-target': ".lab-media-" + this.label,
                "class": "media-name icon-" + ((_ref1 = file != null ? file.icon() : void 0) != null ? _ref1 : 'play-circle')
              }, " " + (file != null ? file.get('title') : 'Media...') + ((_ref2 = file != null ? file.get('type') : void 0) === 'video' || _ref2 === 'audio' ? ' (' + file.formattedDuration() + ')' : ''));
              return span({
                "class": 'pull-right'
              }, function() {
                var _ref3;
                if ((_ref3 = file != null ? file.get('type') : void 0) === 'audio' || _ref3 === 'video') {
                  button({
                    "class": "btn btn-mini icon-cogs"
                  });
                }
                if (file != null) {
                  text("&nbsp;&nbsp;");
                  return button({
                    "class": 'btn btn-mini change-media icon-remove'
                  });
                }
              });
            });
          });
          return div({
            "class": "collapse in lab-media-" + this.label + " accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              if (file != null) {
                div({
                  "class": 'controls-cont'
                }, function() {});
                div({
                  "class": 'scrubber-cont'
                }, function() {});
                return div({
                  "class": 'media-cont'
                }, function() {});
              } else {
                return div({
                  "class": 'lab-file-list'
                }, function() {
                  input({
                    type: 'text',
                    "class": 'search-query span12',
                    placeholder: 'search / filter'
                  });
                  return table({
                    "class": 'table table-condensed table-hover'
                  }, function() {
                    return tbody(function() {});
                  });
                });
              }
            });
          });
        });
      };

      MediaPlayer.prototype.selectMedia = function(e) {
        var _ref1;
        e.stopPropagation();
        this.model.set('file', null);
        this.model.set('visible', false);
        this.model.set('currentTime', 0);
        if ((_ref1 = this.pc) != null) {
          _ref1.destroy();
        }
        this.pc = null;
        return this.render();
      };

      MediaPlayer.prototype.changeSpeed = function(amt) {
        var i;
        i = _.indexOf(this.playbackRates, this.pc.playbackRate());
        i = (i + amt === this.playbackRates.length) || (i + amt < 0) ? i : i + amt;
        return this.pc.playbackRate(this.playbackRates[i]);
      };

      MediaPlayer.prototype.formattedTime = function() {
        var dur;
        dur = moment.duration(this.pc.currentTime() * 1000);
        return "" + (dur.minutes()) + ":" + (dur.seconds() < 10 ? '0' : '') + (dur.seconds());
      };

      MediaPlayer.prototype.controlsTemplate = function() {
        return div({
          "class": 'btn-toolbar span12'
        }, function() {
          var type;
          if ((type = this.model.get('file').type) === 'image') {
            return div({
              "class": "btn-group pull-right"
            }, function() {
              button({
                rel: 'tooltip',
                title: "Should the student see the " + type + "?",
                "class": "btn btn-mini icon-eye-" + (this.model.get('visible') ? 'open active' : 'close') + " toggle-visible"
              });
              return button({
                rel: 'tooltip',
                title: "Fill student's screen with the " + type + "?",
                "class": "btn btn-mini icon-" + (this.model.get('fullscreen') ? 'resize-small active' : 'fullscreen') + " toggle-fullscreen"
              });
            });
          } else if (type === 'audio' || type === 'video') {
            div({
              "class": 'btn-group pull-right'
            }, function() {
              button({
                "class": "btn btn-mini" + (this.pc.playbackRate() === 0.5 ? ' disabled' : '') + " icon-caret-left speed-dec"
              });
              button({
                "class": 'btn btn-mini disabled speed'
              }, " " + (this.rateLabel(this.pc.playbackRate())) + " speed");
              return button({
                "class": "btn btn-mini" + (this.pc.playbackRate() === 2 ? ' disabled' : '') + " icon-caret-right speed-inc"
              });
            });
            div({
              "class": 'btn-group'
            }, function() {
              button({
                rel: 'tooltip',
                title: "Allow student to control " + type + " independently?",
                "class": "btn btn-mini icon-hand-up " + (this.model.get('studentControl') ? 'active' : '')
              });
              if (type === 'video') {
                button({
                  rel: 'tooltip',
                  title: "Should the student see the " + type + "?",
                  "class": "btn btn-mini icon-eye-" + (this.model.get('visible') ? 'open active' : 'close') + " toggle-visible"
                });
                button({
                  rel: 'tooltip',
                  title: "Fill student's screen with the " + type + "?",
                  "class": "btn btn-mini icon-" + (this.model.get('fullscreen') ? 'resize-small active' : 'fullscreen') + " toggle-fullscreen"
                });
              }
              return button({
                rel: 'tooltip',
                title: "Should the student hear the " + type + " sound?",
                "class": "btn btn-mini icon-volume-" + (this.model.get('muted') ? 'off' : 'up active') + " toggle-mute"
              });
            });
            return div({
              "class": 'btn-group pull-left'
            }, function() {
              if (this.pc.paused()) {
                return div({
                  "class": 'btn btn-mini btn-success icon-play play'
                }, " " + (this.formattedTime()));
              } else {
                return div({
                  "class": 'btn btn-mini btn-inverse icon-pause pause'
                }, " " + (this.formattedTime()));
              }
            });
          }
        });
      };

      MediaPlayer.prototype.avTemplate = function() {
        var file;
        file = new App.File.Model(this.file);
        return video({
          src: "" + (file.src()),
          "class": "" + (file.get('type')) + "-type"
        });
      };

      MediaPlayer.prototype.renderControls = function() {
        console.log('render cntrols');
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this));
        return this;
      };

      MediaPlayer.prototype.renderScrubber = function() {
        var _this = this;
        this.scrubber.render().open(this.$('.scrubber-cont'));
        return this.scrubber.on('change', function(v) {
          console.log('change scrubber', v);
          return _this.pc.currentTime(v / 1000);
        });
      };

      MediaPlayer.prototype.setPcEvents = function() {
        var _ref1, _ref2,
          _this = this;
        console.log('ev');
        if ((_ref1 = (_ref2 = this.model.get('file')) != null ? _ref2.type : void 0) === 'video' || _ref1 === 'audio') {
          this.pc = new Popcorn(this.$('.media-cont video')[0]);
          this.pc.on('canplay', function() {
            _this.renderControls();
            _this.pc.currentTime(_this.model.get('currentTime'));
            _this.pc.playbackRate(_this.model.get('playbackRate'));
            _this.scrubber = new UI.Slider({
              max: _this.pc.duration() * 1000
            });
            return _this.renderScrubber();
          });
          this.pc.on('playing', function() {
            _this.model.set({
              currentTime: _this.pc.currentTime()
            }, {
              silent: true
            });
            _this.model.set('state', 'playing');
            return _this.renderControls();
          });
          this.pc.on('pause', function() {
            _this.model.set({
              currentTime: _this.pc.currentTime()
            }, {
              silent: true
            });
            _this.model.set('state', 'paused');
            return _this.renderControls();
          });
          this.pc.on('ended', function() {
            _this.model.set('event', 'ended');
            return _this.renderScrubber();
          });
          this.pc.on('seeking', function() {
            return _this.model.set({
              currentTime: _this.pc.currentTime(),
              event: 'seeking'
            });
          });
          this.pc.on('ratechange', function() {
            console.log('rate change');
            _this.model.set('playbackRate', _this.pc.playbackRate());
            return _this.renderControls();
          });
          return this.pc.on('timeupdate', function() {
            _this.model.set({
              currentTime: _this.pc.currentTime()
            }, {
              silent: true
            });
            _this.scrubber.setVal(_this.pc.currentTime() * 1000);
            _this.$('.play').text(" " + (_this.formattedTime()));
            return _this.$('.pause').text(" " + (_this.formattedTime()));
          });
        }
      };

      MediaPlayer.prototype.renderList = function() {
        var file, fv, _i, _len, _ref1, _results;
        this.$('.lab-file-list tbody').empty();
        _ref1 = this.collection.filtered(this.state.toJSON());
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          file = _ref1[_i];
          fv = new Views.LabFile({
            model: file,
            label: this.options.label
          });
          _results.push(fv.render().open(this.$('.lab-file-list tbody')));
        }
        return _results;
      };

      MediaPlayer.prototype.render = function() {
        var file, imgEl;
        file = this.model.get('file');
        console.log(file);
        this.$el.html(ck.render(this.template, this.options));
        if (!(file != null)) {
          this.renderList();
        } else {
          file = new App.File.Model(file);
          switch (file.get('type')) {
            case 'image':
              imgEl = $('<img/>').attr('src', file.src());
              imgEl.appendTo(this.$('.media-cont'));
              this.renderControls();
              break;
            case 'video':
            case 'audio':
              this.$('.media-cont').html(ck.render(this.avTemplate, this.model.attributes));
          }
        }
        return this;
      };

      return MediaPlayer;

    })(Backbone.View);
    Views.LabStudent = (function(_super) {

      __extends(LabStudent, _super);

      function LabStudent() {
        return LabStudent.__super__.constructor.apply(this, arguments);
      }

      LabStudent.prototype.tagName = 'tr';

      LabStudent.prototype.className = 'lab-student';

      LabStudent.prototype.recorderStates = {
        'submitting': 'rss',
        'submitted': 'download-alt',
        'none': '',
        'recording': 'comment',
        'recording-duration': 'comment'
      };

      LabStudent.prototype.initialize = function() {
        var _this = this;
        this.model.on('change:online', function(student, online) {
          _this.$el.toggleClass('online', online);
          return _this.model.collection.trigger('change:online', _this.model);
        });
        this.model.on('change:help', function(student, help) {
          _this.$el.toggleClass('help', help);
          return _this.render();
        });
        this.model.on('change:control', function(student, control) {
          return _this.render();
        });
        return this.model.on('recorder:state', function(recorder) {
          return _this.$('.recorder-state i').removeClass().addClass("icon-" + _this.recorderStates[recorder.state]);
        });
      };

      LabStudent.prototype.events = {
        'click .toggle-control': function() {
          this.model.toggleControl();
          return this.model.collection.trigger('change:control');
        }
      };

      LabStudent.prototype.template = function() {
        var recorderState, _ref1, _ref2;
        recorderState = (_ref1 = (_ref2 = this.model.get('teacherLabState')) != null ? _ref2.recorder.state : void 0) != null ? _ref1 : 'none';
        td(function() {
          return i({
            "class": "online-status icon-certificate " + (this.model.get('online') ? 'online' : '') + (this.model.get('help') ? ' help' : '')
          });
        });
        td("" + (this.model.get('name')));
        td({
          "class": 'recorder-state'
        }, function() {
          return i({
            "class": "icon-" + this.recorderStates[recorderState]
          });
        });
        td(function() {
          if (this.model.get('help')) {
            return button({
              "class": 'btn btn-mini icon-bullhorn'
            });
          }
        });
        return td(function() {
          return button({
            'data-id': "" + this.model.id,
            "class": "btn btn-mini icon-link box pull-right toggle-control " + (this.model.get('control') ? 'active' : ''),
            'data-toggle': 'button'
          });
        });
      };

      LabStudent.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.$el.toggleClass('help', this.model.get('help'));
        this.$el.toggleClass('online', this.model.get('online'));
        return this;
      };

      return LabStudent;

    })(Backbone.View);
    Views.LabFile = (function(_super) {

      __extends(LabFile, _super);

      function LabFile() {
        return LabFile.__super__.constructor.apply(this, arguments);
      }

      LabFile.prototype.tagName = 'tr';

      LabFile.prototype.className = 'lab-file';

      LabFile.prototype.initialize = function(options) {
        this.options = options;
      };

      LabFile.prototype.events = {
        'click': function() {
          return this.model.collection.trigger("load:" + this.options.label, this.model);
        }
      };

      LabFile.prototype.template = function() {
        td(function() {
          return img({
            src: "" + (this.thumbnail())
          });
        });
        return td(function() {
          return div("" + (this.get('title')));
        });
      };

      return LabFile;

    })(Backbone.View);
    Views.WhiteBoard = (function(_super) {

      __extends(WhiteBoard, _super);

      function WhiteBoard() {
        return WhiteBoard.__super__.constructor.apply(this, arguments);
      }

      WhiteBoard.prototype.tagName = 'div';

      WhiteBoard.prototype.className = 'lab-whiteboard';

      WhiteBoard.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.editor = new UI.HtmlEditor({
          html: this.model.get('html')
        });
        return this.model.on('change:visible', function() {
          _this.$('.accordion-group').toggleClass('visible');
          _this.$('.toggle-visible').toggleClass('icon-eye-close').toggleClass('icon-eye-open');
          return _this.$('.editor-area').toggleClass('visible');
        });
      };

      WhiteBoard.prototype.events = {
        'keyup .editor-area': 'update',
        'click button, a': 'update',
        'click .accordion-group': function() {
          return this.model.set('open', !this.model.get('open'));
        },
        'click .toggle-visible': function(e) {
          e.stopPropagation();
          return this.model.set('visible', !this.model.get('visible'));
        }
      };

      WhiteBoard.prototype.update = function() {
        return this.model.set('html', this.editor.simplifiedHTML());
      };

      WhiteBoard.prototype.template = function() {
        return div({
          "class": "accordion-group " + (this.model.get('visible') ? 'visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle icon-edit',
              'data-toggle': 'collapse',
              'data-target': ".lab-wb-" + this.label
            }, function() {
              text(" Whiteboard " + this.label);
              return span({
                "class": 'btn-group pull-right'
              }, function() {});
            });
          });
          return div({
            "class": "collapse" + (this.model.get('open') ? ' in' : '') + " lab-wb-" + this.label + " accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner wb-cont'
            }, function() {
              return div({
                "class": "wb-cont-" + this.label
              }, function() {});
            });
          });
        });
      };

      WhiteBoard.prototype.eyeTemplate = function() {
        var _ref1;
        return button({
          "class": "btn btn-mini icon-eye-" + (((_ref1 = this.model) != null ? _ref1.get('visible') : void 0) ? 'open active' : 'close') + " toggle-visible"
        });
      };

      WhiteBoard.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.editor.render().open(this.$(".wb-cont-" + this.options.label));
        this.$('.wb-header .right-group').html(ck.render(this.eyeTemplate, this.options));
        this.$('.editor-area').toggleClass('visible', this.model.get('visible'));
        return this;
      };

      return WhiteBoard;

    })(Backbone.View);
    Views.Questions = (function(_super) {

      __extends(Questions, _super);

      function Questions() {
        return Questions.__super__.constructor.apply(this, arguments);
      }

      Questions.prototype.tagName = 'div';

      Questions.prototype.className = 'lab-questions-main';

      Questions.prototype.initialize = function(options) {
        this.options = options;
      };

      Questions.prototype.template = function() {
        return div({
          "class": "accordion-group " + (this.model.get('visible') ? 'visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle icon-edit',
              'data-toggle': 'collapse',
              'data-target': ".lab-questions"
            }, function() {
              text(" Questions");
              return span({
                "class": 'btn-group pull-right'
              }, function() {});
            });
          });
          return div({
            "class": "collapse" + (this.model.get('open') ? ' in' : '') + " lab-questions accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner questions-cont'
            }, function() {
              return text("blarg");
            });
          });
        });
      };

      Questions.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Questions;

    })(Backbone.View);
    Views.Students = (function(_super) {

      __extends(Students, _super);

      function Students() {
        return Students.__super__.constructor.apply(this, arguments);
      }

      Students.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.state = this.options.state = new UI.UIState({
          term: ''
        });
        this.collection.on('help', function() {
          return _this.renderHeading();
        });
        return this.state.on('change:term', function() {
          _this.renderControls();
          return _this.renderStudentsList();
        });
      };

      Students.prototype.events = {
        'click .toggle-control-selected': function(e) {
          $(e.currentTarget).tooltip('hide');
          return this.toggleControlSelected();
        }
      };

      Students.prototype.doSearch = function(term) {
        return this.state.set('term', term);
      };

      Students.prototype.toggleControlSelected = function() {
        return this.collection.toggleControl({
          selected: _.pluck(this.filtered(), 'id')
        });
      };

      Students.prototype.filtered = function() {
        return this.collection.filtered(this.state.toJSON());
      };

      Students.prototype.someNotControlled = function() {
        return (_.filter(this.filtered(), function(s) {
          return !s.get('control');
        })).length;
      };

      Students.prototype.headingTemplate = function() {
        return span({
          "class": 'accordion-toggle icon-group',
          'data-toggle': 'collapse',
          'data-target': '.lab-students'
        }, function() {
          span({
            "class": ''
          }, ' Students');
          return span({
            "class": 'pull-right'
          }, function() {
            var needHelp;
            if ((needHelp = this.collection.studentsNeedingHelp())) {
              return span({
                "class": 'icon-bullhorn need-help'
              }, " " + needHelp);
            }
          });
        });
      };

      Students.prototype.controlsTemplate = function() {
        var someNotControlled;
        someNotControlled = this.someNotControlled();
        return button({
          rel: 'tooltip',
          title: "" + (someNotControlled ? 'Link' : 'Unlink') + " all " + (this.filtered().length) + " students shown to your lab session",
          "class": "btn btn-mini icon-link box toggle-control-selected pull-right " + (someNotControlled ? '' : 'active'),
          'data-toggle': 'button'
        });
      };

      Students.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {});
          return div({
            "class": 'collapse in lab-students accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              table({
                "class": 'table table-condensed'
              }, function() {
                return thead(function() {
                  return tr(function() {
                    td(function() {
                      return input({
                        type: 'text',
                        "class": 'search-query span12 student-search',
                        placeholder: 'search / filter'
                      });
                    });
                    return td({
                      "class": 'controls-cont'
                    }, function() {});
                  });
                });
              });
              return div({
                "class": 'lab-student-list-cont'
              }, function() {
                return table({
                  "class": 'table table-condensed table-hover lab-student-list'
                }, function() {
                  return tbody({
                    "class": 'students'
                  });
                });
              });
            });
          });
        });
      };

      Students.prototype.renderHeading = function() {
        this.$('.accordion-heading').html(ck.render(this.headingTemplate, this));
        return this;
      };

      Students.prototype.renderControls = function() {
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this));
        this.$('.controls-cont button').tooltip();
        this.delegateEvents();
        return this;
      };

      Students.prototype.renderStudentsList = function() {
        var stu, studentList, sv, ui, _i, _len, _results;
        ui = this.state.toJSON();
        log('rendering student list');
        this.$('.lab-student-list tbody.students').empty();
        studentList = _.sortBy(this.filtered(), function(s) {
          return "" + (s.get('control') ? '0' : '1') + (s.get('online') ? '0' : '1') + (s.get('name'));
        });
        _results = [];
        for (_i = 0, _len = studentList.length; _i < _len; _i++) {
          stu = studentList[_i];
          sv = new Views.LabStudent({
            model: stu
          });
          _results.push(sv.render().open(this.$('.lab-student-list tbody.students')));
        }
        return _results;
      };

      Students.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, this.options));
        this.renderHeading();
        this.renderControls();
        this.renderStudentsList();
        this.$('input.search-query').typeahead({
          source: this.collection.allTags()
        });
        this.$('input.search-query').on('keyup', function() {
          return _this.doSearch(_this.$('input.search-query').val());
        });
        this.$('[rel=tooltip]').tooltip();
        return this;
      };

      return Students;

    })(Backbone.View);
    Views.Settings = (function(_super) {

      __extends(Settings, _super);

      function Settings() {
        return Settings.__super__.constructor.apply(this, arguments);
      }

      Settings.prototype.tagName = 'div';

      Settings.prototype.className = 'lab-setting-main';

      Settings.prototype.initialize = function(options) {
        this.options = options;
        return console.log(this.model.get('tags'));
      };

      Settings.prototype.events = {
        'change input.title': function(e) {
          return this.model.set('title', $(e.currentTarget).val());
        },
        'click .tags-list': function() {
          var tm,
            _this = this;
          tm = new UI.TagsModal({
            tags: this.model.get('tags'),
            label: "Tags",
            typeahead: app.tagList()
          });
          tm.render();
          return tm.on('change', function(arr, str) {
            _this.model.set({
              tags: str
            });
            return _this.render();
          });
        }
      };

      Settings.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {
            return span({
              "class": 'accordion-toggle icon-wrench',
              'data-toggle': 'collapse',
              'data-target': '.lab-settings'
            }, ' Lab Settings');
          });
          return div({
            "class": 'collapse in lab-settings accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              return form({
                "class": 'form-horizontal'
              }, function() {
                div({
                  "class": 'control-group'
                }, function() {
                  label("Title");
                  return input({
                    "class": 'title span10',
                    placeholder: 'descriptive name',
                    type: 'text',
                    value: "" + (this.model.get('title'))
                  });
                });
                div({
                  "class": 'control-group act-tags-cont'
                }, function() {
                  label("Tags");
                  return span({
                    "class": 'tags-list'
                  }, function() {
                    var tag, _i, _len, _ref1, _ref2;
                    if (this.model.get('tags')) {
                      span({
                        "class": 'pull-left icon-tags'
                      });
                      _ref2 = (_ref1 = this.model.get('tags')) != null ? _ref1.split('|') : void 0;
                      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                        tag = _ref2[_i];
                        span({
                          "class": 'tag'
                        }, " " + tag);
                      }
                      return span(" +tags");
                    }
                  });
                });
                return div({
                  "class": 'btn-toolbar'
                }, function() {
                  div({
                    "class": 'btn-group'
                  }, function() {
                    return button({
                      "class": 'btn btn-mini icon-cogs'
                    }, " Timeline");
                  });
                  return div({
                    "class": 'btn-group'
                  }, function() {
                    return button({
                      "class": 'btn btn-mini icon-save'
                    }, " Save...");
                  });
                });
              });
            });
          });
        });
      };

      Settings.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Settings;

    })(Backbone.View);
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'lab-view container buffer-top';

      Main.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.wbA = new App.Board.Views.Main({
          label: 'Left',
          model: this.model.get('whiteBoardA')
        });
        this.wbB = new App.Board.Views.Main({
          label: 'Right',
          model: this.model.get('whiteBoardB')
        });
        this.recorder = new Views.Recorder({
          model: this.model.get('recorder'),
          collection: this.model.get('recordings'),
          filez: this.model.filez,
          students: this.model.students,
          settings: this.model.get('settings')
        });
        this.mediaA = new Views.MediaPlayer({
          collection: this.model.filez,
          model: this.model.get('mediaA'),
          label: 'A'
        });
        this.timeline = new Views.EventsTimeLine;
        this.settings = new Views.Settings({
          model: this.model.get('settings')
        });
        this.students = new Views.Students({
          collection: this.model.students
        });
        return this.recorder.model.on('change:state', function(model, state) {
          var _ref1, _ref2;
          console.log('recorder change: ', state);
          if (_this.recorder.model.get('pauseMediaOnRecord')) {
            if (state === 'recording' || state === 'waiting-to-record') {
              if ((_ref1 = _this.mediaA.pc) != null) {
                _ref1.pause();
              }
            }
            if (state === 'paused-recording') {
              return (_ref2 = _this.mediaA.pc) != null ? _ref2.play() : void 0;
            }
          }
        });
      };

      Main.prototype.events = {
        'click [data-toggle=collapse]': function(e) {
          return $(e.currentTarget).parent('.accordion-group').toggleClass('open');
        }
      };

      Main.prototype.template = function() {
        return div({
          "class": 'row-fluid'
        }, function() {
          div({
            "class": 'span3'
          }, function() {
            div({
              "class": 'lab-settings-cont'
            }, function() {});
            /*
                      div class:'btn-toolbar', ->
                        div class:'btn-group', ->
                          button class:'btn btn-large icon-wrench'
                          button class:'btn btn-large icon-cogs'
                          button class:'btn btn-large icon-save'
            */

            return div({
              "class": 'lab-students-cont'
            }, function() {});
          });
          div({
            "class": 'span5'
          }, function() {
            div({
              "class": 'lab-media-a-cont'
            }, function() {});
            return div({
              "class": 'lab-whiteboard-a-cont'
            }, function() {});
          });
          return div({
            "class": 'span4 content'
          }, function() {
            div({
              "class": 'lab-recorder-cont'
            }, function() {});
            return div({
              "class": 'lab-whiteboard-b-cont'
            }, function() {});
          });
        });
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.mediaA.render().open(this.$('.lab-media-a-cont'));
        this.wbA.render().open(this.$('.lab-whiteboard-a-cont'));
        this.wbB.render().open(this.$('.lab-whiteboard-b-cont'));
        this.recorder.render().open(this.$('.lab-recorder-cont'));
        this.settings.render().open(this.$('.lab-settings-cont'));
        this.students.render().open(this.$('.lab-students-cont'));
        this.timeline.render().open(this.$('.lab-timeline-cont'));
        this.delegateEvents();
        return this;
      };

      Main.prototype.close = function() {
        this.$el.hide();
        return this;
      };

      Main.prototype.open = function() {
        this.$el.show();
        this.students.render();
        return this;
      };

      return Main;

    })(Backbone.View);
  });

  module('App.Lounge', function(exports, top) {
    var Collection, Model, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      return Collection;

    })(Backbone.Collection);
    _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1];
    exports.Views = Views = {};
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'lounge-main';

      Main.prototype.initialize = function() {};

      Main.prototype.template = function() {
        return div({
          "class": 'container'
        }, function() {
          return ul({
            "class": 'thumbnails'
          }, function() {
            var i, _i, _results;
            _results = [];
            for (i = _i = 1; _i <= 40; i = ++_i) {
              _results.push(li({
                "class": 'span4'
              }, function() {
                return span({
                  "class": 'thumbnail'
                }, function() {
                  img({
                    "class": 'img-circle',
                    src: 'http://placehold.it/100x100'
                  });
                  return div({
                    "class": 'caption'
                  }, function() {
                    h4("Table " + i);
                    return p("Description for the table");
                  });
                });
              }));
            }
            return _results;
          });
          /*
                  span class:'chats span3', ->
                    for i in [1..20]
                      div class:"accordion-group", ->
                        div class:'accordion-heading', ->
                          span class:'accordion-toggle icon-edit', 'data-toggle':'collapse', 'data-target':".lounge-#{ i }", ->
                            text " Table #{ i }"
                            span class:'close pull-right', ->
                        div class:"collapse lounge-#{ i } accordion-body", ->
                          div class:'accordion-inner', ->
                            div class:"lounge-cont-#{ i }", ->
          */

        });
      };

      Main.prototype.render = function() {
        Main.__super__.render.call(this);
        return this;
      };

      return Main;

    })(Backbone.View);
  });

  module('App.Student', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    exports.Views = Views = {};
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'student';

      Model.prototype.idAttribute = '_id';

      Model.prototype.initialize = function() {};

      Model.prototype.getLoginKey = function(cb) {
        return this.sync('getLoginKey', this.toJSON(), {
          error: cb,
          success: cb
        });
      };

      Model.prototype.recordings = function() {
        return top.app.data.filez.recUploadsForStudent(this.id);
      };

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "student" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('name')) + " (" + (this.get('email')) + ")";
      };

      Model.prototype.thumbnail = function() {
        var _ref;
        return (_ref = this.get('thumnail')) != null ? _ref : '/img/backpack.svg';
      };

      Model.prototype.isSelected = function() {
        return this.get('selected');
      };

      Model.prototype.toggleSelect = function() {
        return this.set('selected', !this.get('selected'));
      };

      Model.prototype.randomPassword = function() {};

      Model.prototype.passwordMask = function() {
        var pw;
        pw = this.get('password');
        return pw.replace(/./g, '*');
      };

      Model.prototype.match = function(query) {
        var re;
        re = new RegExp(query, 'i');
        return (re.test(this.get('name'))) || (re.test(this.get('email'))) || (re.test(this.get('tags')));
      };

      Model.prototype.changePennies = function(byAmount, cb) {
        var _this = this;
        return this.sync('changePennies', this.toJSON(), {
          byAmount: byAmount,
          error: function(m, err) {
            return console.log(err);
          },
          success: function(m, resp) {
            console.log('success', m, resp);
            return _this.set('piggyBank', m.piggyBank);
          }
        });
      };

      Model.prototype.toggleControl = function() {
        var _this = this;
        return this.sync('changeControl', null, {
          ids: [this.id],
          control: !this.get('control'),
          success: function() {}
        });
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'student';

      Collection.prototype._selected = [];

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        console.log('fromDB: ', data);
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'online':
            return this.get(model._id).set('online', model.online);
          case 'control':
            return this.get(model._id).set('control', model.control);
          case 'help':
            return this.get(model._id).set('help', model.help);
        }
      };

      Collection.prototype.comparator = function(s) {
        return "" + (s.get('online') ? 0 : 1) + (s.get('control') ? 0 : 1) + (s.get('name'));
      };

      Collection.prototype.allTags = function() {
        return _.union(_.flatten(this.map(function(m) {
          var _ref, _ref1;
          return (_ref = (_ref1 = m.get('tags')) != null ? _ref1.split('|') : void 0) != null ? _ref : [];
        })));
      };

      Collection.prototype.modelType = function() {
        return "students";
      };

      Collection.prototype.studentsNeedingHelp = function() {
        return (this.filter(function(s) {
          return s.get('help');
        })).length;
      };

      Collection.prototype.initialize = function() {
        var _this = this;
        return this.on('reset', function() {
          var id, _i, _len, _ref, _results;
          if (_this._selected) {
            _ref = _this._selected;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              _results.push(_this.get(id).toggleSelect());
            }
            return _results;
          }
        });
      };

      Collection.prototype.selected = function(ui) {
        if (ui == null) {
          ui = {};
        }
        return this.filter(function(s) {
          var _ref, _ref1;
          return _ref = s.id, __indexOf.call((_ref1 = ui != null ? ui.selected : void 0) != null ? _ref1 : [], _ref) >= 0;
        });
      };

      Collection.prototype.selectionState = function(ui) {
        var selState;
        if (this.selectedFiltered(ui).length === this.filtered(ui).length) {
          selState = 'all';
        } else if (this.selectedFiltered(ui).length === 0) {
          selState = 'none';
        } else {
          selState = 'some';
        }
        return selState;
      };

      Collection.prototype.filtered = function(ui) {
        var term,
          _this = this;
        if (ui == null) {
          ui = {};
        }
        term = ui.term;
        return this.filter(function(m) {
          return m.match(term);
        });
      };

      Collection.prototype.selectedFiltered = function(ui) {
        return _.filter(this.filtered(ui), function(m) {
          var _ref;
          return _ref = m.id, __indexOf.call(ui.selected, _ref) >= 0;
        });
      };

      Collection.prototype.selectFiltered = function(setTo, ui) {
        var student, _i, _len, _ref, _results;
        if (setTo == null) {
          setTo = true;
        }
        _ref = this.filtered(ui);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          student = _ref[_i];
          _results.push(student.set('selected', setTo));
        }
        return _results;
      };

      Collection.prototype.controlled = function() {
        var _this = this;
        return this.filter(function(m) {
          return m.get('control');
        });
      };

      Collection.prototype.notControlled = function() {
        var _this = this;
        return this.filter(function(m) {
          return !m.get('control');
        });
      };

      Collection.prototype.onlineControlled = function() {
        var _this = this;
        return this.filter(function(m) {
          return m.get('control') && m.get('online');
        });
      };

      Collection.prototype.selectedControlled = function(ui) {
        return _.filter(this.selected(ui), function(m) {
          return m.get('control') === true;
        });
      };

      Collection.prototype.toggleControl = function(ui) {
        var _this = this;
        return this.sync('changeControl', null, {
          ids: ui.selected,
          control: this.selectedControlled(ui).length !== this.selected(ui).length,
          success: function() {}
        });
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      return UIState;

    })(Backbone.Model);
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'student-main container';

      Main.prototype.initialize = function() {
        var _this = this;
        Main.__super__.initialize.call(this);
        this.searchBox = new top.App.Teacher.Views.SearchBox({
          collection: this.collection
        });
        this.collection.on('saved', function() {
          var fm;
          fm = new UI.FlashMessage({
            message: 'changes saved',
            type: 'success',
            time: 1000,
            cont: _this.$('.message-cont')
          });
          return fm.render();
        });
        this.state.on('change:adding', function(m, v) {
          return _this.quickAdd();
        });
        this.searchBox.on('change', function(v) {
          return _this.state.set('term', v);
        });
        return this.newItem = new Views.NewListItem({
          collection: this.collection
        });
      };

      Main.prototype.events = {
        'click .add-students': function() {
          return this.state.set('adding', !this.state.get('adding'));
        },
        'click .delete-students': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            collection: this.collection.getByIds(this.state.get('selected')),
            modelType: this.collection.modelType(true)
          });
          return dc.render().open();
        },
        'click .email-students': function() {
          var es;
          es = new Views.EmailStudents({
            collection: this.collection,
            state: this.state
          });
          return es.render().open();
        },
        'click .passwords': function() {
          var pw, pws;
          if (this.state.get('selected').length === 1) {
            pw = new Views.ManagePassword({
              model: this.collection.get(this.state.get('selected')[0])
            });
            return pw.render();
          } else {
            pws = new Views.Passwords({
              collection: this.collection,
              state: this.state
            });
            return pws.render();
          }
        },
        'click .toggle-select-all': 'toggleSelectFiltered',
        'click .control-students': function() {
          return this.collection.toggleControl(this.state.toJSON());
        }
      };

      Main.prototype.selectIcons = {
        'all': 'check',
        'none': 'check-empty',
        'some': 'reorder'
      };

      Main.prototype.selectStrings = {
        'all': 'Unselect all',
        'none': 'Select all',
        'some': 'Unselect all'
      };

      Main.prototype.search = function(e) {
        var _this = this;
        clearTimeout(this.searchWait);
        return this.searchWait = wait(200, function() {
          return _this.state.set('searchTerm', $(e.target).val());
        });
      };

      Main.prototype.quickAdd = function() {
        if (this.state.get('adding')) {
          this.newItem.render().open(this.$('.new-item-cont'));
          this.newItem.focus();
          return this.newItem.delegateEvents();
        } else {
          return this.newItem.remove();
        }
      };

      Main.prototype.controlsTemplate = function() {
        return div({
          "class": 'btn-toolbar span12'
        }, function() {
          div({
            "class": 'btn-group pull-left message-cont'
          }, function() {
            var selState;
            return button({
              "class": "btn btn-mini pull-left icon-" + this.selectIcons[selState = this.collection.selectionState(this.state.toJSON())] + " toggle-select-all"
            }, " " + this.selectStrings[selState]);
          });
          button({
            "class": 'btn btn-mini stats'
          }, "" + (this.collection.filtered(this.state.toJSON()).length) + " students shown, " + (this.state.get('selected').length) + " selected");
          div({
            "class": 'btn-group pull-right'
          }, function() {
            return button({
              "class": "btn btn-mini btn-success icon-plus add-students " + (this.state.get('adding') ? 'active' : ''),
              'data-toggle': 'button'
            }, ' Quick add');
          });
          if (this.state.get('selected').length) {
            div({
              "class": 'btn-group pull-right'
            }, function() {
              button({
                "class": 'btn btn-mini btn-info icon-envelope email-students'
              }, ' Email');
              button({
                "class": 'btn btn-mini btn-warning icon-key passwords'
              }, ' Passwords');
              return button({
                "class": "btn btn-mini control-students icon-link " + (this.collection.selectedControlled(this.state.toJSON()).length === this.collection.selected(this.state.toJSON()).length ? 'active' : ''),
                'data-toggle': 'button'
              }, ' Control lab');
            });
            return div({
              "class": 'btn-group pull-right'
            }, function() {
              return button({
                "class": 'btn btn-mini btn-danger icon-trash delete-students'
              }, ' Delete');
            });
          }
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'controls-cont row'
        }, function() {});
        return table({
          "class": 'list-main-cont table table-condensed table-hover'
        }, function() {
          thead({
            "class": 'new-item-cont'
          });
          tbody({
            "class": 'list-cont'
          }, function() {});
          return tfoot(function() {
            return tr(function() {
              return td({
                colspan: 10,
                "class": 'show-more-cont'
              }, function() {});
            });
          });
        });
      };

      Main.prototype.addItem = function(stu, prepend) {
        var v;
        if (prepend == null) {
          prepend = false;
        }
        v = new Views.ListItem({
          model: stu,
          collection: this.collection,
          state: this.state
        });
        v.render();
        if (prepend) {
          return v.$el.prependTo(this.$('.list-cont'));
        } else {
          return v.$el.appendTo(this.$('.list-cont'));
        }
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.$('.message').alert('close');
        this.renderList();
        this.renderControls();
        this.searchBox.render();
        this.delegateEvents();
        return this;
      };

      return Main;

    })(UI.List);
    Views.NewListItem = (function(_super) {

      __extends(NewListItem, _super);

      function NewListItem() {
        this.clearErrors = __bind(this.clearErrors, this);

        this.showErrors = __bind(this.showErrors, this);
        return NewListItem.__super__.constructor.apply(this, arguments);
      }

      NewListItem.prototype.tagName = 'tr';

      NewListItem.prototype.className = 'list-item';

      NewListItem.prototype.initialize = function() {};

      NewListItem.prototype.events = {
        'click .add-item': 'addItem',
        'keydown input.email': function(e) {
          var _ref;
          console.log(e.which + ' pressed');
          if (((_ref = e.which) === 9 || _ref === 13) && !e.shiftKey) {
            console.log('calling additem');
            return this.addItem();
          }
        }
      };

      NewListItem.prototype.showErrors = function(model, errObj) {
        var err, fieldEl, fieldName, _ref, _results;
        _ref = errObj.errors;
        _results = [];
        for (fieldName in _ref) {
          err = _ref[fieldName];
          fieldEl = this.$("input." + fieldName);
          fieldEl.addClass('err');
          this.$(".control-group." + fieldName + " .help-block").text("" + err.type);
          _results.push(fieldEl.focus());
        }
        return _results;
      };

      NewListItem.prototype.clearErrors = function(x, y) {
        this.$('.control-group .help-block').text('');
        this.collection.trigger('saved');
        return this.clear().focus();
      };

      NewListItem.prototype.focus = function() {
        return this.$('input:first').focus();
      };

      NewListItem.prototype.addItem = function() {
        return this.collection.create({
          name: this.$('input.name').val(),
          email: this.$('input.email').val()
        }, {
          wait: true,
          error: this.showErrors,
          success: this.clearErrors
        });
      };

      NewListItem.prototype.clear = function() {
        this.$('input.name').val('');
        this.$('input.email').val('');
        return this;
      };

      NewListItem.prototype.template = function() {
        td(function() {
          return i({
            "class": 'icon-caret-right'
          });
        });
        td(function() {});
        td(function() {});
        td(function() {
          return div({
            "class": 'control-group name'
          }, function() {
            input({
              type: 'text span3',
              placeholder: 'name',
              "class": 'name'
            });
            return span({
              "class": 'help-block'
            });
          });
        });
        td(function() {
          return div({
            "class": 'control-group email'
          }, function() {
            input({
              type: 'text span3',
              placeholder: 'email',
              "class": 'email'
            });
            return span({
              "class": 'help-block'
            });
          });
        });
        td(function() {});
        return td(function() {
          return i({
            "class": 'icon-plus add-item'
          });
        });
      };

      NewListItem.prototype.render = function() {
        NewListItem.__super__.render.call(this);
        console.log('render called');
        return this;
      };

      return NewListItem;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        this.clearErrors = __bind(this.clearErrors, this);

        this.showErrors = __bind(this.showErrors, this);
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'student-item list-item';

      ListItem.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.options.state.on('change:selected', function() {
          return _this.updateSelectStatus();
        });
        /*
              @model.on 'change:piggyBank', =>
                @renderStatus()
        */

        this.model.on('change:online', function() {
          log("" + (_this.model.get('name')) + " now " + (_this.model.get('online')));
          return _this.renderStatus();
        });
        this.model.on('remove', this.remove, this);
        this.model.on('change:help', function(student, help) {
          _this.$el.toggleClass('help', help);
          _this.renderStatus();
          _this.model.collection.trigger('help');
          if (help) {
            return _this.sfx('sos');
          }
        });
        return this.model.on('change:control', function(s, control) {
          return _this.$('.toggle-control').toggleClass('active', control);
        });
      };

      ListItem.prototype.events = {
        'click .select-item': 'toggleSelect',
        'click .delete-item': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            collection: [this.model],
            modelType: this.model.modelType()
          });
          return dc.render().open();
        },
        'dblclick .thumbnail-cont': function() {
          return app.router.navigate("student/" + this.model.id, true);
        },
        'click .manage-password': function() {
          var managePassword;
          managePassword = new Views.ManagePassword({
            model: this.model
          });
          return managePassword.render().open();
        },
        'change .name': function() {
          return this.model.save({
            name: this.$('input.name').val()
          }, {
            error: this.showErrors,
            success: this.clearErrors
          });
        },
        'change .email': function() {
          return this.model.save({
            email: this.$('input.email').val()
          }, {
            error: this.showErrors,
            success: this.clearErrors
          });
        },
        'click .inc-piggyBank': function() {
          console.log('inc', this.model);
          return this.model.changePennies(5);
        },
        'click .dec-piggyBank': function() {
          return this.model.changePennies(-5);
        },
        'click .signin-as': function() {
          return this.model.getLoginKey(function(err, key) {
            return alert(err, key);
          });
        },
        'click .send-email': function() {
          var es;
          es = new Views.EmailStudents({
            collection: [this.model]
          });
          return es.render().open();
        },
        'click .toggle-control': function() {
          return this.model.toggleControl();
        },
        'click .tags-list': function() {
          var tm, _ref, _ref1,
            _this = this;
          tm = new UI.TagsModal({
            tags: this.model.get('tags'),
            label: this.model.get('name'),
            typeahead: _.difference(top.app.tagList(), (_ref = (_ref1 = this.model.get('tags')) != null ? _ref1.split('|') : void 0) != null ? _ref : [])
          });
          tm.render();
          return tm.on('change', function(arr, str) {
            _this.model.save('tags', str);
            return _this.render();
          });
        }
      };

      ListItem.prototype.updateSelectStatus = function() {
        this.$('.select-item').toggleClass('icon-check', this.isSelected()).toggleClass('icon-check-empty', !this.isSelected());
        return this.$el.toggleClass('info', this.isSelected());
      };

      ListItem.prototype.showErrors = function(model, errObj) {
        var err, fieldEl, fieldName, _ref, _results;
        console.log(model, errObj);
        _ref = errObj.errors;
        _results = [];
        for (fieldName in _ref) {
          err = _ref[fieldName];
          fieldEl = this.$("input." + fieldName);
          fieldEl.addClass('err');
          this.$(".control-group." + fieldName + " .help-block").text("" + err.type);
          _results.push(fieldEl.focus());
        }
        return _results;
      };

      ListItem.prototype.clearErrors = function(x, y) {
        this.$('.control-group .help-block').text('');
        return this.model.collection.trigger('saved');
      };

      ListItem.prototype.toggleSelect = function() {
        if (this.isSelected()) {
          this.options.state.set('selected', _.without(this.options.state.get('selected'), this.model.id));
        } else {
          this.options.state.get('selected').push(this.model.id);
        }
        return this.options.state.trigger("change:selected");
      };

      ListItem.prototype.isSelected = function() {
        var _ref;
        return _ref = this.model.id, __indexOf.call(this.options.state.get('selected'), _ref) >= 0;
      };

      ListItem.prototype.heartBeat = function() {
        var _this = this;
        this.$('.icon-heart').addClass('beat');
        return wait(500, function() {
          return _this.$('.icon-heart').removeClass('beat');
        });
      };

      ListItem.prototype.renderStatus = function() {
        this.$el.toggleClass('help', this.model.get('help'));
        this.$el.toggleClass('online', this.model.get('online'));
        this.$('.status-cont').html(ck.render(this.statusTemplate, this.model));
        return this;
      };

      ListItem.prototype.statusTemplate = function() {
        i({
          "class": "online-status icon-certificate " + (this.get('online') ? 'online' : '')
        });
        if (this.get('help')) {
          return div({
            "class": 'btn-toolbar'
          }, function() {
            return div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-mini icon-bullhorn'
              });
            });
          });
        }
      };

      ListItem.prototype.template = function() {
        td(function() {
          return i({
            "class": "" + (this.isSelected() ? 'icon-check' : 'icon-check-empty') + " select-item"
          });
        });
        td({
          "class": 'thumbnail-cont'
        }, function() {
          return img({
            src: "" + (this.thumbnail())
          });
        });
        td({
          "class": 'status-cont'
        }, function() {});
        td(function() {
          div({
            "class": 'control-group name'
          }, function() {
            input({
              type: 'text span3',
              value: "" + (this.get('name')),
              placeholder: 'name',
              "class": 'name'
            });
            return span({
              "class": 'help-block name'
            });
          });
          return span({
            "class": 'tags-list span3'
          }, function() {
            var tag, _i, _len, _ref, _ref1, _results;
            if (this.get('tags')) {
              span({
                "class": 'icon-tags pull-left'
              });
              _ref1 = (_ref = this.get('tags')) != null ? _ref.split('|') : void 0;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                tag = _ref1[_i];
                _results.push(span({
                  "class": 'tag'
                }, " " + tag));
              }
              return _results;
            } else {
              return span({
                "class": 'icon-tags'
              }, " +tags");
            }
          });
        });
        td(function() {
          return div({
            "class": 'control-group email'
          }, function() {
            input({
              type: 'text span3',
              value: "" + (this.get('email')),
              placeholder: 'email',
              "class": 'email'
            });
            return span({
              "class": 'help-block email'
            });
          });
        });
        td(function() {
          return div({
            "class": 'btn-group hid'
          }, function() {
            button({
              "class": 'btn btn-mini delete-item icon-trash'
            });
            button({
              "class": 'btn btn-mini manage-password icon-key'
            });
            button({
              "class": 'btn btn-mini signin-as icon-signin'
            });
            return button({
              "class": 'btn btn-mini send-email icon-envelope'
            });
          });
        });
        return td(function() {
          return button({
            "class": "btn btn-mini icon-link toggle-control " + (this.get('control') ? 'active' : ''),
            'data-toggle': 'button'
          });
        });
      };

      ListItem.prototype.render = function() {
        ListItem.__super__.render.call(this);
        this.$('input').tooltip();
        this.renderStatus();
        this.updateSelectStatus();
        return this;
      };

      return ListItem;

    })(Backbone.View);
    Views.ManagePassword = (function(_super) {

      __extends(ManagePassword, _super);

      function ManagePassword() {
        return ManagePassword.__super__.constructor.apply(this, arguments);
      }

      ManagePassword.prototype.tagName = 'div';

      ManagePassword.prototype.className = 'modal manage-password-view hide fade';

      ManagePassword.prototype.initialize = function() {
        this.$el.modal();
        return this.model.on('change:password', this.render, this);
      };

      ManagePassword.prototype.events = {
        'click .generate-pw': function() {
          return this.model.save({
            password: '*'
          }, {
            regenerate: true
          });
        },
        'click .send-pw': 'sendPw'
      };

      ManagePassword.prototype.sendPw = function() {
        var html,
          _this = this;
        this.$('.send-pw').button('loading');
        html = "<p>Hello, {name}!\n</p>\n<p>\nHere is your password: {password}\n<br/>\nClick <a href='http://lingualab.io' >here to sign in</a>.\n</p>\n<b>Bye!</b>";
        return this.model.collection.sync('email', null, {
          ids: [this.model.id],
          subject: 'Your password',
          html: html,
          error: function(m, e) {
            return console.log('error', m, e);
          },
          success: function(m, e) {
            return _this.success();
          }
        });
      };

      ManagePassword.prototype.success = function() {
        var al;
        this.$('.send-pw').button('reset');
        al = new UI.Alert({
          type: 'success',
          message: 'Sent!',
          close: true
        });
        return al.render().open(this.$('.msg'));
      };

      ManagePassword.prototype.template = function() {
        div({
          "class": 'modal-body'
        }, function() {
          span({
            "class": 'icon-key pw'
          }, " " + (this.get('password')));
          return span("  is " + (this.get('name')) + "'s password.");
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          div({
            "class": 'msg'
          });
          return div({
            "class": 'btn-toolbar'
          }, function() {
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-info icon-envelope send-pw'
              }, " Email password to " + (this.get('name')));
            });
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-warning icon-refresh generate-pw'
              }, " Generate a new one");
            });
            return div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn',
                'data-dismiss': 'modal'
              }, "Close");
            });
          });
        });
      };

      ManagePassword.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return ManagePassword;

    })(Backbone.View);
    Views.Passwords = (function(_super) {

      __extends(Passwords, _super);

      function Passwords() {
        return Passwords.__super__.constructor.apply(this, arguments);
      }

      Passwords.prototype.tagName = 'div';

      Passwords.prototype.className = 'modal fade hide';

      Passwords.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.state = this.options.state;
        return this.collection.on('reset', function() {
          return _this.renderList();
        });
      };

      Passwords.prototype.events = {
        'click .generate-pws': 'generatePws',
        'click .email-pws': 'emailPws'
      };

      Passwords.prototype.generatePws = function() {
        var _this = this;
        return this.collection.sync('changePasswords', null, {
          ids: this.state.get('selected'),
          error: function(m, e) {
            return console.log('error', m, e);
          },
          success: function(m, e) {
            return _this.collection.fetch();
          }
        });
      };

      Passwords.prototype.emailPws = function() {
        var html,
          _this = this;
        this.$('.email-pws').button('loading');
        html = "<p>Hello, {name}!\n</p>\n<p>\nHere is your password: {password}\n<br/>\nClick <a href='http://lingualab.io' >here to sign in</a>.\n</p>\n<b>Bye!</b>";
        return this.collection.sync('email', null, {
          ids: this.state.get('selected'),
          subject: 'Your password',
          html: html,
          error: function(m, e) {
            return console.log('error', m, e);
          },
          success: function(m, e) {
            return _this.success();
          }
        });
      };

      Passwords.prototype.success = function() {
        var al;
        this.$('.email-pws').button('reset');
        al = new UI.Alert({
          type: 'success',
          message: 'Sent!',
          close: true
        });
        return al.render().open(this.$('.msg'));
      };

      Passwords.prototype.listTemplate = function() {
        var stu, _i, _len, _ref, _results;
        _ref = this.students;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stu = _ref[_i];
          _results.push(tr(function() {
            td("" + (stu.get('name')) + " (" + (stu.get('email')) + ")");
            return td({
              "class": 'pw icon-key'
            }, " " + (stu.get('password')));
          }));
        }
        return _results;
      };

      Passwords.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3('Manage passwords');
        });
        div({
          "class": 'modal-body'
        }, function() {
          return table({
            "class": 'table'
          }, function() {});
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          div({
            "class": 'msg'
          });
          return div({
            "class": 'btn-toolbar'
          }, function() {
            button({
              "class": 'btn btn-info icon-envelope email-pws',
              'data-loading-text': ' Sending...'
            }, ' Email passwords');
            button({
              "class": 'btn btn-warning icon-key generate-pws'
            }, ' Generate new passwords');
            return button({
              "class": 'btn',
              'data-dismiss': 'modal'
            }, ' Close');
          });
        });
      };

      Passwords.prototype.renderList = function() {
        this.$('table').html(ck.render(this.listTemplate, {
          students: this.collection.getByIds(this.state.get('selected'))
        }));
        return this;
      };

      Passwords.prototype.render = function() {
        Passwords.__super__.render.call(this);
        this.renderList();
        this.$el.modal('show');
        return this;
      };

      return Passwords;

    })(Backbone.View);
    Views.EmailStudents = (function(_super) {

      __extends(EmailStudents, _super);

      function EmailStudents() {
        return EmailStudents.__super__.constructor.apply(this, arguments);
      }

      EmailStudents.prototype.tagName = 'div';

      EmailStudents.prototype.className = 'modal hide fade emailer-view';

      EmailStudents.prototype.templates = {
        'password': "<p>Hello, <span class=\"template-field\" data-fld=\"name\">name</span>!\n</p>\n<p>\nHere is your password: <span class=\"template-field\" data-fld=\"password\">password</span>\n<br/>\nClick <a href='http://lingualab.io' >here to sign in</a>.\n</p>\n<b>Bye!</b>",
        'praise': "<p>Hello, <span class=\"template-field\" data-fld=\"name\">name</span>!</p>\n<p>\nYou've been working hard outside of class. I just wanted to let you know that I\nsee how much you've been practicing this week. Great job! Keep it up, I promise it'll pay off for you!\n</p>"
      };

      EmailStudents.prototype.initialize = function(options) {
        this.options = options;
        return this.state = this.options.state;
      };

      EmailStudents.prototype.document = document;

      EmailStudents.prototype.events = {
        'click .bold': 'bold',
        'click .italic': 'italic',
        'click .underline': 'underline',
        'click .link': 'link',
        'click .size': 'size',
        'click ul.insert-data a': 'insertFld',
        'click .send-emails': 'sendEmails',
        'click .load-template': 'loadTemplate'
      };

      EmailStudents.prototype.sendEmails = function() {
        var col, ids, _ref,
          _this = this;
        this.$('button.send-emails').button('loading');
        col = (_ref = this.collection) != null ? _ref : this.model.collection;
        ids = this.collection ? this.state.get('selected') : [this.model.id];
        return col.sync('email', null, {
          ids: ids,
          replyTo: "" + (top.app.data.teacher.get('email')),
          subject: "" + (this.$('.subject').val()),
          html: this.simplifiedHTML(),
          error: function(m, e) {
            return _this.$('button.send-emails').button('error');
          },
          success: function(m, e) {
            var suc;
            suc = new UI.FlashMessage({
              message: 'Sent!',
              cont: _this.$('.modal-footer')
            });
            suc.render();
            return _this.$('button.send-emails').button('reset');
          }
        });
      };

      EmailStudents.prototype.simplifiedHTML = function() {
        var body;
        body = this.$('.editor-area').html();
        body = body.replace(/<span class=.template-field. data-fld=.([^"]+).>[^<]*<\/span>/g, "{$1}");
        console.log(body);
        return body;
      };

      EmailStudents.prototype.getSelectedText = function() {
        var _ref;
        if ((_ref = this.document) != null ? _ref.selection : void 0) {
          return document.selection.createRange().text;
        } else if (this.document) {
          return document.getSelection().toString();
        }
      };

      EmailStudents.prototype.selectTest = function() {
        if (this.getSelectedText().length === 0) {
          alert('Select some text first.');
          return false;
        }
        return true;
      };

      EmailStudents.prototype.exec = function(type, arg) {
        if (arg == null) {
          arg = null;
        }
        return this.document.execCommand(type, false, arg);
      };

      EmailStudents.prototype.query = function(type) {
        return this.document.queryCommandValue(type);
      };

      EmailStudents.prototype.bold = function(e) {
        e.preventDefault();
        return this.exec('bold');
      };

      EmailStudents.prototype.italic = function(e) {
        e.preventDefault();
        return this.exec('italic');
      };

      EmailStudents.prototype.underline = function(e) {
        e.preventDefault();
        return this.exec('underline');
      };

      EmailStudents.prototype.list = function(e) {
        e.preventDefault();
        return this.exec('insertUnorderedList');
      };

      EmailStudents.prototype.link = function(e) {
        var href;
        e.preventDefault();
        this.exec('unlink');
        href = prompt('Enter a link:', 'http://');
        if (!href || href === 'http://') {
          return;
        }
        if (!/:\/\//.test(href)) {
          href = 'http://' + href;
        }
        return this.exec('createLink', href);
      };

      EmailStudents.prototype.insertFld = function(e) {
        var fld, label;
        console.log(e.currentTarget);
        e.preventDefault();
        fld = $(e.currentTarget).attr('data-fld');
        label = $(e.currentTarget).attr('data-label');
        return this.exec('insertHTML', "&nbsp;<span class='template-field' data-fld='" + fld + "' contenteditable=false>" + label + "</span>&nbsp;");
      };

      EmailStudents.prototype.size = function(e) {
        e.preventDefault();
        return this.exec('fontSize', $(e.target).attr('data-size'));
      };

      EmailStudents.prototype.loadTemplate = function(e) {
        e.preventDefault();
        return this.$('.editor-area').html(this.templates[$(e.currentTarget).attr('data-template')]);
      };

      EmailStudents.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return div({
            "class": 'btn-toolbar'
          }, function() {
            div({
              "class": 'btn-group'
            }, function() {
              button({
                "class": 'btn btn-mini icon-bold bold'
              });
              button({
                "class": 'btn btn-mini icon-italic italic'
              });
              button({
                "class": 'btn btn-mini icon-underline underline'
              });
              button({
                "class": 'btn btn-mini icon-link link'
              });
              a({
                "class": "btn btn-mini dropdown-toggle icon-text-height",
                'data-toggle': "dropdown",
                href: "#"
              }, function() {
                return span({
                  "class": 'caret'
                });
              });
              return ul({
                "class": 'dropdown-menu'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'size',
                    'data-size': 2
                  }, 'small');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'size',
                    'data-size': 4
                  }, 'medium');
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'size',
                    'data-size': 5
                  }, 'large');
                });
              });
            });
            div({
              "class": 'btn-group'
            }, function() {
              a({
                "class": 'btn dropdown-toggle icon-user',
                'data-toggle': 'dropdown',
                href: '#'
              }, function() {
                span(" Student info ");
                return span({
                  "class": 'caret'
                });
              });
              return ul({
                "class": 'dropdown-menu insert-data'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-name',
                    'data-label': 'name',
                    'data-fld': 'name'
                  }, function() {
                    i({
                      "class": 'icon-credit-card'
                    });
                    return span(' Name');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-email',
                    'data-label': 'email address',
                    'data-fld': 'email'
                  }, function() {
                    return span('@ Email Address');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-password',
                    'data-label': 'password',
                    'data-fld': 'password'
                  }, function() {
                    i({
                      "class": 'icon-key'
                    });
                    return span(' Password');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-signin',
                    'data-label': 'instant sign-in link (good for 10m)',
                    'data-fld': 'signin-link'
                  }, function() {
                    i({
                      "class": 'icon-signin'
                    });
                    return span(' Instant sign in link');
                  });
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-time',
                    'data-label': 'practice time this week',
                    'data-fld': 'time-week'
                  }, function() {
                    i({
                      "class": 'icon-time'
                    });
                    return span(' Time spent practicing this week');
                  });
                });
              });
            });
            return div({
              "class": 'btn-group'
            }, function() {
              a({
                "class": 'btn dropdown-toggle',
                'data-toggle': 'dropdown',
                href: '#'
              }, function() {
                i({
                  "class": 'icon-file'
                });
                span(' Templates ');
                return span({
                  "class": 'caret'
                });
              });
              return ul({
                "class": 'dropdown-menu'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'load-template',
                    'data-template': 'password'
                  }, function() {
                    i({
                      "class": 'icon-key'
                    });
                    return span(' Send passwords');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'load-template',
                    'data-template': 'praise'
                  }, function() {
                    i({
                      "class": 'icon-thumbs-up'
                    });
                    return span(' Praise');
                  });
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'load-template',
                    'data-template': 'reminder'
                  }, function() {
                    i({
                      "class": 'icon-pushpin'
                    });
                    return span(' Reminder');
                  });
                });
              });
            });
          });
        });
        div({
          "class": 'modal-body'
        }, function() {
          input({
            type: 'text',
            placeholder: 'Subject',
            "class": 'span6 subject'
          });
          return div({
            "class": 'editor-area'
          }, function() {});
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn pull-right',
            'data-dismiss': 'modal'
          }, "Close");
          return button({
            'data-loading-text': 'Sending...',
            'data-complete-text': 'Successfully sent!',
            rel: "" + (this.students.length > 1 ? 'tooltip' : ''),
            title: "" + (_.map(this.students, function(s) {
              return s.get('name');
            }).join(', ')),
            "class": 'btn btn-info icon-envelope send-emails pull-left'
          }, " Send it to " + (this.students.length > 1 ? this.students.length + ' students' : this.students[0].get('name')));
        });
      };

      EmailStudents.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, {
          students: this.collection.getByIds(this.state.get('selected'))
        }));
        this.$el.modal('show');
        this.$el.on('shown', function() {
          _this.trigger('ready');
          _this.$('.editor-area').attr('contenteditable', true);
          _this.$('.editor-area').focus();
          return _this.$('button').tooltip();
        });
        return this;
      };

      return EmailStudents;

    })(Backbone.View);
    Views.Recording = (function(_super) {

      __extends(Recording, _super);

      function Recording() {
        return Recording.__super__.constructor.apply(this, arguments);
      }

      Recording.prototype.tagName = 'tbody';

      Recording.prototype.className = 'recording';

      Recording.prototype.initialize = function(options) {
        this.options = options;
      };

      Recording.prototype.events = {
        'click': function() {
          return this.trigger('select', this.model);
        },
        'click .play': function(e) {
          return this.trigger('play', this.model);
        }
      };

      Recording.prototype.template = function() {
        return tr({
          "class": "" + (this.selected ? 'success' : '')
        }, function() {
          td(function() {
            var _ref;
            return img({
              "class": 'thumb',
              src: "" + ((_ref = this.model.get('thumbUrl')) != null ? _ref : '/img/cassette.svg')
            });
          });
          td("" + (this.model.get('title')) + " (" + (moment(this.model.get('duration')).format("m:ss")) + ")");
          return td("" + (moment(this.model.get('created')).calendar()));
        });
      };

      Recording.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Recording;

    })(Backbone.View);
    Views.Recordings = (function(_super) {

      __extends(Recordings, _super);

      function Recordings() {
        return Recordings.__super__.constructor.apply(this, arguments);
      }

      Recordings.prototype.tagName = 'table';

      Recordings.prototype.className = 'table table-hover table-condensed recordings';

      Recordings.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        return this.options.state.on('change:file', function() {
          return _this.render();
        });
      };

      Recordings.prototype.template = function() {};

      Recordings.prototype.render = function() {
        var rec, recv, _i, _len, _ref, _ref1,
          _this = this;
        this.$el.empty();
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rec = _ref[_i];
          recv = new Views.Recording({
            model: rec,
            selected: rec.id === ((_ref1 = this.options.state.get('file')) != null ? _ref1.id : void 0)
          });
          recv.render().open(this.$el);
          recv.on('select', function(file) {
            return _this.options.state.set('file', file);
          });
          recv.on('play', function(file) {
            _this.options.state.set('file', file);
            return _this;
          });
        }
        return this;
      };

      return Recordings;

    })(Backbone.View);
    Views.RecordingPlayer = (function(_super) {

      __extends(RecordingPlayer, _super);

      function RecordingPlayer() {
        return RecordingPlayer.__super__.constructor.apply(this, arguments);
      }

      RecordingPlayer.prototype.tagName = 'div';

      RecordingPlayer.prototype.className = 'media-player';

      RecordingPlayer.prototype.playbackRates = [0.5, 0.75, 1, 1.25, 1.5, 2];

      RecordingPlayer.prototype.rateLabel = function(val) {
        switch (val) {
          case 0.5:
            return '&frac12;x';
          case 0.75:
            return '&frac34;x';
          case 1:
            return '1x';
          case 1.25:
            return '1&frac14;x';
          case 1.5:
            return '1&frac12;x';
          case 2:
            return '2x';
        }
      };

      RecordingPlayer.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.state = this.options.state;
        this.feedbackState = new UIState;
        this.feedback = new Views.Feedback({
          state: this.feedbackState,
          player: this
        });
        console.log('options:', this.options);
        this.on('open', function() {
          return _this.setPcEvents();
        });
        this.state.on('change:fileid', function(m, f) {
          log('change file', m, f);
          _this.render();
          return _this.setPcEvents();
        });
        return this.state.on('change:file', function(state, file) {
          return file.on('change:feedback', function(m, fb) {
            return _this.setUpFeedbackCues();
          });
        });
      };

      RecordingPlayer.prototype.events = {
        'click .play': function() {
          return this.pc.play();
        },
        'click .pause': function() {
          return this.pc.pause();
        },
        'click .back-10': function() {
          return this.pc.currentTime(this.pc.currentTime() - 10);
        },
        'click .back-5': function() {
          return this.pc.currentTime(this.pc.currentTime() - 5);
        },
        'click .speed-inc': function() {
          return this.changeSpeed(1);
        },
        'click .speed-dec': function() {
          return this.changeSpeed(-1);
        },
        'dblclick .speed': 'resetSpeed',
        'click .recording-part': function(e) {
          $(e.currentTarget).tooltip('hide');
          return this.jumpToRecordingPart($(e.currentTarget).attr('data-part'));
        }
      };

      RecordingPlayer.prototype.template = function() {
        var file;
        file = this.state.get('file');
        log('file: ', file);
        div({
          "class": 'controls-cont'
        }, function() {});
        div({
          "class": 'scrubber-cont'
        }, function() {});
        div({
          "class": 'media-cont'
        }, function() {
          return audio({
            src: "" + (file.src())
          });
        });
        div({
          "class": 'feedback-cont'
        }, function() {});
        return div({
          "class": 'the-scrubber',
          style: 'height:16px;position:relative;'
        }, function() {
          div({
            "class": 'progbar',
            style: 'height:100%;position:absolute;left:0%;right:0%;top:0%;background-color:rgba(255,255,255,0.6)'
          }, function() {
            return i({
              "class": 'icon-caret-up',
              style: 'margin-left:-4px'
            });
          });
          return div({
            "class": 'progress',
            style: 'height:10px;top:0%'
          }, function() {
            div({
              "class": 'bar bar-success',
              style: "width: 40%; "
            });
            div({
              "class": 'bar bar-danger',
              style: "width: 20%; "
            });
            return div({
              "class": 'bar bar-success',
              style: "width: 40%; "
            });
          });
        });
      };

      RecordingPlayer.prototype.resetSpeed = function() {
        return this.pc.playbackRate(1);
      };

      RecordingPlayer.prototype.changeSpeed = function(amt) {
        var i;
        i = _.indexOf(this.playbackRates, this.pc.playbackRate());
        i = (i + amt === this.playbackRates.length) || (i + amt < 0) ? i : i + amt;
        return this.pc.playbackRate(this.playbackRates[i]);
      };

      RecordingPlayer.prototype.timeDisplay = function(dur) {
        if (dur == null) {
          dur = this.pc.currentTime() * 1000;
        }
        dur = moment.duration(dur);
        return "" + (dur.minutes()) + ":" + (dur.seconds() < 10 ? '0' : '') + (dur.seconds());
      };

      RecordingPlayer.prototype.setFile = function(file, silent) {
        this.state.set({
          fileid: file.id,
          file: file
        }, {
          silent: silent
        });
        return this.feedback.state.set('file', file);
      };

      RecordingPlayer.prototype.setUpFeedbackCues = function() {
        var feedbackRecs, rec, _i, _len, _results,
          _this = this;
        feedbackRecs = this.state.get('file').get('feedback');
        _results = [];
        for (_i = 0, _len = feedbackRecs.length; _i < _len; _i++) {
          rec = feedbackRecs[_i];
          console.log('setting cue: ', rec);
          _results.push(this.pc.cue(rec.insertAt / 1000, function() {
            return console.log('cue: ', rec);
          }));
        }
        return _results;
      };

      RecordingPlayer.prototype.playRecordingPart = function(partNumber) {
        var part;
        part = this.options.state.get('file').get('recordings')[partNumber];
        log(part.at / 1000);
        this.pc.currentTime(part.at / 1000);
        return this.pc.play();
      };

      RecordingPlayer.prototype.jumpToRecordingPart = function(partNumber) {
        var part;
        part = this.options.state.get('file').get('recordings')[partNumber];
        return this.pc.currentTime(part.at / 1000);
      };

      RecordingPlayer.prototype.controlsTemplate = function() {
        var file;
        file = this.options.state.get('file');
        h4({
          "class": 'title'
        }, "" + (file.get('title')) + " (" + (moment(file.get('duration')).format("mm:ss")) + ")");
        return div({
          "class": 'btn-toolbar span8'
        }, function() {
          div({
            "class": 'btn-group pull-left'
          }, function() {
            if (this.pc.paused()) {
              return div({
                "class": 'btn btn-mini btn-success icon-play play'
              }, " " + (this.timeDisplay()));
            } else {
              return div({
                "class": 'btn btn-mini icon-pause btn-inverse pause'
              }, " " + (this.timeDisplay()));
            }
          });
          div({
            "class": 'btn-group'
          }, function() {
            return button({
              "class": 'btn btn-mini icon-undo back-5'
            }, " 5s");
          });
          div({
            "class": 'btn-group'
          }, function() {
            var i, rec, _i, _len, _ref, _ref1, _results;
            _ref1 = (_ref = file.get('recordings')) != null ? _ref : [];
            _results = [];
            for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
              rec = _ref1[i];
              _results.push(div({
                rel: 'tooltip',
                "class": 'btn btn-mini recording-part',
                'data-title': "" + rec.question + " (" + (this.timeDisplay(rec.duration)) + ")",
                'data-part': "" + i
              }, "" + (i + 1)));
            }
            return _results;
          });
          return div({
            "class": 'btn-group pull-right'
          }, function() {
            button({
              "class": "btn btn-mini" + (this.pc.playbackRate() === 0.5 ? ' disabled' : '') + " icon-caret-left speed-dec"
            });
            button({
              "class": 'btn btn-mini disabled speed'
            }, " " + (this.rateLabel(this.pc.playbackRate())) + " speed");
            return button({
              "class": "btn btn-mini" + (this.pc.playbackRate() === 2 ? ' disabled' : '') + " icon-caret-right speed-inc"
            });
          });
        });
      };

      RecordingPlayer.prototype.renderControls = function() {
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this));
        this.$('.recording-part').tooltip();
        this.$('[rel=tooltip]').tooltip();
        return this;
      };

      RecordingPlayer.prototype.renderScrubber = function() {
        var _this = this;
        this.$('.scrubber-cont').empty();
        this.scrubber.render().open(this.$('.scrubber-cont'));
        return this.scrubber.on('change', function(v) {
          return _this.pc.currentTime(v / 1000);
        });
      };

      RecordingPlayer.prototype.setPcEvents = function() {
        var _this = this;
        this.pc = new Popcorn(this.$('audio')[0]);
        this.pc.on('canplay', function() {
          _this.renderControls();
          if (!_this.options.state.get('file').get('duration')) {
            _this.options.state.get('file').save({
              'duration': _this.pc.duration() * 1000
            });
          }
          _this.pc.currentTime(_this.options.state.get('currentTime'));
          _this.pc.playbackRate(_this.options.state.get('playbackRate'));
          _this.scrubber = new UI.Slider({
            max: _this.pc.duration() * 1000
          });
          _this.renderScrubber();
          return _this.setUpFeedbackCues();
        });
        this.pc.on('playing', function() {
          return _this.renderControls();
        });
        this.pc.on('pause', function() {
          return _this.renderControls();
        });
        this.pc.on('ended', function() {
          return _this.renderScrubber();
        });
        this.pc.on('seeking', function() {});
        this.pc.on('ratechange', function() {
          console.log('rate change');
          return _this.renderControls();
        });
        return this.pc.on('timeupdate', function() {
          _this.scrubber.setVal(_this.pc.currentTime() * 1000);
          _this.$('.play').text(" " + (_this.timeDisplay()));
          _this.$('.pause').text(" " + (_this.timeDisplay()));
          return _this.trigger('timeupdate', _this.pc.currentTime() * 1000);
        });
      };

      RecordingPlayer.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, this.options));
        this.feedback.render().open(this.$('.feedback-cont'));
        this.$('.the-scrubber').click(function(e) {
          var w;
          w = _this.$('.progbar').width();
          console.log(e);
          return _this.$('.progbar').css('left', "" + (e.offsetX * 100 / w) + "%");
        });
        return this;
      };

      return RecordingPlayer;

    })(Backbone.View);
    Views.Feedback = (function(_super) {

      __extends(Feedback, _super);

      function Feedback() {
        return Feedback.__super__.constructor.apply(this, arguments);
      }

      Feedback.prototype.tagName = 'div';

      Feedback.prototype.className = 'feedback';

      Feedback.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.player = this.options.player;
        this.state = this.options.state;
        this.rec = $('applet')[0];
        this.stateEvents();
        this.recTimer = new App.Activity.Timer;
        this.playTimer = new App.Activity.Timer;
        this.bigRecTimer = new App.Activity.Timer;
        this.player.on('timeupdate', function(ms) {
          return _this.$('.feedback-insertion-time').text(_this.timeDisplay(ms));
        });
        this.state.on('change:file', function(state, file) {
          file.on('change:feedback', function(m, f) {
            console.log('feedback', m, f);
            return _this.renderRecordings();
          });
          return _this.renderRecordings();
        });
        this.recTimer.on('tick', function(data) {
          var audioLevel, secs, ticks;
          ticks = data.ticks, secs = data.secs;
          _this.$('.feedback-duration-time').text("" + (Math.floor(moment.duration(ticks).asSeconds())) + "s");
          audioLevel = 100 * _this.rec.sendGongRequest('GetAudioLevel', '');
          return _this.$('.recording-feedback').css('box-shadow', "0px 0px " + audioLevel + "px");
        });
        this.on('open', function() {});
        return this.player.on('feedback', function(data) {
          _this.player.pc.pause();
          console.log('feedback here:  ', data);
          return wait(3000, function() {
            return _this.player.pc.play();
          });
        });
      };

      Feedback.prototype.events = {
        'click .record-feedback': function(e) {
          return this.state.set('state', 'recording');
        },
        'click .pause-feedback': function(e) {
          return this.state.set('state', 'paused-recording');
        },
        'click .stop-feedback': function(e) {
          return this.state.set('state', 'stopped-recording');
        },
        'click .jump-before-fb': function(e) {
          var secs;
          e.preventDefault();
          secs = parseFloat($(e.currentTarget).attr('data-time')) / 1000;
          this.player.pc.currentTime(secs - 5 > 0 ? secs - 5 : 0);
          return this.player.pc.play();
        },
        'click .delete-fb': function(e) {
          e.preventDefault();
          return this.player.state.get('file').sync('remove:fb');
        }
      };

      Feedback.prototype.timeDisplay = function(dur) {
        dur = moment.duration(dur);
        return "" + (dur.minutes()) + ":" + (dur.seconds() < 10 ? '0' : '') + (dur.seconds());
      };

      Feedback.prototype.submitFb = function() {
        var data, dataObj, url;
        console.log('posting feedback!!');
        dataObj = {
          recId: this.player.options.state.get('fileid'),
          insertAt: this.player.pc.currentTime() * 1000,
          duration: this.recTimer.currentMSecs()
        };
        console.log('submitting ', dataObj);
        data = Base64.encode(JSON.stringify(dataObj));
        url = "http://up.langlab.org/fb?data=" + data;
        log(dataObj, url);
        this.submitStat = this.rec.sendGongRequest('PostToForm', url, 'file', "", "fb-" + (moment().valueOf()) + ".spx");
        if (this.submitStat) {
          return this.state.set('state', 'submitted');
        } else {
          return this.state.set('state', 'submit-error');
        }
      };

      Feedback.prototype.stateEvents = function() {
        var _this = this;
        return this.state.on('change:state', function(model, state) {
          switch (state) {
            case 'recording':
              _this.player.pc.pause();
              _this.rec.sendGongRequest('RecordMedia', 'audio', 1200000);
              _this.sfx('start-record');
              _this.recTimer.start();
              _this.bigRecTimer.start();
              return _this.render();
            case 'paused-recording':
              _this.sfx('end-record');
              _this.rec.sendGongRequest('PauseMedia', 'audio');
              _this.recTimer.pause();
              _this.bigRecTimer.pause();
              return _this.render();
            case 'stopped-recording':
              _this.recTimer.stop();
              _this.bigRecTimer.pause();
              _this.submitFb();
              _this.render();
              return _this.player.pc.play();
            case 'submitted':
              return console.log('submitted feedback');
            case 'submitt-error':
              return console.log('feedback submit error');
          }
        });
      };

      Feedback.prototype.template = function() {
        div({
          "class": 'btn-toolbar'
        }, function() {
          switch (this.state.get('state')) {
            case 'recording':
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'alert alert-danger icon-comments-alt recording-feedback'
                }, function() {
                  span(" Recording your feedback: ");
                  return span({
                    "class": 'feedback-duration-time'
                  });
                });
              });
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-inverse icon-pause pause-feedback'
                }, function() {
                  return span(" Pause for a moment");
                });
              });
              return div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-success icon-ok stop-feedback',
                  style: 'margin-bottom:20px'
                }, " Finished, continue listening");
              });
            case 'paused-recording':
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'alert alert-danger icon-comments-alt recording-feedback'
                }, function() {
                  span(" Recording paused: ");
                  span({
                    "class": 'feedback-duration-time'
                  });
                  return span({
                    "class": " recorded so far"
                  });
                });
              });
              return div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-danger icon-comments-alt record-feedback'
                }, function() {
                  span(" Continue recording feedback at ");
                  return span({
                    "class": 'feedback-insertion-time'
                  });
                });
              });
            default:
              return div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-danger icon-comments-alt record-feedback'
                }, function() {
                  span(" Record feedback at ");
                  return span({
                    "class": 'feedback-insertion-time'
                  });
                });
              });
              /*
                          div class:'btn-group pull-right', ->
                            button class:'btn btn-info dropdown-toggle icon-edit', 'data-toggle':'dropdown', ->
                              span " Fill out a rubric "
                              span class:'caret'
              */

          }
        });
        return div({
          "class": 'btn-toolbar feedback-recordings'
        }, function() {});
      };

      Feedback.prototype.recordingTemplate = function() {
        var feedbackRecs, i, rec, _i, _len, _results;
        feedbackRecs = _.sortBy(this.state.get('file').get('feedback'), 'insertAt');
        _results = [];
        for (i = _i = 0, _len = feedbackRecs.length; _i < _len; i = ++_i) {
          rec = feedbackRecs[i];
          _results.push(div({
            "class": 'btn-group'
          }, function() {
            button({
              "class": 'btn dropdown-toggle btn-small icon-comments-alt',
              'data-toggle': 'dropdown',
              href: '#',
              rel: 'tooltip',
              'data-title': ""
            }, function() {
              span(" at " + (this.timeDisplay(rec.insertAt)) + " ");
              return span({
                "class": 'caret'
              });
            });
            return ul({
              "class": 'dropdown-menu'
            }, function() {
              li(function() {
                return a({
                  href: '#',
                  'data-time': "" + rec.insertAt,
                  "class": 'jump-before-fb'
                }, function() {
                  return span({
                    "class": 'icon-undo'
                  }, " play 5s before", {
                    'data-time': "" + rec.insertAt
                  });
                });
              });
              li(function() {
                return a({
                  href: '#',
                  'data-time': "" + rec.insertAt,
                  "class": 'play-fb'
                }, function() {
                  return span({
                    "class": 'icon-play'
                  }, " play comment");
                });
              });
              return li(function() {
                return a({
                  href: '#',
                  "class": 'delete-fb'
                }, function() {
                  return span({
                    "class": 'icon-trash'
                  }, " delete");
                });
              });
            });
          }));
        }
        return _results;
      };

      Feedback.prototype.renderRecordings = function() {
        this.$('.feedback-recordings').html(ck.render(this.recordingTemplate, this));
        return this;
      };

      Feedback.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.renderRecordings();
        this.delegateEvents();
        return this;
      };

      return Feedback;

    })(Backbone.View);
    Views.Detail = (function(_super) {

      __extends(Detail, _super);

      function Detail() {
        return Detail.__super__.constructor.apply(this, arguments);
      }

      Detail.prototype.tagName = 'div';

      Detail.prototype.className = 'student-detail-main container';

      Detail.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.recordingState = new UIState;
        this.playerState = new UIState;
        this.studentRecordings = new App.File.Collection(this.model.recordings());
        this.recordings = new Views.Recordings({
          state: this.recordingState,
          collection: this.studentRecordings
        });
        this.player = new Views.RecordingPlayer({
          state: this.playerState
        });
        this.recordingState.on('change:file', function(state, file) {
          return _this.player.setFile(file);
        });
        if (this.studentRecordings.length) {
          this.recordingState.set({
            file: this.studentRecordings.first()
          }, {
            silent: true
          });
          return this.player.setFile(this.studentRecordings.first(), true);
        }
      };

      Detail.prototype.loadFile = function(file) {
        this.recordingState.set({
          file: file
        }, {
          silent: true
        });
        this.recordings.render();
        this.player.setFile(file, true);
        this.player.render();
        return this;
      };

      Detail.prototype.template = function() {
        return div({
          "class": 'row'
        }, function() {
          div({
            "class": 'span3'
          }, function() {
            return div({
              "class": 'pull-left'
            }, function() {
              h2(function() {
                img({
                  "class": 'img-circle',
                  src: "" + (this.model.thumbnail())
                });
                return text(" " + (this.model.get('name')));
              });
              return div("" + (this.model.get('email')));
            });
          });
          return div({
            "class": 'span9 '
          }, function() {
            ul({
              "class": 'nav nav-tabs'
            }, function() {
              li({
                "class": 'active recordings-tab'
              }, function() {
                return a({
                  href: '#',
                  'data-toggle': 'tab',
                  'data-target': '.recordings-cont'
                }, function() {
                  img({
                    src: '/img/cassette.svg'
                  });
                  return text(" Recordings");
                });
              });
              return li({
                "class": 'time-logs-tab'
              }, function() {
                return a({
                  href: '#',
                  'data-toggle': 'tab',
                  'data-target': '.time-logs-cont'
                }, function() {
                  i({
                    "class": 'icon-time'
                  });
                  return span(" Time logs");
                });
              });
            });
            return div({
              "class": 'tab-content'
            }, function() {
              div({
                "class": 'recordings-cont tab-pane active',
                id: 'tab-recordings'
              }, function() {
                div({
                  "class": 'well'
                }, function() {
                  return div({
                    "class": 'player-cont'
                  }, function() {});
                });
                return div({
                  "class": 'recordings-list-cont'
                }, function() {
                  if (this.studentRecordings.length === 0) {
                    return div({
                      "class": 'alert alert-info icon-alert'
                    }, "" + (this.model.get('name')) + " hasn't submitted any recordings yet.");
                  }
                });
              });
              return div({
                "class": 'time-logs-cont tab-pane',
                id: 'tab-time-logs'
              }, function() {
                return h2('Time logs go here');
              });
            });
          });
        });
      };

      Detail.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        if (this.studentRecordings.length) {
          this.recordings.render().open(this.$('.recordings-list-cont'));
          this.player.render().open(this.$('.player-cont'));
        }
        return this;
      };

      return Detail;

    })(Backbone.View);
    return _ref = [Model, Collection, UIState], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UIState = _ref[2], _ref;
  });

  module('App.Teacher', function(exports, top) {
    var Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.idAttribute = '_id';

      Model.prototype.syncName = 'user';

      Model.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'piggyBank':
            return this.set('piggyBank', model.piggyBank);
        }
      };

      Model.prototype.addTags = function(type, newTags) {
        var nt, oldTags, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
        log('adding: ', type, newTags);
        oldTags = (_ref = this.get('tags')) != null ? _ref : {};
        for (_i = 0, _len = newTags.length; _i < _len; _i++) {
          nt = newTags[_i];
          if ((_ref1 = oldTags.totals) != null ? _ref1[nt] : void 0) {
            oldTags.totals[nt]++;
          } else {
            ((_ref2 = oldTags.totals) != null ? _ref2 : oldTags.totals = {})[nt] = 1;
          }
          if ((_ref3 = oldTags[type]) != null ? _ref3[nt] : void 0) {
            oldTags[type][nt]++;
          } else {
            ((_ref4 = oldTags[type]) != null ? _ref4 : oldTags[type] = {})[nt] = 1;
          }
        }
        return this.set('tags', oldTags);
      };

      Model.prototype.removeTags = function(type, tagsToRemove) {
        var oldTags, tg, _i, _len, _ref;
        oldTags = this.get('tags');
        for (_i = 0, _len = tagsToRemove.length; _i < _len; _i++) {
          tg = tagsToRemove[_i];
          if (((_ref = oldTags[type]) != null ? _ref[tg] : void 0) != null) {
            oldTags[type][tg]--;
            oldTags.totals[tg]--;
          }
        }
        return this.set('tags', oldTags);
      };

      return Model;

    })(Backbone.Model);
    exports.Model = Model;
    exports.Views = Views = {};
    Views.Profile = (function(_super) {

      __extends(Profile, _super);

      function Profile() {
        return Profile.__super__.constructor.apply(this, arguments);
      }

      Profile.prototype.tagName = 'div';

      Profile.prototype.className = 'modal fade hide profile-view';

      Profile.prototype.initialize = function() {};

      Profile.prototype.events = {
        'change input, select': function(e) {
          var model;
          log('change');
          model = {};
          model[$(e.target).attr('data-fld')] = $(e.target).val();
          return this.model.save(model, {
            error: this.showErrors,
            success: this.saveSuccess
          });
        }
      };

      Profile.prototype.showErrors = function(model, errs) {
        var err, type, _ref, _results;
        log(errs);
        _ref = errs.errors;
        _results = [];
        for (type in _ref) {
          err = _ref[type];
          this.$(".control-group." + type).addClass('error');
          _results.push(this.$(".control-group." + type + " .help-block").text(err.type));
        }
        return _results;
      };

      Profile.prototype.saveSuccess = function() {
        var alert,
          _this = this;
        this.$('.control-group').removeClass('error');
        this.$('.control-group .help-block').text('');
        alert = $('<span/>').addClass('label-success').addClass('label').addClass('pull-left').text('Change saved!');
        alert.prependTo(this.$('.modal-footer'));
        return wait(1000, function() {
          return alert.remove();
        });
      };

      Profile.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h1(function() {
            img({
              src: "" + (this.get('twitterImg'))
            });
            return text(" " + (this.get('twitterName')));
          });
        });
        div({
          "class": 'modal-body'
        }, function() {
          return form(function() {
            div({
              "class": 'control-group teacherName'
            }, function() {
              label('How do students address you? (if different from your Twitter name above)');
              input({
                type: 'text',
                placeholder: 'your teacher name',
                'data-fld': 'teacherName',
                value: "" + (this.get('teacherName'))
              });
              return span({
                "class": 'help-block'
              });
            });
            div({
              "class": 'control-group email'
            }, function() {
              label('Enter an email address where you can be contacted (optional).');
              input({
                type: 'text',
                placeholder: 'your email',
                'data-fld': 'email',
                value: "" + (this.get('email'))
              });
              return span({
                "class": 'help-block'
              });
            });
            return div({
              "class": 'control-group emailPref'
            }, function() {
              label('When do you want to receive emails from lingualab.io?');
              return select({
                "class": 'email-pref',
                'data-fld': 'emailPref'
              }, function() {
                option({
                  value: 'never'
                }, 'Never!');
                option({
                  value: 'important'
                }, 'Important notifications only');
                return option({
                  value: 'features'
                }, 'Notifications, new features and tips');
              });
            });
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return button('btn', {
            'data-dismiss': 'modal'
          }, 'Close');
        });
      };

      Profile.prototype.render = function() {
        var _this = this;
        Profile.__super__.render.call(this);
        this.$el.modal('show');
        this.$('select.email-pref').val(this.model.get('emailPref'));
        this.delegateEvents();
        this.$el.on('hidden', function() {
          return _this.remove();
        });
        return this;
      };

      return Profile;

    })(Backbone.View);
    Views.Account = (function(_super) {

      __extends(Account, _super);

      function Account() {
        return Account.__super__.constructor.apply(this, arguments);
      }

      Account.prototype.tagName = 'div';

      Account.prototype.className = 'modal fade hide account-view';

      Account.prototype.initialize = function() {
        return this.model = new Backbone.Model;
      };

      Account.prototype.events = {
        'click button.purchase': 'createToken',
        'keyup input.entry': function() {
          log(this.heartCalc());
          return this.$('.heartbeats-needed').text(this.heartCalc());
        }
      };

      Account.prototype.heartCalc = function() {
        var minutesPerNight, numStudents, weeksOfSchool, _ref, _ref1, _ref2;
        numStudents = (_ref = this.$('.num-students').val()) != null ? _ref : 0;
        weeksOfSchool = (_ref1 = this.$('.weeks-of-school').val()) != null ? _ref1 : 0;
        minutesPerNight = (_ref2 = this.$('.minutes-per-night').val()) != null ? _ref2 : 0;
        return numStudents * weeksOfSchool * 5 * minutesPerNight / 5;
      };

      Account.prototype.createToken = function() {
        var data,
          _this = this;
        data = {
          number: this.$('input.card-number').val(),
          cvc: this.$('input.card-cvc').val(),
          exp_month: this.$('input.card-expiry-month').val(),
          exp_year: this.$('input.card-expiry-year').val()
        };
        return Stripe.createToken(data, function(status, response) {
          log('stripe: ', status, response);
          if (response.error) {
            return _this.$('.errors').text(response.error.message);
          } else {
            log(_this.model.toJSON());
            return _this.model.sync('charge', _this.model.toJSON(), {
              charge: {
                amount: _this.$('.amount').val(),
                card: response.id,
                currency: 'usd',
                description: _this.model.id
              },
              error: function(m, err) {
                return log('charge error: ', m, err);
              },
              success: function(m, err) {
                return log('charge success: ', m, err);
              }
            });
          }
        });
      };

      Account.prototype.template = function() {
        div({
          "class": 'modal-body'
        }, function() {
          ul({
            "class": 'nav nav-tabs'
          }, function() {
            li({
              "class": 'active account-tab'
            }, function() {
              return a({
                href: '#',
                'data-toggle': 'tab',
                'data-target': '.account-cont'
              }, function() {
                i({
                  "class": 'icon-credit-card'
                });
                return text(" Account");
              });
            });
            return li({
              "class": 'hypothetical-tab'
            }, function() {
              return a({
                href: '#',
                'data-toggle': 'tab',
                'data-target': '.hypothetical-cont'
              }, function() {
                i({
                  "class": 'icon-heart'
                });
                return span(" Heartbeat calculator");
              });
            });
          });
          return div({
            "class": 'tab-content'
          }, function() {
            div({
              "class": 'account-cont tab-pane active'
            }, function() {
              h3("You currently have " + (this.get('piggyBank')));
              form({
                "class": 'form-inline'
              }, function() {
                return div({
                  "class": 'control-group'
                }, function() {
                  span("Purchase ");
                  return input({
                    type: 'text',
                    "class": 'input-mini amount'
                  });
                });
              });
              form({
                "class": 'cc'
              }, function() {
                div({
                  "class": 'control-group card-number'
                }, function() {
                  input({
                    type: 'text',
                    "class": 'fld card-number',
                    'data-fld': 'card-number',
                    placeholder: 'credit card number',
                    autocomplete: 'off',
                    size: 20
                  });
                  return span({
                    "class": 'help-block'
                  });
                });
                div({
                  "class": 'control-group card-cvc'
                }, function() {
                  input({
                    type: 'text',
                    "class": 'fld card-cvc input-mini',
                    'data-fld': 'card-cvc',
                    placeholder: 'CVCC',
                    autocomplete: 'off',
                    size: 4
                  });
                  return span({
                    "class": 'help-block'
                  });
                });
                div({
                  "class": 'control-group card-expiry-month'
                }, function() {
                  input({
                    type: 'text',
                    "class": 'fld input-mini card-expiry-month',
                    'data-fld': 'card-expiry-month',
                    placeholder: 'MM',
                    autocomplete: 'off',
                    size: '2'
                  });
                  return span({
                    "class": 'help-block'
                  });
                });
                return div({
                  "class": 'control-group card-expiry-year'
                }, function() {
                  input({
                    type: 'text',
                    "class": 'fld input-small card-expiry-year',
                    'data-fld': 'card-expiry-year',
                    placeholder: 'YYYY',
                    autocomplete: 'off',
                    size: '4'
                  });
                  return span({
                    "class": 'help-block'
                  });
                });
              });
              return div({
                "class": 'errors'
              }, function() {});
            });
            return div({
              "class": 'hypothetical-cont tab-pane'
            }, function() {
              h4("How many heartbeats do my students need?");
              p('Use the calculator to find out!');
              form({
                "class": ''
              }, function() {
                div({
                  "class": 'control-group'
                }, function() {
                  label({
                    "class": 'control-label'
                  }, "How many students do you teach?");
                  return div({
                    "class": 'controls'
                  }, function() {
                    return input({
                      type: 'text',
                      "class": 'input-small num-students entry',
                      value: '60'
                    });
                  });
                });
                div({
                  "class": 'control-group'
                }, function() {
                  label({
                    "class": 'control-label'
                  }, "How many more weeks of school will students use langlab?");
                  return div({
                    "class": 'controls'
                  }, function() {
                    return input({
                      type: 'text',
                      "class": 'input-small weeks-of-school entry',
                      value: '36'
                    });
                  });
                });
                return div({
                  "class": 'control-group'
                }, function() {
                  label({
                    "class": 'control-label'
                  }, "How many minutes per day should your students use langlab for practice?");
                  return div({
                    "class": 'controls'
                  }, function() {
                    return input({
                      type: 'text',
                      "class": 'input-small minutes-per-night entry',
                      value: '30'
                    });
                  });
                });
              });
              return h4(function() {
                span("Your students will need: ");
                span({
                  "class": 'heartbeats-needed'
                });
                return span(" heartbeats for the year.");
              });
            });
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn-success btn icon-credit-card purchase pull-left btn-large icon-large'
          }, " Purchase");
          return button({
            "class": 'btn',
            'data-dismiss': 'modal'
          }, ' Close');
        });
      };

      Account.prototype.render = function() {
        var _this = this;
        Account.__super__.render.call(this);
        this.$el.modal('show');
        this.delegateEvents();
        this.$el.on('hidden', function() {
          return _this.remove();
        });
        return this;
      };

      return Account;

    })(Backbone.View);
    Views.SearchBox = (function(_super) {

      __extends(SearchBox, _super);

      function SearchBox() {
        return SearchBox.__super__.constructor.apply(this, arguments);
      }

      SearchBox.prototype.tagName = 'span';

      SearchBox.prototype.className = '';

      SearchBox.prototype.initialize = function() {};

      SearchBox.prototype.template = function() {
        return input({
          type: 'text',
          id: 'search-box',
          "class": 'search-query span2',
          placeholder: "search " + (this.collection.modelType())
        });
      };

      SearchBox.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, this.options));
        $('#search-cont').empty();
        this.$el.appendTo($('#search-cont'));
        this.$('input').on('keyup', function(e) {
          if (e.which === 32) {
            e.preventDefault();
          }
          if (e.which === 27) {
            $(e.currentTarget).val('');
          }
          clearTimeout(_this.searchWait);
          return _this.searchWait = wait(200, function() {
            return _this.trigger('change', $(e.currentTarget).val());
          });
        });
        this.$('input').on('change', function(e) {
          clearTimeout(_this.searchWait);
          return _this.searchWait = wait(200, function() {
            return _this.trigger('change', $(e.currentTarget).val());
          });
        });
        this.$('input').typeahead({
          source: this.collection.allTags()
        });
        return this;
      };

      return SearchBox;

    })(Backbone.View);
    Views.TestRecs = (function(_super) {

      __extends(TestRecs, _super);

      function TestRecs() {
        return TestRecs.__super__.constructor.apply(this, arguments);
      }

      TestRecs.prototype.tagName = 'div';

      TestRecs.prototype.className = 'modal test';

      TestRecs.prototype.template = function() {
        return div({
          "class": 'modal-body'
        }, function() {
          var i, _i, _results;
          _results = [];
          for (i = _i = 1; _i <= 50; i = ++_i) {
            _results.push(applet({
              "class": 'test',
              archive: 'http://gong.ust.hk/nanogong/nanogong.jar',
              code: 'gong.NanoGong',
              width: 150,
              height: 40
            }, function() {
              param({
                name: 'AudioFormat',
                value: 'Speex'
              });
              param({
                name: 'MaxDuration',
                value: '1200'
              });
              return param({
                name: 'SamplingRate',
                value: '32000'
              });
            }));
          }
          return _results;
        });
      };

      TestRecs.prototype.render = function() {
        TestRecs.__super__.render.call(this);
        this.$el.modal('show');
        return this;
      };

      return TestRecs;

    })(Backbone.View);
    Views.MainNav = (function(_super) {

      __extends(MainNav, _super);

      function MainNav() {
        return MainNav.__super__.constructor.apply(this, arguments);
      }

      MainNav.prototype.tagName = 'div';

      MainNav.prototype.className = 'modal fade hide main-nav';

      MainNav.prototype.initialize = function() {
        var _this = this;
        return this.on('open', function() {
          return _this.$el.modal('show');
        });
      };

      MainNav.prototype.template = function() {
        return div({
          "class": 'modal-body'
        }, function() {
          return ul({
            "class": 'thumbnails'
          }, function() {
            return li(function() {
              span({
                "class": 'thumbnail'
              }, function() {
                img({
                  src: '/img/briefcase-icon.png'
                });
                return div({
                  "class": 'caption'
                }, "Files");
              });
              return span({
                "class": 'thumbnail'
              }, function() {
                return img({
                  src: '/img/'
                });
              });
            });
          });
        });
      };

      MainNav.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        return this;
      };

      return MainNav;

    })(Backbone.View);
    return Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'top-bar navbar navbar-fixed-top navbar-inverse';

      TopBar.prototype.initialize = function() {
        var _this = this;
        return this.model.on('change:piggyBank', function(m, v) {
          log('piggyBank change:', v);
          return _this.$('.piggyBank').text(v);
        });
      };

      TopBar.prototype.events = {
        'click .profile': function(e) {
          log('profile');
          top.app.views.profile.render();
          return false;
        },
        'click .heart': function(e) {
          top.app.views.piggy.render();
          return false;
        }
      };

      TopBar.prototype.updateNav = function(rt) {
        this.$('ul.nav li').removeClass('active');
        this.$("ul.nav a[href=#" + rt + "]").parent('li').addClass('active');
        return this;
      };

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            a({
              "class": 'btn btn-navbar',
              'data-toggle': 'collapse',
              'data-target': '.nav-collapse'
            }, function() {
              span({
                "class": 'icon-beaker icon-large'
              });
              return span({
                "class": 'icon-reorder icon-large'
              });
            });
            return div({
              "class": 'nav-collapse'
            }, function() {
              ul({
                "class": 'nav'
              }, function() {
                li(function() {
                  return a({
                    "class": 'user profile',
                    href: '#'
                  }, function() {
                    return img({
                      src: "" + (this.get('twitterImg'))
                    });
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                li(function() {
                  return a({
                    href: '#students'
                  }, function() {
                    return i({
                      "class": 'icon-group'
                    });
                  });
                });
                li(function() {
                  return a({
                    href: '#files'
                  }, function() {
                    return i({
                      "class": 'icon-briefcase'
                    });
                  });
                });
                li(function() {
                  return a({
                    href: '#stacks'
                  }, function() {
                    return i({
                      "class": 'icon-check-empty'
                    });
                  });
                });
                li(function() {
                  return a({
                    href: '#lab'
                  }, function() {
                    return i({
                      "class": 'icon-headphones'
                    });
                  });
                });
                return li(function() {
                  return a({
                    href: '#lounge'
                  }, function() {
                    return i({
                      "class": 'icon-comments'
                    });
                  });
                });
              });
              return ul({
                "class": 'nav pull-right'
              }, function() {
                li({
                  "class": 'pull-left'
                }, function() {
                  return form({
                    id: 'search-cont',
                    "class": 'navbar-search pull-left'
                  }, function() {});
                });
                /*
                                  
                              li class:'divider-vertical'
                              li -> a href:'#', class:'heart', ->
                                i class:'icon-heart'
                                span class:'piggyBank', " #{ @get('piggyBank') }"
                */

                li({
                  "class": 'divider-vertical'
                });
                return li(function() {
                  return a({
                    href: '/logout',
                    "class": 'icon-signout'
                  });
                });
              });
            });
          });
        });
      };

      TopBar.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return TopBar;

    })(Backbone.View);
  });

  module('App', function(exports, top) {
    var Model, Router, _ref;
    Model = (function() {

      function Model() {
        var fetcher, _ref,
          _this = this;
        if ((_ref = window.filepicker) != null) {
          _ref.setKey('Ag4e6fVtyRNWgXY2t3Dccz');
        }
        if (typeof Stripe !== "undefined" && Stripe !== null) {
          Stripe.setPublishableKey('pk_04LnDZEuRgae5hqjKjFaWjFyTYFgs');
        }
        this.socketConnect();
        this.fromDB();
        this.data = {
          teacher: new App.Teacher.Model(top.data.session.user),
          filez: new App.File.Collection(),
          students: new App.Student.Collection(),
          stacks: new App.CardStack.Collection()
        };
        this.data.lab = new App.Lab.Model({}, {
          teacher: this.data.teacher,
          students: this.data.students,
          filez: this.data.filez
        });
        this.views = {
          topBar: new App.Teacher.Views.TopBar({
            model: this.data.teacher
          }),
          filez: new App.File.Views.Main({
            collection: this.data.filez
          }),
          students: new App.Student.Views.Main({
            collection: this.data.students
          }),
          profile: new App.Teacher.Views.Profile({
            model: this.data.teacher
          }),
          piggy: new App.Teacher.Views.Account({
            model: this.data.teacher
          }),
          lounge: new App.Lounge.Views.Main,
          lab: new App.Lab.Views.Main({
            model: this.data.lab
          }),
          stack: new App.CardStack.Views.Main({
            collection: this.data.stacks
          })
        };
        this.router = new Router(this.data, this.views);
        this.fetched = 0;
        fetcher = function(col) {
          return col.fetch({
            success: function() {
              _this.fetched++;
              if (_this.fetched === (_.keys(_this.data)).length - 2) {
                return Backbone.history.start();
              }
            }
          });
        };
        wait(200, function() {
          fetcher(_this.data.filez);
          fetcher(_this.data.students);
          return fetcher(_this.data.stacks);
        });
      }

      Model.prototype.fromDB = function() {
        var _this = this;
        return this.connection.on('sync', function(service, data) {
          log('service', service, 'data', data);
          switch (service) {
            case 'file':
              return _this.data.filez.fromDB(data);
            case 'student':
              return _this.data.students.fromDB(data);
            case 'user':
              return _this.data.teacher.fromDB(data);
            case 'lab':
              return _this.data.lab.fromDB(data);
          }
        });
      };

      Model.prototype.tagList = function() {
        return _.union(this.data.students.allTags(), this.data.filez.allTags());
      };

      Model.prototype.socketConnect = function() {
        this.connection = window.sock = window.io.connect("https://" + window.data.CFG.API.HOST);
        return this.connectionView = new App.Connection.Views.Main({
          model: this.connection
        });
      };

      return Model;

    })();
    Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.initialize = function(data, views) {
        this.data = data;
        this.views = views;
        this.showTopBar();
        return this.views.lab.render().$el.appendTo('body');
      };

      Router.prototype.routes = {
        '/': 'home',
        'files': 'files',
        'file/:id': 'fileDetail',
        'students': 'students',
        'student/:id': 'studentDetail',
        'student/:id/recording/:file': 'studentRecording',
        'lab': 'lab',
        'lounge': 'lounge',
        'stacks': 'stacks'
      };

      Router.prototype.showTopBar = function() {
        return this.views.topBar.render().open();
      };

      Router.prototype.home = function() {
        return this.clearViews();
      };

      Router.prototype.profile = function() {
        return this.views.profile.render();
      };

      Router.prototype.files = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('files');
        return this.views.filez.render().open();
      };

      Router.prototype.fileDetail = function(id) {
        this.clearViews('topBar');
        this.views.fileDetail = new App.File.Views.Detail({
          model: this.data.filez.get(id)
        });
        return this.views.fileDetail.render().open();
      };

      Router.prototype.students = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('students');
        return this.views.students.render().open();
      };

      Router.prototype.studentDetail = function(id) {
        var _ref;
        this.clearViews('topBar');
        if ((_ref = this.views.studentDetail) != null) {
          _ref.remove();
        }
        this.views.studentDetail = new App.Student.Views.Detail({
          model: this.data.students.get(id)
        });
        return this.views.studentDetail.render().open();
      };

      Router.prototype.studentRecording = function(studentId, fileId) {
        var file;
        this.studentDetail(studentId);
        file = this.data.filez.get(fileId);
        return this.views.studentDetail.loadFile(file);
      };

      Router.prototype.lab = function() {
        this.clearViews(['topBar', 'lab']);
        this.views.topBar.updateNav('lab');
        return this.views.lab.open();
      };

      Router.prototype.lounge = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('lounge');
        return this.views.lounge.render().open();
      };

      Router.prototype.stacks = function() {
        this.clearViews('topBar');
        return this.views.topBar.updateNav('stacks');
      };

      return Router;

    })(Backbone.Router);
    return _ref = [Model, Router], exports.Model = _ref[0], exports.Router = _ref[1], _ref;
  });

  $(function() {
    return window.app = new App.Model;
  });

}).call(this);
