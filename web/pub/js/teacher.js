// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  module('App.File', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'file';

      Model.prototype.idAttribute = '_id';

      Model.prototype.thumbBase = "http://s3.amazonaws.com/lingualabio-media";

      Model.prototype.iconHash = {
        video: 'facetime-video',
        image: 'picture',
        pdf: 'file',
        audio: 'volume-up'
      };

      Model.prototype.src = function() {
        switch (this.get('type')) {
          case 'image':
            return this.get('imageUrl');
          case 'video':
            if (top.Modernizr.video.webm) {
              return this.get('webmUrl');
            } else if (top.Modernizr.video.h264) {
              return this.get('h264Url');
            }
            break;
          case 'audio':
            return this.get('mp3Url');
        }
      };

      Model.prototype.thumbnail = function() {
        var _ref, _ref1;
        return (_ref = (_ref1 = this.get('thumbUrl')) != null ? _ref1 : this.get('imageUrl')) != null ? _ref : 'http://placehold.it/100x100';
      };

      Model.prototype.icon = function() {
        if (this.get('type') === 'application') {
          return this.iconHash[this.get('ext')];
        } else {
          return this.iconHash[this.get('type')];
        }
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'file';

      Collection.prototype.initialize = function() {
        var _this = this;
        return this.io.on('connect', function() {
          return wait(10, function() {
            return _this.fetch();
          });
        });
      };

      Collection.prototype.comparator = function() {
        return 0 - moment(this.get('modified')).valueOf();
      };

      Collection.prototype.filteredBy = function(searchTerm) {
        return this.filter(function(m) {
          var re;
          re = new RegExp(searchTerm, 'i');
          return re.test(m.get('title'));
        });
      };

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        console.log('updating ', model);
        switch (method) {
          case 'create':
            return this.add(model);
          case 'update':
            return this.get(model._id).set(model);
          case 'progress':
            return this.get(model._id).set({
              prepProgress: model.prepProgress,
              status: model.status
            });
          case 'status':
            return this.get(model._id).set(model);
        }
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        searchTerm: '',
        currentListView: 'list'
      };

      return UIState;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.Tags = (function(_super) {

      __extends(Tags, _super);

      function Tags() {
        return Tags.__super__.constructor.apply(this, arguments);
      }

      Tags.prototype.tagName = 'div';

      Tags.prototype.className = 'tags-ui';

      Tags.prototype.initialize = function(tags) {
        return this.reset(tags);
      };

      Tags.prototype.template = function() {
        span({
          "class": 'tags-cont'
        }, function() {
          var tag, _i, _len, _ref, _results;
          _ref = this._tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(span({
              "class": 'label'
            }));
          }
          return _results;
        });
        return input({
          type: 'text',
          "class": 'tag-input',
          placeholder: 'add a tag'
        });
      };

      Tags.prototype.events = function() {
        return {
          'change input': function() {
            return this.addtag($(e.target).val());
          }
        };
      };

      Tags.prototype.addTag = function(tag) {
        this._tags.add;
        return this.render();
      };

      Tags.prototype.getArray = function() {
        return this._tags;
      };

      Tags.prototype.getString = function() {
        return this._tags.join('|');
      };

      Tags.prototype.reset = function(tags) {
        if (_.isString(tags)) {
          this._tags = tags.split('|');
        }
        if (_.isArray(tags)) {
          return this._tags = tags;
        }
      };

      Tags.prototype.render = function() {
        this.$el.html(ck.render(this.tempate(this)));
        return this;
      };

      return Tags;

    })(Backbone.View);
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'files-main';

      Main.prototype.initialize = function() {
        var _this = this;
        this.listView = new Views.List({
          collection: this.collection
        });
        this.ui = new UIState();
        this.collection.on('reset', function() {
          return _this.renderList();
        });
        return this.ui.on('change:searchTerm', function(ui, term) {
          return _this.listView.doSearch(term);
        });
      };

      Main.prototype.events = {
        'click .select-browser-view': function() {
          return this.ui.set('currentListView', 'browser');
        },
        'click .select-list-view': function() {
          return this.ui.set('currentListView', 'list');
        },
        'keyup .search-query': 'search',
        'click .record-upload': 'openRecorder',
        'click .file-picker': 'openFilePicker'
      };

      Main.prototype.search = function(e) {
        var _this = this;
        clearTimeout(this.searchWait);
        return this.searchWait = wait(200, function() {
          return _this.ui.set('searchTerm', $(e.target).val());
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'row files-top-bar'
        }, function() {
          span({
            "class": 'btn-toolbar span4'
          }, function() {
            return div({
              "class": 'input-prepend'
            }, function() {
              span({
                "class": 'add-on icon-search'
              });
              return input({
                "class": 'search-query span3',
                type: 'text',
                placeholder: 'search'
              });
            });
          });
          return span({
            "class": 'btn-toolbar span8 pull-right'
          }, function() {
            return button({
              "class": 'btn btn-success icon-plus file-picker pull-right'
            }, ' Add a file');
          });
        });
        div({
          "class": 'files-list-cont span10'
        }, function() {});
        return div({
          "class": 'file-detail-cont'
        });
      };

      Main.prototype.openFilePicker = function() {
        var _this = this;
        window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          location: filepicker.SERVICES.COMPUTER
        }, function(url, data) {
          console.log(url, data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
        return wait(1000, function() {
          return $('<button></button>').addClass('btn').text('hello').appendTo(this.$('#filepicker_dialog_container'));
        });
      };

      Main.prototype.handleFileUpload = function() {
        return console.log($('.file-picker-url').val());
      };

      Main.prototype.openRecorder = function() {
        var _ref, _ref1;
        if ((_ref = this.recorder) != null) {
          _ref.remove();
        }
        if ((_ref1 = this.recorder) == null) {
          this.recorder = new Views.Recorder();
        }
        this.recorder.render().open();
        return this;
      };

      Main.prototype.renderList = function() {
        this.listView.render().open(this.$('.files-list-cont'));
        return this;
      };

      Main.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, this));
        this.renderList();
        this.$('.tt').tooltip();
        this.$('.files-top-bar').removeClass('navbar-fixed-top').waypoint(function(event, direction) {
          if (direction === 'down') {
            return _this.$('.files-top-bar').hide().addClass('sticky').fadeIn();
          } else {
            return _this.$('.files-top-bar').hide().removeClass('sticky').fadeIn();
          }
        }, {
          offset: 0
        });
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'modal popup-recorder';

      Recorder.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h2('Record and upload your voice');
        });
        div({
          "class": 'modal-body'
        }, function() {});
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn'
          }, function() {
            return text(' Nevermind');
          });
          return button({
            "class": 'btn btn-success'
          }, function() {
            i({
              "class": 'icon-upload'
            });
            return text(' Upload it!');
          });
        });
      };

      Recorder.prototype.render = function() {
        var _ref;
        Recorder.__super__.render.call(this);
        if ((_ref = this.recorder) == null) {
          this.recorder = new App.Recording.Views.Recorder();
        }
        this.recorder.render().open(this.$('.modal-body'));
        this.$el.modal('show');
        return this;
      };

      return Recorder;

    })(Backbone.View);
    Views.List = (function(_super) {

      __extends(List, _super);

      function List() {
        this.addItem = __bind(this.addItem, this);
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.tagName = 'table';

      List.prototype.className = 'table file-list';

      List.prototype.initialize = function() {
        var _this = this;
        this.collection.on('add', this.addItem);
        return this.collection.on('reset', function() {
          return _this.render();
        });
      };

      List.prototype.doSearch = function(searchTerm) {
        this.searchTerm = searchTerm;
        return this.render();
      };

      List.prototype.template = function() {
        thead(function() {});
        tbody(function() {});
        return tfoot(function() {});
      };

      List.prototype.addItem = function(f) {
        var _ref, _ref1;
        if ((_ref = f.listItemView) != null) {
          _ref.remove();
        }
        if ((_ref1 = f.listItemView) == null) {
          f.listItemView = new Views.ListItem({
            model: f
          });
        }
        f.listItemView.render().open(this.$('tbody'));
        return this;
      };

      List.prototype.render = function() {
        var f, input, upl, _i, _len, _ref;
        this.$el.html(ck.render(this.template, this.collection));
        _ref = (this.searchTerm ? this.collection.filteredBy(this.searchTerm) : this.collection.models);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          this.addItem(f);
        }
        upl = this.collection.uploadFile;
        input = this.$('.select-upload').browseElement();
        input.on('change', function(e) {
          var _j, _len1, _ref1, _results;
          _ref1 = e.target.files;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            f = _ref1[_j];
            console.log('uploading ', f);
            _results.push(upl(f));
          }
          return _results;
        });
        this.delegateEvents();
        return this;
      };

      return List;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'list-item';

      ListItem.prototype.initialize = function() {
        var _this = this;
        this.model.on('change', function() {
          return _this.renderThumb();
        });
        return this.model.on('remove', function() {
          return _this.remove();
        });
      };

      ListItem.prototype.events = {
        'change .title': function(e) {
          return this.model.save({
            title: $(e.target).val()
          });
        },
        'click .delete': 'deleteItem',
        'click .dl': 'downloadItem',
        'dblclick': function() {
          return this.model.collection.trigger('selected', this.model);
        }
      };

      ListItem.prototype.thumbTemplate = function() {
        if (this.get('status') !== 'finished') {
          div('processing');
          return div({
            "class": 'progress progress-striped active'
          }, function() {
            return div({
              "class": 'bar',
              style: "width: " + (this.get('prepProgress' || 5)) + "%"
            });
          });
        } else {
          if (this.thumbnail()) {
            return img({
              src: "" + (this.thumbnail()),
              "class": 'thumb'
            });
          } else {
            return i({
              "class": "icon-" + (this.icon()) + " icon-large"
            });
          }
        }
      };

      ListItem.prototype.template = function() {
        var urls;
        urls = this.get('urls');
        td({
          "class": 'thumb-cont'
        }, function() {});
        td(function() {
          return input({
            "class": 'title',
            value: "" + (this.get('title'))
          });
        });
        td(moment(this.get('created')).format("MMM D h:mm:ss a"));
        td({
          "class": 'tags-cont'
        }, function() {});
        td(function() {
          return i({
            "class": 'icon-share-alt dl'
          });
        });
        return td(function() {
          return i({
            "class": 'icon-trash delete'
          });
        });
      };

      ListItem.prototype.deleteItem = function() {
        return this.model.destroy();
      };

      ListItem.prototype.downloadItem = function() {
        return filepicker.saveAs(this.model.src(), this.model.get('mime'), function(url) {
          return console.log(url);
        });
      };

      ListItem.prototype.renderThumb = function() {
        return this.$('.thumb-cont').html(ck.render(this.thumbTemplate, this.model));
      };

      ListItem.prototype.render = function() {
        this.delegateEvents();
        ListItem.__super__.render.call(this);
        this.renderThumb();
        return this;
      };

      return ListItem;

    })(Backbone.View);
    Views.Detail = (function(_super) {

      __extends(Detail, _super);

      function Detail() {
        return Detail.__super__.constructor.apply(this, arguments);
      }

      Detail.prototype.tagName = 'div';

      Detail.prototype.className = 'file-video-detail';

      Detail.prototype.template = function() {
        switch (this.get('type')) {
          case 'video':
            return video({
              "class": 'video',
              src: "" + (this.src())
            });
          case 'image':
            return img({
              src: "" + (this.src())
            });
        }
      };

      return Detail;

    })(Backbone.View);
    return _ref = [Model, Collection, UI], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UI = _ref[2], _ref;
  });

  module('App.Recording', function(exports, top) {
    var Collection, Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(App.File.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      return Collection;

    })(Backbone.Collection);
    exports.Views = Views = {};
    return Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'recorder';

      Recorder.prototype.initialize = function() {};

      Recorder.prototype.events = {
        'click .record': 'record',
        'click .play': 'play',
        'click .stop': 'stop',
        'click .pause': 'pause'
      };

      Recorder.prototype.template = function() {
        applet({
          "class": 'recorder-applet',
          archive: '/java/nanogong.jar',
          code: 'gong.NanoGong',
          width: 150,
          height: 40
        }, function() {
          param({
            name: 'AudioFormat',
            value: 'Speex'
          });
          param({
            name: 'MaxDuration',
            value: '1200'
          });
          return param({
            name: 'SamplingRate',
            value: '16000'
          });
        });
        div({
          "class": 'scrubber'
        }, function() {});
        div({
          "class": 'status'
        });
        return div({
          "class": 'recorder-main'
        }, function() {
          button({
            "class": 'btn btn-danger record state-stopped state-closed state-paused-recording'
          }, function() {
            i({
              "class": 'icon-comment'
            });
            return text(' rec');
          });
          button({
            "class": 'btn pause state-playing state-recording'
          }, function() {
            i({
              "class": 'icon-pause'
            });
            return text(' pause');
          });
          button({
            "class": 'btn btn-success play state-paused state-stopped state-paused'
          }, function() {
            i({
              "class": 'icon-play'
            });
            return text(' play');
          });
          return button({
            "class": 'btn btn-inverse stop state-paused state-recording state-playing state-paused-recording'
          }, function() {
            i({
              "class": 'icon-stop'
            });
            return text(' stop');
          });
        });
      };

      Recorder.prototype.appEvents = function() {
        var _this = this;
        return doEvery(200, function() {
          return _this.statusCheck();
        });
      };

      Recorder.prototype.handleNewStatus = function() {
        this.$('.recorder-main .btn').hide();
        return this.$(".recorder-main .state-" + this.status).show();
      };

      Recorder.prototype.statusCheck = function() {
        if (this.status !== (this.status = this.getStatus().replace(' ', '-'))) {
          this.trigger('status', this.status);
          this.$('.status').text(this.status);
          return this.handleNewStatus();
        }
      };

      Recorder.prototype.render = function() {
        var _ref;
        Recorder.__super__.render.call(this);
        this.rec = this.$('.recorder-applet')[0];
        this.appEvents();
        if ((_ref = this.scrubber) == null) {
          this.scrubber = new UI.Slider();
        }
        this.scrubber.render().open(this.$('.scrubber'));
        return this;
      };

      Recorder.prototype._req = function() {
        var args, res, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        res = (_ref = this.rec).sendGongRequest.apply(_ref, args);
        return res;
      };

      Recorder.prototype.record = function() {
        var duration;
        duration = this._req('RecordMedia', 'audio', 1200000);
        return this;
      };

      Recorder.prototype.stop = function() {
        this._req('StopMedia', 'audio');
        return this;
      };

      Recorder.prototype.pause = function() {
        this._req('PauseMedia', 'audio');
        return this;
      };

      Recorder.prototype.clear = function() {
        this._req('ClearMedia', 'audio');
        return this;
      };

      Recorder.prototype.play = function() {
        this._req('PlayMedia', 'audio');
        return this;
      };

      Recorder.prototype.getStatus = function() {
        return this._req('GetMediaStatus', 'audio');
      };

      Recorder.prototype.getTime = function() {
        return this._req('GetMediaTime', 'audio');
      };

      Recorder.prototype.setTime = function(s) {
        this._req('SetMediaTime', 'audio', Math.floor(s * 1000));
        return this;
      };

      Recorder.prototype.getAudioLevel = function() {
        return this._req('GetAudioLevel', 'audio');
      };

      Recorder.prototype.upload = function() {
        return this._req('PostToForm', 'http://lingualab.io/upload', 'file', '', 'recording.spx');
      };

      return Recorder;

    })(Backbone.View);
  });

  module('App.Student', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    exports.Views = Views = {};
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'student';

      Model.prototype.idAttribute = '_id';

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "student" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('firstName')) + " " + (this.get('lastName')) + " (" + (this.get('email')) + ")";
      };

      Model.prototype.initialize = function() {};

      Model.prototype.isSelected = function() {
        return this.get('selected');
      };

      Model.prototype.toggleSelect = function() {
        return this.set('selected', !this.get('selected'));
      };

      Model.prototype.validate = function(attrs) {
        var errObj, password;
        password = attrs.password;
        errObj = {
          errors: {}
        };
        if ((attrs.password != null) && !password.match(/[^ ]{6,}/)) {
          errObj.errors.password = "password must be at least 6 characters, no spaces";
        }
        if (!_.isEmpty(errObj.errors)) {
          return errObj;
        }
      };

      Model.prototype.randomPassword = function() {};

      Model.prototype.passwordMask = function() {
        var pw;
        pw = this.get('password');
        return pw.replace(/./g, '*');
      };

      Model.prototype.match = function(query) {
        var re;
        re = new RegExp(query, 'i');
        return (re.test(this.get('firstName'))) || (re.test(this.get('lastName'))) || (re.test(this.get('email')));
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'student';

      Collection.prototype.modelType = function() {
        return "students";
      };

      Collection.prototype.initialize = function() {
        var _this = this;
        return this.io.on('connect', function() {
          return _this.fetch();
        });
      };

      Collection.prototype.selected = function() {
        return this.filter(function(s) {
          return s.isSelected();
        });
      };

      Collection.prototype.filtered = function() {
        var _this = this;
        return this.filter(function(m) {
          var _ref;
          return m.match((_ref = _this.searchTerm) != null ? _ref : '');
        });
      };

      Collection.prototype.selectedFiltered = function() {
        return _.filter(this.filtered(), function(m) {
          return m.get('selected') === true;
        });
      };

      Collection.prototype.selectFiltered = function(setTo) {
        var student, _i, _len, _ref, _results;
        if (setTo == null) {
          setTo = true;
        }
        _ref = this.filtered();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          student = _ref[_i];
          _results.push(student.set('selected', setTo));
        }
        return _results;
      };

      Collection.prototype.toggleSelectFiltered = function() {
        if (this.selectedFiltered().length === this.filtered().length) {
          return this.selectFiltered(false);
        } else if (this.selectedFiltered().length === 0) {
          return this.selectFiltered(true);
        } else {
          return this.selectFiltered(false);
        }
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        currentListView: 'list',
        searchTerm: '',
        addMode: false
      };

      UIState.prototype.toggleAddMode = function() {
        this.set('addMode', this.get('addMode'));
        return this;
      };

      return UIState;

    })(Backbone.Model);
    Views.Password = (function(_super) {

      __extends(Password, _super);

      function Password() {
        return Password.__super__.constructor.apply(this, arguments);
      }

      Password.prototype.tagName = 'input';

      Password.prototype.className = 'password';

      Password.prototype.initialize = function() {
        this._val = this.el.value;
        return this.updateInput();
      };

      Password.prototype.mask = function() {
        return this._val.replace(/./g, '*');
      };

      Password.prototype.events = {
        'focus': function() {
          this.focus = true;
          return this.updateInput();
        },
        'mouseover': function() {
          this.mouseover = true;
          return this.updateInput();
        },
        'mouseout': function() {
          this.mouseover = false;
          this._val = this.$el.val();
          return this.updateInput();
        },
        'click': function() {
          this.focus = true;
          return this.updateInput;
        },
        'blur': function() {
          this.focus = false;
          return this.updateInput();
        },
        'keyup': function() {
          return this._val = this.el.value;
        }
      };

      Password.prototype.updateInput = function() {
        this.el.value = (this.focus || this.mouseover ? this._val : this.mask());
        return this;
      };

      Password.prototype.val = function(v) {
        if (v) {
          this._val = v;
          this.updateInput();
          return this;
        } else {
          return this._val;
        }
      };

      return Password;

    })(Backbone.View);
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'student-main-view';

      Main.prototype.initialize = function() {
        var _this = this;
        this.listView = new Views.List({
          collection: this.collection
        });
        this.ui = new UIState();
        this.ui.on('change:searchTerm', function() {
          _this.collection.searchTerm = _this.$('.search-query').val();
          _this.updateBar();
          _this.renderList();
          return _this.listView.toggleNew(_this.ui.get('addMode'));
        });
        this.ui.on('change:addMode', function(v) {
          return _this.listView.toggleNew(_this.ui.get('addMode'));
        });
        this.collection.on('reset', function() {
          return _this.render();
        });
        return this.collection.on('change:selected', function(m) {
          return _this.updateBar();
        });
      };

      Main.prototype.events = {
        'keyup input.search-query': 'search',
        'click .add-students': function(e) {
          return this.ui.toggleAddMode();
        },
        'click .toggle-select-all': function() {
          return this.collection.toggleSelectFiltered();
        },
        'click .delete-students': 'deleteStudents'
      };

      Main.prototype.search = function(e) {
        var _this = this;
        clearTimeout(this.searchWait);
        return this.searchWait = wait(200, function() {
          return _this.ui.set('searchTerm', $(e.target).val());
        });
      };

      Main.prototype.deleteStudents = function() {
        var deleteConfirm;
        deleteConfirm = new UI.ConfirmDelete({
          collection: this.collection.selected()
        });
        return deleteConfirm.render().open();
      };

      Main.prototype.buttonGroupTemplate = function() {
        var numSel;
        if ((numSel = this.collection.selected().length)) {
          button({
            rel: 'tooltip',
            "class": 'btn btn-danger icon-trash delete-students',
            'title': 'delete these files'
          }, ' Delete');
        }
        return button({
          rel: 'tooltip',
          title: 'add students',
          "class": "btn btn-success icon-plus add-students " + (this.ui.get('addMode') ? 'active' : ''),
          'data-toggle': 'button'
        }, function() {
          i({
            "class": 'icon-group'
          });
          return span(' Add');
        });
      };

      Main.prototype.checkAllTemplate = function() {
        var checkClass;
        if (this.collection.selectedFiltered().length === this.collection.filtered().length) {
          checkClass = 'check icon-large';
        } else if (this.collection.selectedFiltered().length === 0) {
          checkClass = 'check-empty icon-large';
        } else {
          checkClass = 'reorder';
        }
        return div({
          "class": "icon-" + checkClass + " pull-left toggle-select-all"
        }, ' ');
      };

      Main.prototype.template = function() {
        div({
          "class": 'search-panel'
        }, function() {
          return input({
            "class": 'search-query',
            type: 'text',
            placeholder: 'search',
            value: "" + (this.ui.get('searchTerm'))
          });
        });
        return div({
          "class": 'list-panel'
        }, function() {
          div({
            "class": 'files-top-bar'
          }, function() {
            return span({
              "class": 'btn-toolbar'
            }, function() {
              span({
                "class": 'check-all-cont'
              }, function() {});
              return div({
                "class": 'btn-group pull-right'
              }, function() {});
            });
          });
          return div({
            "class": 'student-list-cont'
          }, function() {});
        });
      };

      Main.prototype.updateBar = function() {
        this.$('.check-all-cont').html(ck.render(this.checkAllTemplate, this));
        return this.$('.btn-group').html(ck.render(this.buttonGroupTemplate, this));
      };

      Main.prototype.renderList = function() {
        this.listView.render().open(this.$('.student-list-cont'));
        return this;
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.updateBar();
        this.renderList();
        this.$('button').tooltip({
          placement: 'bottom'
        });
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.List = (function(_super) {

      __extends(List, _super);

      function List() {
        this.render = __bind(this.render, this);

        this.toggleNew = __bind(this.toggleNew, this);

        this.addItem = __bind(this.addItem, this);
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.tagName = 'table';

      List.prototype.className = 'table student-list';

      List.prototype.initialize = function() {
        var _this = this;
        this.collection.on('reset', function() {
          return _this.render();
        });
        this.collection.on('add', function(item) {
          return _this.addItem(item, true);
        });
        this.newItem = new Model();
        return this.newItem.on('saved', function() {
          var newItem;
          return newItem = _this.collection.add(_this.newItem.clone());
        });
      };

      List.prototype.events = {
        'keydown thead.new-student input.password': function(e) {
          var _ref;
          if ((_ref = e.which) === 9 || _ref === 13) {
            return this.newItemView.saveNew();
          }
        }
      };

      List.prototype.template = function() {
        thead({
          "class": 'off new-student'
        }, function() {});
        return tbody(function() {});
      };

      List.prototype.addItem = function(item, prepend) {
        var $cont, $viewEl, iv;
        if (prepend == null) {
          prepend = false;
        }
        iv = new Views.ListItem({
          model: item
        });
        $cont = this.$("" + (item.isNew() ? 'thead' : 'tbody'));
        $viewEl = iv.render().$el;
        if (prepend) {
          $viewEl.prependTo($cont);
        } else {
          $viewEl.appendTo($cont);
        }
        if (item.isNew()) {
          this.newItemView = iv;
          return iv.$('input:first').focus();
        }
      };

      List.prototype.toggleNew = function(turnOff) {
        this.$('thead.new-student').toggleClass('off', turnOff);
        if (turnOff) {
          return this.$('thead.new-student input:first').focus();
        }
      };

      List.prototype.renderList = function() {
        var item, _i, _len, _ref;
        _ref = this.collection.filtered();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          this.addItem(item);
        }
        return this;
      };

      List.prototype.render = function() {
        this.$el.html(ck.render(this.template));
        this.renderList();
        this.addItem(this.newItem);
        this.delegateEvents();
        return this;
      };

      return List;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        this.showErrors = __bind(this.showErrors, this);

        this.saveNew = __bind(this.saveNew, this);

        this.saveField = __bind(this.saveField, this);
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'student-list-item list-item';

      ListItem.prototype.initialize = function() {
        var _this = this;
        this.model.on('change', function() {
          return _this.$('input').removeClass('err');
        });
        this.model.on('change:selected', function() {
          _this.model.collection.trigger('change:selected', _this.model);
          return _this.render();
        });
        this.model.on('remove', function() {
          return _this.remove();
        });
        this.model.on('error', this.showErrors);
        return this.model.on('reset', this.render());
      };

      ListItem.prototype.template = function() {
        td(function() {
          if (this.isNew()) {
            return i({
              "class": "icon-caret-right icon-large"
            });
          } else {
            return i({
              "class": "icon-check" + (!this.isSelected() ? '-empty' : '') + " select-student"
            });
          }
        });
        td(function() {
          return i({
            "class": 'icon-user icon-large'
          });
        });
        td(function() {
          var _ref;
          return input({
            'data-field': 'lastName',
            value: "" + ((_ref = this.get('lastName')) != null ? _ref : ''),
            placeholder: 'Last Name'
          });
        });
        td(function() {
          var _ref;
          return input({
            'data-field': 'firstName',
            value: "" + ((_ref = this.get('firstName')) != null ? _ref : ''),
            placeholder: 'First Name'
          });
        });
        td(function() {
          var _ref;
          return input({
            'data-field': 'email',
            value: "" + ((_ref = this.get('email')) != null ? _ref : ''),
            placeholder: 'email'
          });
        });
        td(function() {
          var _ref;
          return input({
            'data-field': 'password',
            "class": 'password',
            placeholder: 'Password',
            value: "" + ((_ref = this.get('password')) != null ? _ref : '')
          });
        });
        if (this.isNew()) {
          return td(function() {
            return i({
              "class": 'icon-plus add'
            });
          });
        } else {
          return td(function() {
            return i({
              "class": 'icon-trash delete'
            });
          });
        }
      };

      ListItem.prototype.passwordMask = function() {
        var pw;
        pw = this.$('.password').val();
        return pw.replace(/./g, '*');
      };

      ListItem.prototype.events = {
        'change input': 'saveField',
        'click .delete': 'deleteItem',
        'click .add': 'saveNew',
        'click .select-student': function() {
          return this.model.toggleSelect();
        }
      };

      ListItem.prototype.saveField = function(e) {
        var attrs, field;
        if (!this.model.isNew()) {
          field = $(e.target).attr('data-field');
          (attrs = {})[field] = field === 'password' ? this.passwordEl.val() : $(e.target).val();
          return this.model.save(attrs, {
            error: this.showErrors,
            success: this.clearErrors
          });
        }
      };

      ListItem.prototype.saveNew = function() {
        var attrs, field, fld, _i, _len, _ref,
          _this = this;
        attrs = {};
        _ref = this.$('[data-field]');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fld = _ref[_i];
          attrs[field = $(fld).attr('data-field')] = field === 'password' ? this.passwordEl.val() : $(fld).val();
        }
        return this.model.save(attrs, {
          error: this.showErrors,
          success: function() {
            _this.model.trigger('saved');
            _this.model.clear();
            return _this.render().$('input:first').focus();
          }
        });
      };

      ListItem.prototype.deleteItem = function() {
        this.deleteConfirm = new UI.ConfirmDelete({
          collection: [this.model]
        });
        return this.deleteConfirm.render().open();
      };

      ListItem.prototype.showErrors = function(model, errObj) {
        var err, fieldEl, fieldName, _ref, _results;
        this.$('.model-status').removeClass('icon-ok').addClass('icon-warning-sign');
        _ref = errObj.errors;
        _results = [];
        for (fieldName in _ref) {
          err = _ref[fieldName];
          fieldEl = this.$("input[data-field='" + fieldName + "']");
          fieldEl.addClass('err').attr('title', err);
          _results.push(fieldEl.focus());
        }
        return _results;
      };

      ListItem.prototype.render = function() {
        ListItem.__super__.render.call(this);
        this.passwordEl = new Views.Password({
          el: this.$('.password')
        });
        this.$el.toggleClass('selected', this.model.isSelected());
        return this;
      };

      return ListItem;

    })(Backbone.View);
    return _ref = [Model, Collection, UIState], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UIState = _ref[2], _ref;
  });

  module('App.Teacher', function(exports, top) {
    var Model, Views;
    window.filepicker.setKey('Ag4e6fVtyRNWgXY2t3Dccz');
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'top-bar navbar navbar-fixed-top';

      TopBar.prototype.updateNav = function() {
        var rt;
        rt = Backbone.history.fragment.split('/')[0];
        this.$('ul.nav li').removeClass('active');
        this.$("ul.nav a[href=#" + rt + "]").parent('li').addClass('active');
        return this;
      };

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          a({
            "class": 'btn btn-navbar',
            'data-toggle': 'collapse',
            'data-target': '.nav-collapse'
          }, function() {
            span({
              "class": 'icon-beaker icon-large'
            });
            return span({
              "class": 'icon-reorder icon-large'
            });
          });
          return div({
            "class": 'nav-collapse'
          }, function() {
            ul({
              "class": 'nav'
            }, function() {
              li(function() {
                return a({
                  "class": 'brand pull-left',
                  href: '#'
                }, function() {
                  return i({
                    "class": 'icon-bolt'
                  });
                });
              });
              li({
                "class": 'divider-vertical'
              });
              li(function() {
                return a({
                  href: '#files'
                }, function() {
                  i({
                    "class": 'icon-briefcase'
                  });
                  return text(' Files');
                });
              });
              li(function() {
                return a({
                  href: '#students'
                }, function() {
                  i({
                    "class": 'icon-group'
                  });
                  return text(' Students');
                });
              });
              return li(function() {
                return a({
                  href: '#lab'
                }, function() {
                  i({
                    "class": 'icon-headphones'
                  });
                  return text(' Lab');
                });
              });
            });
            return ul({
              "class": 'nav pull-right'
            }, function() {
              li({
                "class": 'user'
              }, function() {
                return span(function() {
                  img({
                    src: "" + (this.get('twitterData').profile_image_url)
                  });
                  return text(" " + (this.get('twitterData').name) + " ");
                });
              });
              li({
                "class": 'divider-vertical'
              });
              return li(function() {
                return a({
                  href: '/logout'
                }, function() {
                  return i({
                    "class": 'icon-signout'
                  });
                });
              });
            });
          });
        });
      };

      TopBar.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return TopBar;

    })(Backbone.View);
    return exports.Controller = (function(_super) {

      __extends(Controller, _super);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype.initialize = function() {
        var _this = this;
        this.extendRoutesWith(this.teacherRoutes);
        this.teacher = new Model(top.app.session.user);
        this.filez = new App.File.Collection();
        this.students = new App.Student.Collection();
        this.views = {
          topBar: new Views.TopBar({
            model: this.teacher
          }),
          filez: new App.File.Views.Main({
            collection: this.filez
          }),
          students: new App.Student.Views.Main({
            collection: this.students
          }),
          lab: new App.Lab.Views.Main
        };
        this.filez.on('selected', function(model) {
          return _this.navigate("files/" + model.id, true);
        });
        this.fromDB();
        return this.showTopBar();
      };

      Controller.prototype.teacherRoutes = {
        '/': 'home',
        'files': 'files',
        'students': 'students',
        'files/:id': 'fileDetail',
        'lab': 'lab'
      };

      Controller.prototype.fromDB = function() {
        var _this = this;
        this.io = top.app.sock;
        return this.io.on('sync', function(service, data) {
          console.log('service', service, 'data', data);
          if (service === 'file') {
            return _this.filez.fromDB(data);
          }
        });
      };

      Controller.prototype.showTopBar = function() {
        return this.views.topBar.render().open();
      };

      Controller.prototype.home = function() {
        this.clearViews();
        this.views.layout = new App.Layout.Main;
        return this.views.layout.render().open();
      };

      Controller.prototype.files = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav();
        return this.views.filez.render().open();
      };

      Controller.prototype.fileDetail = function(id) {
        this.clearViews('topBar');
        this.views.detailView = new App.File.Views.Detail({
          model: this.filez.get(id)
        });
        return this.views.detailView.render().open();
      };

      Controller.prototype.students = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav();
        return this.views.students.render().open();
      };

      Controller.prototype.lab = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav();
        return this.views.lab.render().open();
      };

      return Controller;

    })(top.App.Controller);
  });

}).call(this);
