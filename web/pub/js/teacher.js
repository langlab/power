// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module('App.File', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'file';

      Model.prototype.idAttribute = '_id';

      Model.prototype.thumbBase = "http://s3.amazonaws.com/lingualabio-media";

      Model.prototype.iconHash = {
        video: 'facetime-video',
        image: 'picture',
        pdf: 'file',
        audio: 'volume-up'
      };

      Model.prototype.src = function() {
        switch (this.get('type')) {
          case 'image':
            return this.get('imageUrl');
          case 'video':
            if (top.Modernizr.video.webm) {
              return this.get('webmUrl');
            } else if (top.Modernizr.video.h264) {
              return this.get('h264Url');
            }
            break;
          case 'audio':
            return this.get('mp3Url');
        }
      };

      Model.prototype.thumbnail = function() {
        var _ref, _ref1;
        if (this.get('type') === 'audio') {
          return '/img/mp3.png';
        } else {
          return (_ref = (_ref1 = this.get('thumbUrl')) != null ? _ref1 : this.get('imageUrl')) != null ? _ref : 'http://placehold.it/100x100';
        }
      };

      Model.prototype.icon = function() {
        if (this.get('type') === 'application') {
          return this.iconHash[this.get('ext')];
        } else {
          return this.iconHash[this.get('type')];
        }
      };

      Model.prototype.match = function(query) {
        var re;
        re = new RegExp(query, 'i');
        return true;
      };

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "file" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('title')) + ")";
      };

      Model.prototype.isSelected = function() {
        return this.get('selected');
      };

      Model.prototype.toggleSelect = function() {
        return this.set('selected', !this.get('selected'));
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'file';

      Collection.prototype.comparator = function(f) {
        return 1 / moment(f.get('modified')).valueOf();
      };

      Collection.prototype.modifiedVal = function() {
        return moment(this.get('modified')).valueOf();
      };

      Collection.prototype.filteredBy = function(searchTerm) {
        return this.filter(function(m) {
          var re;
          re = new RegExp(searchTerm, 'i');
          return re.test(m.get('title'));
        });
      };

      Collection.prototype.recUploads = function(request) {
        return this.filter(function(m) {
          return m.get('request') === request;
        });
      };

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        console.log('updating ', model);
        switch (method) {
          case 'create':
            return this.add(model);
          case 'update':
            return this.get(model._id).set(model);
          case 'progress':
            console.log('setting: ', model);
            return this.get(model._id).set(model);
          case 'status':
            return this.get(model._id).set(model);
        }
      };

      Collection.prototype.modelType = function() {
        return "files";
      };

      Collection.prototype.initialize = function() {
        var _this = this;
        return this.on('reset', function() {
          var id, _i, _len, _ref, _results;
          if (_this._selected) {
            _ref = _this._selected;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              _results.push(_this.get(id).toggleSelect());
            }
            return _results;
          }
        });
      };

      Collection.prototype.selected = function() {
        return this.filter(function(s) {
          return s.isSelected();
        });
      };

      Collection.prototype.selectionState = function() {
        var selState;
        if (this.selectedFiltered().length === this.filtered().length) {
          selState = 'all';
        } else if (this.selectedFiltered().length === 0) {
          selState = 'none';
        } else {
          selState = 'some';
        }
        return selState;
      };

      Collection.prototype.filtered = function() {
        var _this = this;
        return this.filter(function(m) {
          var _ref;
          return m.match((_ref = _this.searchTerm) != null ? _ref : '');
        });
      };

      Collection.prototype.selectedFiltered = function() {
        return _.filter(this.filtered(), function(m) {
          return m.get('selected') === true;
        });
      };

      Collection.prototype.selectFiltered = function(setTo) {
        var student, _i, _len, _ref, _results;
        if (setTo == null) {
          setTo = true;
        }
        _ref = this.filtered();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          student = _ref[_i];
          _results.push(student.set('selected', setTo));
        }
        return _results;
      };

      Collection.prototype.toggleSelectFiltered = function() {
        if (this.selectedFiltered().length === this.filtered().length) {
          return this.selectFiltered(false);
        } else if (this.selectedFiltered().length === 0) {
          return this.selectFiltered(true);
        } else {
          return this.selectFiltered(false);
        }
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        searchTerm: '',
        currentListView: 'list',
        adding: false
      };

      return UIState;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'files-main container';

      Main.prototype.selectIcons = {
        'all': 'check',
        'none': 'check-empty',
        'some': 'reorder'
      };

      Main.prototype.selectStrings = {
        'all': 'Unselect all',
        'none': 'Select all',
        'some': 'Unselect all'
      };

      Main.prototype.initialize = function() {
        var _this = this;
        this.state = new UIState;
        this.searchBox = new top.App.Teacher.Views.SearchBox;
        this.collection.on('reset', this.render, this);
        return this.collection.on('add', function(i) {
          return _this.addItem(i, true);
        });
      };

      Main.prototype.events = {
        'click .record-video': 'recordVideo',
        'click .upload-google-drive': function() {
          return this.uploadFromCloud(filepicker.SERVICES.GOOGLE_DRIVE);
        },
        'click .upload-box': function() {
          return this.uploadFromCloud(filepicker.SERVICES.BOX);
        },
        'click .upload-drop-box': function() {
          return this.uploadFromCloud(filepicker.SERVICES.DROPBOX);
        },
        'click .upload-computer': function() {
          return this.uploadFromCloud(filepicker.SERVICES.COMPUTER);
        },
        'click .upload-instagram': function() {
          return this.uploadFromCloud(filepicker.SERVICES.INSTAGRAM);
        },
        'click .upload-flickr': function() {
          return this.uploadFromCloud(filepicker.SERVICES.FLICKR);
        },
        'click .upload-url': function() {
          return this.uploadFromCloud(filepicker.SERVICES.URL);
        },
        'click .upload-find-images': function() {
          return this.uploadFromCloud(filepicker.SERVICES.IMAGE_SEARCH);
        },
        'click .delete-students': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            collection: this.collection
          });
          return dc.render().open();
        },
        'click .toggle-select-all': function() {
          return this.collection.toggleSelectFiltered();
        }
      };

      Main.prototype.controlsTemplate = function() {
        return div({
          "class": 'btn-toolbar span12'
        }, function() {
          div({
            "class": 'btn-group pull-left'
          }, function() {
            var selState;
            return button({
              "class": "btn btn-mini pull-left icon-" + this.selectIcons[selState = this.collection.selectionState()] + " toggle-select-all"
            }, " " + this.selectStrings[selState]);
          });
          div({
            "class": 'btn-group pull-right'
          }, function() {
            a({
              rel: 'tooltip',
              'data-toggle': 'dropdown',
              'data-original-title': 'Upload files from your computer or services like Box, DropBox or Google Drive',
              "class": 'btn btn-mini btn-success dropdown-toggle icon-cloud',
              href: '#'
            }, function() {
              text(' Upload from... ');
              return span({
                "class": 'caret'
              });
            });
            return ul({
              "class": 'dropdown-menu'
            }, function() {
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-computer '
                }, function() {
                  i({
                    "class": 'sbicon-home'
                  });
                  return text(' Your computer');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-box '
                }, function() {
                  i({
                    "class": 'sbicon-box'
                  });
                  return text(' Box');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-google-drive '
                }, function() {
                  i({
                    "class": 'sbicon-gdrive'
                  });
                  return text(' Google Drive');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-drop-box '
                }, function() {
                  i({
                    "class": 'sbicon-dropbox'
                  });
                  return text(' Dropbox');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-instagram '
                }, function() {
                  i({
                    "class": 'sbicon-instagram'
                  });
                  return text(' Instagram');
                });
              });
              li(function() {
                return a({
                  href: "#",
                  "class": 'upload-flickr '
                }, function() {
                  i({
                    "class": 'sbicon-flickr'
                  });
                  return text(' Flickr');
                });
              });
              return li(function() {
                return a({
                  href: "#",
                  "class": 'upload-url '
                }, function() {
                  i({
                    "class": 'icon-globe'
                  });
                  return text(' A specific URL');
                });
              });
            });
          });
          div({
            "class": 'btn-group pull-right'
          }, function() {
            a({
              rel: 'tooltip',
              'data-toggle': 'dropdown',
              'data-original-title': 'Find images and videos on the internet',
              "class": 'btn btn-mini btn-info dropdown-toggle icon-search',
              href: '#'
            }, function() {
              text(' Find ... ');
              return span({
                "class": 'caret'
              });
            });
            return ul({
              "class": 'dropdown-menu'
            }, function() {
              li(function() {
                return a({
                  href: '#',
                  "class": 'upload-find-videos'
                }, function() {
                  i({
                    "class": 'sbicon-youtube'
                  });
                  return text(' videos');
                });
              });
              return li(function() {
                return a({
                  href: "#",
                  "class": 'upload-find-images '
                }, function() {
                  i({
                    "class": 'icon-picture'
                  });
                  return text(' images');
                });
              });
            });
          });
          div({
            "class": 'btn-group pull-right'
          }, function() {
            return button({
              rel: 'tooltip',
              'data-original-title': 'You can record a video right from here!',
              "class": 'btn btn-mini btn-inverse record-video icon-facetime-video'
            }, ' Record a video');
          });
          if (this.collection.selected().length) {
            div({
              "class": 'btn-group pull-left'
            }, function() {});
            return div({
              "class": 'btn-group pull-right'
            }, function() {
              return button({
                "class": 'btn btn-mini btn-danger icon-trash delete-students'
              }, ' Delete');
            });
          }
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'message-cont'
        }, function() {});
        div({
          "class": 'controls-cont row'
        }, function() {});
        return table({
          "class": 'list-cont table'
        }, function() {
          thead({
            "class": 'new-item-cont'
          });
          return tbody({
            "class": 'list'
          }, function() {});
        });
      };

      Main.prototype.addItem = function(file, prepend) {
        var v, _ref;
        if (prepend == null) {
          prepend = false;
        }
        if (this.collection.length === 1) {
          if ((_ref = this.msg) != null) {
            _ref.remove();
          }
        }
        v = new Views.ListItem({
          model: file,
          collection: this.collection
        });
        v.render();
        if (prepend) {
          v.$el.prependTo(this.$('.list'));
        } else {
          v.$el.appendTo(this.$('.list'));
        }
        return file.on('change:selected', this.renderControls, this);
      };

      Main.prototype.fpServices = {
        'record a video': {
          service: filepicker.SERVICES.VIDEO,
          icon: 'facetime-video'
        }
      };

      Main.prototype.uploadFromCloud = function(service) {
        var _this = this;
        return window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          services: [service],
          metadata: true
        }, function(url, data) {
          console.log(data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
      };

      Main.prototype.recordVideo = function() {
        var _this = this;
        return window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          services: [filepicker.SERVICES.VIDEO],
          metadata: true
        }, function(url, data) {
          console.log(data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
      };

      Main.prototype.uploadFromComputer = function(service) {
        var _this = this;
        return window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          services: [filepicker.SERVICES.COMPUTER],
          metadata: true
        }, function(url, data) {
          console.log(data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
      };

      Main.prototype.handleFileUpload = function() {
        return console.log($('.file-picker-url').val());
      };

      Main.prototype.renderControls = function() {
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this));
        return this;
      };

      Main.prototype.renderList = function() {
        var file, _i, _len, _ref, _ref1, _results;
        this.$('.list').empty();
        _ref1 = (_ref = this.collection.filtered()) != null ? _ref : this.collection.models;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          file = _ref1[_i];
          _results.push(this.addItem(file));
        }
        return _results;
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        if (!this.collection.length) {
          this.msg = new UI.Alert({
            message: 'You have no media files to use for your activities! Click the green Add button below to get started.'
          });
          this.msg.render().open(this.$('.message-cont'));
        }
        this.renderList();
        this.renderControls();
        this.$('button').tooltip({
          placement: 'bottom'
        });
        this.searchBox.setElement($('input#search-box')[0]);
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'list-item';

      ListItem.prototype.initialize = function() {
        var _this = this;
        this.tags = new UI.TagsModal({
          tags: this.model.get('tags')
        });
        this.tags.on('change', function(arr, str) {
          return _this.model.save({
            tags: str
          });
        });
        this.model.on('change', function() {
          return _this.renderThumb();
        });
        this.model.on('change:selected', function() {
          return _this.render();
        });
        return this.model.on('remove', function() {
          return _this.remove();
        });
      };

      ListItem.prototype.events = {
        'change .title': function(e) {
          return this.model.save({
            title: $(e.target).val()
          });
        },
        'click .download-item': 'downloadItem',
        'click .select-item': function() {
          return this.model.toggleSelect();
        },
        'click .delete-item': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            model: this.model
          });
          return dc.render().open();
        },
        'click .tags-list': function() {
          var tm,
            _this = this;
          tm = new UI.TagsModal({
            tags: this.model.get('tags'),
            label: this.model.get('title')
          });
          tm.render();
          return tm.on('change', function(arr, str) {
            _this.model.save('tags', str);
            return _this.render();
          });
        }
      };

      ListItem.prototype.thumbTemplate = function() {
        if (this.get('status') !== 'finished') {
          div('processing');
          return div({
            "class": 'progress progress-striped active'
          }, function() {
            return div({
              "class": 'bar',
              style: "width: " + (this.get('prepProgress' || 5)) + "%"
            });
          });
        } else {
          if (this.thumbnail()) {
            return img({
              src: "" + (this.thumbnail()),
              "class": 'thumb'
            });
          } else {
            return i({
              "class": "icon-" + (this.icon()) + " icon-large"
            });
          }
        }
      };

      ListItem.prototype.template = function() {
        var urls;
        urls = this.get('urls');
        td(function() {
          return i({
            "class": "" + (this.isSelected() ? 'icon-check' : 'icon-check-empty') + " select-item"
          });
        });
        td({
          "class": 'thumb-cont'
        }, function() {});
        td(function() {
          div(input({
            "class": 'title span3',
            value: "" + (this.get('title'))
          }));
          return span({
            "class": 'tags-list span3'
          }, function() {
            var tag, _i, _len, _ref, _ref1, _results;
            if (this.get('tags')) {
              _ref1 = (_ref = this.get('tags')) != null ? _ref.split('|') : void 0;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                tag = _ref1[_i];
                _results.push(span({
                  "class": 'icon-tag tag'
                }, " " + tag));
              }
              return _results;
            } else {
              return span({
                "class": 'icon-tags'
              }, " +tags");
            }
          });
        });
        td("" + (moment(this.get('modified')).fromNow()));
        return td(function() {
          return span({
            "class": 'btn-group'
          }, function() {
            button({
              rel: 'tooltip',
              "class": 'btn btn-mini download-item icon-share',
              'data-original-title': 'download to your computer or another storage service'
            });
            return button({
              rel: 'tooltip',
              "class": 'btn btn-mini delete-item icon-trash',
              'data-original-title': 'delete this file'
            });
          });
        });
      };

      ListItem.prototype.deleteItem = function() {
        return this.model.destroy();
      };

      ListItem.prototype.downloadItem = function() {
        var _this = this;
        return filepicker.saveAs(this.model.src(), this.model.get('mime'), function(url) {
          return console.log('saved');
        });
      };

      ListItem.prototype.renderThumb = function() {
        return this.$('.thumb-cont').html(ck.render(this.thumbTemplate, this.model));
      };

      ListItem.prototype.render = function() {
        this.delegateEvents();
        ListItem.__super__.render.call(this);
        this.renderThumb();
        this.$('button').tooltip({
          placement: 'bottom'
        });
        return this;
      };

      return ListItem;

    })(Backbone.View);
    return _ref = [Model, Collection, UI], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UI = _ref[2], _ref;
    /*
      class Views.Main extends Backbone.View
        tagName: 'div'
        className: 'files-main container'
    
        initialize: ->
          @listView = new Views.List { collection: @collection }
    
          @ui = new UIState()
    
          @collection.on 'reset', =>
            @renderList()
    
    
    
        events:
          'click .select-browser-view': -> @ui.set 'currentListView', 'browser'
          'click .select-list-view': -> @ui.set 'currentListView', 'list'
    
          'keyup .search-query': 'search'
          'click .record-upload': 'openRecorder'
          'click .file-picker': 'openFilePicker'
    
        search: (e)->
          clearTimeout @searchWait
          @searchWait = wait 200, => @ui.set 'searchTerm', $(e.target).val()
    
    
        template: ->
              
          div class:'row files-top-bar', ->
            span class:'btn-toolbar span4', ->
              div class:'input-prepend', ->
                span class:'add-on icon-search'
                input class:'search-query span3', type:'text', placeholder:'search'
            span class:'btn-toolbar span8 pull-right', ->
              button class:'btn btn-success icon-plus file-picker pull-right', ' Add a file'
    
            
          div class:'files-list-cont span10', ->
          div class:'file-detail-cont'
    
        openFilePicker: ->
          window.filepicker.getFile '', { modal: true, persist: false, location: filepicker.SERVICES.COMPUTER }, (url,data)=>
            console.log url, data
            @collection.create new Model { title: data.filename, filename: data.filename, size: data.size, type: data.type.split('/')[0], mime: data.type, fpUrl: url }
    
        handleFileUpload: ->
          console.log $('.file-picker-url').val()
    
        openRecorder: ->
          @recorder?.remove()
          @recorder ?= new Views.Recorder()
          @recorder.render().open()
          @
    
        renderList: ->
          @listView.render().open @$('.files-list-cont')
          @
    
        render: ->
          @$el.html ck.render @template, @
          @renderList()
    
          @$('.tt').tooltip()
    
               
          @delegateEvents()
          @
    
      class Views.Recorder extends Backbone.View
        tagName: 'div'
        className: 'modal popup-recorder'
    
        template: ->
          div class:'modal-header', ->
            h2 'Record and upload your voice'
          div class:'modal-body', ->
          div class:'modal-footer', ->
            button class:'btn', ->
              text ' Nevermind'
            button class:'btn btn-success', ->
              i class:'icon-upload'
              text ' Upload it!'
    
    
        render: ->
          super()
          @recorder ?= new App.Recording.Views.Recorder()
          @recorder.render().open @$('.modal-body')
          @$el.modal('show')
          @
    
    
      class Views.List extends Backbone.View
        tagName: 'table'
        className: 'table file-list'
    
        initialize: ->
          @collection.on 'add', @addItem
    
    
          @collection.on 'reset', => @render()
    
    
        doSearch: (@searchTerm)->
          @render()
    
        template: ->
          thead ->
          tbody ->
          tfoot ->
              
    
        addItem: (f)=>
          f.listItemView?.remove()
          f.listItemView ?= new Views.ListItem { model: f }
          f.listItemView.render().open @$('tbody')
          @
        
        render: ->
          @$el.html ck.render @template, @collection
          @addItem f for f in (if @searchTerm then @collection.filteredBy(@searchTerm) else @collection.models)
    
          upl = @collection.uploadFile
          input = @$('.select-upload').browseElement()
          input.on 'change', (e)->
            for f in e.target.files
              console.log 'uploading ',f
              upl f
    
          @delegateEvents()
          @
    
    
      class Views.ListItem extends Backbone.View
        tagName: 'tr'
        className: 'list-item'
    
        initialize: ->
          @model.on 'change', => @renderThumb()
          @model.on 'remove', => @remove()
    
        events:
          'change .title': (e)->
            @model.save({ title: $(e.target).val() })
          'click .delete': 'deleteItem'
          'click .dl': 'downloadItem'
          'dblclick': -> @model.collection.trigger 'selected', @model
    
    
        thumbTemplate: ->
          if @get('status') isnt 'finished'
            div 'processing'
            div class:'progress progress-striped active', ->
              div class:'bar', style:"width: #{@get 'prepProgress' or 5}%"
          else 
            if @thumbnail()
              img src:"#{@thumbnail()}", class:'thumb'
            else
              i class:"icon-#{@icon()} icon-large"
    
        template: ->
          urls = @get('urls')
          td class:'thumb-cont', -> 
            
          td -> input class:'title', value:"#{ @get('title') }"
          td moment(@get('created')).format("MMM D h:mm:ss a")
          td class:'tags-cont', -> 
          td -> i class:'icon-share-alt dl'
          td -> i class:'icon-trash delete'
    
    
        deleteItem: ->
          @model.destroy()
    
        downloadItem: ->
          filepicker.saveAs @model.src(), @model.get('mime'), (url)->
            console.log url
    
        renderThumb: ->
          @$('.thumb-cont').html ck.render @thumbTemplate, @model
    
        render: ->
          @delegateEvents()
          super()
          @renderThumb()
          @
    
    
      class Views.Detail extends Backbone.View
        tagName: 'div'
        className: 'file-video-detail'
    
        template: ->
          switch @get 'type'
            when 'video'
              video class:'video',src:"#{@src()}"
            when 'image'
              img src:"#{@src()}"
    */

  });

  module('App.Lab', function(exports, top) {
    var Collection, Model, StudentRecording, StudentRecordings, UIState, Views, _ref;
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      return UIState;

    })(Backbone.Model);
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        this.updateState = __bind(this.updateState, this);
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'lab';

      Model.prototype.idAttribute = '_id';

      Model.prototype.initialize = function(attrs, options) {
        var throttledUpdate,
          _this = this;
        _.extend(this, options);
        this.set({
          'settings': new UIState,
          'whiteBoardA': new UIState({
            visible: false
          }),
          'whiteBoardB': new UIState,
          'mediaA': new UIState,
          'mediaB': new UIState,
          'recorder': new UIState({
            state: 'clean-slate'
          }),
          'questions': new UIState({
            visible: false
          }),
          'recordings': new StudentRecordings
        });
        this.attributes.teacherId = this.teacher.id;
        this.setState(this.teacher.get('labState'));
        throttledUpdate = _.throttle(this.updateState, 5000);
        this.students.on('change:online', function() {});
        this.get('whiteBoardA').on('change', function() {
          log('change wba');
          _this.remoteAction('whiteBoardA', 'update', _this.get('whiteBoardA').toJSON());
          return throttledUpdate();
        });
        this.get('whiteBoardB').on('change', function() {
          _this.remoteAction('whiteBoardB', 'update', _this.get('whiteBoardB').toJSON());
          return throttledUpdate();
        });
        this.get('mediaA').on('change', function() {
          _this.remoteAction('mediaA', 'update', _this.get('mediaA').toJSON());
          return throttledUpdate();
        });
        this.get('mediaB').on('change', function() {
          _this.remoteAction('mediaB', 'update', _this.get('mediaB').toJSON());
          return throttledUpdate();
        });
        this.get('recorder').on('change', function() {
          log('recorder:change');
          _this.remoteAction('recorder', 'update', _this.get('recorder').toJSON());
          return throttledUpdate();
        });
        return this.get('settings').on('change', function() {
          _this.remoteAction('settings', 'update', _this.get('settings').toJSON());
          return throttledUpdate();
        });
      };

      Model.prototype.fromDB = function(data) {
        var method, model, options, student;
        method = data.method, model = data.model, options = data.options;
        student = options.student;
        return this.students.get(student._id).trigger('recorder:state', model.recorder);
      };

      Model.prototype.setState = function(data) {
        var area, state, _results;
        _results = [];
        for (area in data) {
          state = data[area];
          log('setstate', area, state);
          _results.push(this.get(area).set(state));
        }
        return _results;
      };

      Model.prototype.addStudent = function(studentId) {
        var _this = this;
        return this.sync('add:student', null, {
          studentIds: [studentId],
          success: function(data) {
            return log('student added: ', data);
          }
        });
      };

      Model.prototype.removeStudent = function(studentId) {
        var _this = this;
        return this.sync('remove:student', null, {
          studentIds: [studentId],
          success: function(data) {
            return log('student removed', data);
          }
        });
      };

      Model.prototype.getStudents = function() {
        var _this = this;
        return this.sync('read:students', null, {
          success: function(data) {
            return log('students: ', data);
          }
        });
      };

      Model.prototype.getState = function() {
        var area, labState, state, _ref;
        labState = {};
        _ref = this.attributes;
        for (area in _ref) {
          state = _ref[area];
          labState[area] = state.attributes;
        }
        return labState;
      };

      Model.prototype.updateState = function() {
        var _this = this;
        return this.sync('update:state', this.getState(), {
          success: function(err, data) {
            return log('state updated: ', data);
          }
        });
      };

      Model.prototype.remoteAction = function(area, action, data) {
        var actionObj,
          _this = this;
        actionObj = {
          action: action
        };
        actionObj[area] = data;
        return this.sync('action', actionObj, {
          success: function(err, data) {
            return log('action complete: ', data);
          }
        });
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'lab';

      return Collection;

    })(Backbone.Collection);
    StudentRecording = (function(_super) {

      __extends(StudentRecording, _super);

      function StudentRecording() {
        return StudentRecording.__super__.constructor.apply(this, arguments);
      }

      return StudentRecording;

    })(Backbone.Model);
    StudentRecordings = (function(_super) {

      __extends(StudentRecordings, _super);

      function StudentRecordings() {
        return StudentRecordings.__super__.constructor.apply(this, arguments);
      }

      StudentRecordings.prototype.model = StudentRecording;

      return StudentRecordings;

    })(Backbone.Collection);
    _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1];
    exports.Views = Views = {};
    Views.Recording = (function(_super) {

      __extends(Recording, _super);

      function Recording() {
        return Recording.__super__.constructor.apply(this, arguments);
      }

      Recording.prototype.tagName = 'tr';

      Recording.prototype.className = 'recording';

      Recording.prototype.template = function() {
        td({
          "class": 'recording-index'
        }, "" + (1 + this.model.collection.indexOf(this.model)));
        return td({
          "class": "dur icon-" + (this.recorder.get('state') === 'stopped-recording' ? 'play' : 'ok') + " "
        }, " " + (moment.duration(this.model.get('duration')).seconds()) + "s");
      };

      Recording.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Recording;

    })(Backbone.View);
    Views.StudentUpload = (function(_super) {

      __extends(StudentUpload, _super);

      function StudentUpload() {
        return StudentUpload.__super__.constructor.apply(this, arguments);
      }

      StudentUpload.prototype.tagName = 'tr';

      StudentUpload.prototype.className = 'student-upload';

      StudentUpload.prototype.template = function() {
        var student;
        student = app.data.students.get(this.get('student'));
        td(function() {
          return i({
            "class": 'icon-comment'
          });
        });
        return td(function() {
          return "" + (student.get('name'));
        });
      };

      return StudentUpload;

    })(Backbone.View);
    Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        this.startRecordingIn = __bind(this.startRecordingIn, this);

        this.recordFor = __bind(this.recordFor, this);
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'recorder';

      Recorder.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.recTimer = new App.Activity.Timer;
        this.playTimer = new App.Activity.Timer;
        this.bigRecTimer = new App.Activity.Timer;
        this.waitTimer = new App.Activity.Timer;
        this.setTimerEvents();
        this.setStateEvents();
        this.collection.on('change', function() {
          return _this.renderRecordings();
        });
        this.collection.on('reset', function() {
          return _this.renderRecordings();
        });
        this.model.on('change:recordings', function() {
          if (_this.model.get('state') === 'submitting') {
            return _this.renderControls();
          }
        });
        return this.options.filez.on('add', function(file) {
          return _this.renderUploads();
        });
      };

      Recorder.prototype.setTimerEvents = function() {
        var _this = this;
        this.playTimer.on('tick', function(data) {
          var secs, ticks;
          return ticks = data.ticks, secs = data.secs, data;
        });
        this.playTimer.on('seek', function(data) {
          var secs, ticks;
          return ticks = data.ticks, secs = data.secs, data;
        });
        this.recTimer.on('tick', function(data) {
          var minsLeft, secs, secsLeft, ticks, timeLeft, waitText;
          ticks = data.ticks, secs = data.secs;
          if (_this.model.get('state') === 'recording-duration') {
            timeLeft = moment.duration(_this.model.get('duration') - ticks);
            secsLeft = (Math.floor(timeLeft.seconds())) + 1;
            minsLeft = Math.floor(timeLeft.minutes());
            waitText = "recording, pauses in" + (minsLeft ? ' ' + minsLeft + 'm' : '') + " " + secsLeft + "s";
            return _this.$('.time-left-recording').text(waitText);
          }
        });
        return this.waitTimer.on('tick', function(data) {
          var minsLeft, secs, secsLeft, ticks, timeLeft, waitText;
          ticks = data.ticks, secs = data.secs;
          timeLeft = moment.duration(_this.model.get('delay') - ticks);
          secsLeft = (Math.floor(timeLeft.seconds())) + 1;
          minsLeft = Math.floor(timeLeft.minutes());
          waitText = "recording in" + (minsLeft ? ' ' + minsLeft + 'm' : '') + " " + secsLeft + "s";
          return _this.$('.time-until-record').text(waitText);
        });
      };

      Recorder.prototype.setStateEvents = function() {
        var _this = this;
        return this.model.on('change:state', function(m, state) {
          console.log(state);
          _this.renderControls();
          switch (state) {
            case 'recording':
              _this.recTimer.start();
              return _this.bigRecTimer.start();
            case 'waiting-to-record':
              return _this.waitTimer.start();
            case 'recording-duration':
              _this.waitTimer.stop();
              _this.recTimer.start();
              return _this.bigRecTimer.start();
            case 'paused-recording':
              _this.collection.add({
                at: _this.bigRecTimer.currentMSecs() - _this.recTimer.currentMSecs(),
                delay: _this.model.get('delay'),
                duration: _this.recTimer.currentMSecs()
              });
              _this.recTimer.stop();
              _this.bigRecTimer.pause();
              return _this.renderRecordings();
            case 'stopped-recording':
              _this.recTimer.stop();
              _this.bigRecTimer.stop();
              return _this.renderRecordings();
            case 'playing':
              return _this.playTimer.start();
            case 'paused-playing':
              return _this.playTimer.pause();
            case 'stopped-playing':
              return _this.playTimer.stop();
            case 'clean-slate':
              _this.recTimer.stop();
              _this.playTimer.stop();
              _this.bigRecTimer.stop();
              _this.collection.reset();
              log('resetting lastSubmit');
              _this.model.set({
                lastSubmit: null
              });
              return _this.renderUploads();
            case 'submitting':
              return _this.collection.reset();
          }
        });
      };

      Recorder.prototype.events = {
        'click .start-record': function(e) {
          e.preventDefault();
          return this.startRecordingIn($(e.currentTarget).attr('data-delay'), $(e.currentTarget).attr('data-duration'));
        },
        'click .pause-record': function() {
          return this.model.set('state', 'paused-recording');
        },
        'click .stop-record': function() {
          return this.model.set('state', 'stopped-recording');
        },
        'click .start-play': function() {
          return this.model.set('state', 'playing');
        },
        'click .pause-play': function() {
          return this.model.set('state', 'paused-playing');
        },
        'click .submit-rec': function() {
          this.model.set({
            state: 'submitting',
            lastSubmit: moment().valueOf()
          });
          return this.model.set('state', 'waiting-for-recordings');
        },
        'click .trash-rec': function() {
          this.model.set('state', 'clean-slate');
          this.model.set('recStart', 0);
          return this.model.set('recStop', 0);
        }
      };

      Recorder.prototype.controlsTemplate = function() {
        var state;
        switch ((state = this.model.get('state'))) {
          case 'clean-slate':
          case 'paused-recording':
            div({
              "class": 'btn-group'
            }, function() {
              button({
                "class": 'btn btn-small btn-danger icon-certificate start-record',
                'data-delay': 0,
                'data-duration': 0
              }, " record");
              button({
                "class": 'btn btn-small btn-danger dropdown-toggle',
                'data-toggle': 'dropdown'
              }, function() {
                return span({
                  "class": 'caret'
                });
              });
              ul({
                "class": 'dropdown-menu'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 5,
                    'data-duration': 10
                  }, 'in 5s, for 10s');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 10,
                    'data-duration': 30
                  }, 'in 10s, for 30s');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 15,
                    'data-duration': 60
                  }, 'in 15s, for 1min');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 20,
                    'data-duration': 90
                  }, 'in 20s, for 1&frac12min');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 30,
                    'data-duration': 120
                  }, 'in 30s, for 2min');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 60,
                    'data-duration': 180
                  }, 'in 1min, for 3min');
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'start-record',
                    'data-delay': 60,
                    'data-duration': 240
                  }, 'in 1min, for 4min');
                });
              });
              if (state === 'paused-recording') {
                return button({
                  "class": 'btn btn-mini btn-inverse icon-sign-blank stop-record'
                }, ' fin');
              }
            });
            break;
          case 'waiting-to-record':
            div({
              "class": 'time-until-record'
            }, 'waiting to record');
            break;
          case 'recording-duration':
            div({
              "class": 'time-left-recording'
            }, 'recording for duration');
            break;
          case 'recording':
            div({
              "class": 'time-recorded'
            }, 'recording');
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-mini btn-danger icon-pause pause-record'
              }, ' pause');
            });
            break;
          case 'stopped-recording':
          case 'paused-playing':
          case 'stopped-playing':
          case 'playing':
            div({
              "class": 'time-played'
            });
            div({
              "class": 'btn-toolbar'
            }, function() {
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": "btn btn-mini btn-info " + (state === 'playing' ? 'icon-pause start-pause' : 'icon-play pause-play')
                }, ' play all');
              });
              div({
                "class": 'btn-group'
              }, function() {
                return button({
                  "class": 'btn btn-mini btn-success icon-download-alt submit-rec'
                }, ' save as');
              });
              return div({
                "class": 'btn-group pull-right'
              }, function() {
                return button({
                  "class": 'btn btn-mini btn-danger icon-trash trash-rec'
                });
              });
            });
            break;
          case 'submitting':
            log('submitting...');
            break;
          case 'waiting-for-recordings':
            div({
              "class": 'waiting-for-recordings'
            }, function() {
              if (this.model.get('recordings')) {
                return text("" + (this.model.get('student-recordings')) + " received");
              } else {
                return text("waiting on recordings...");
              }
            });
        }
        return div({
          "class": 'btn-toolbar'
        }, function() {});
      };

      Recorder.prototype.renderControls = function() {
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this.options));
        return this;
      };

      Recorder.prototype.formattedTime = function(time) {
        var mins, secs;
        mins = time.mins;
        secs = time.secs < 10 ? "0" + time.secs : time.secs;
        return "" + mins + ":" + secs;
      };

      Recorder.prototype.updateTimeRecorded = function() {
        log('time-rec');
        return this.$('.time-recorded').text(this.formattedTime(this.recTimer.currentTimeObj()));
      };

      Recorder.prototype.updateTimePlayed = function() {
        return this.$('.time-played').text(this.formattedTime(this.playTimer.currentTimeObj()));
      };

      Recorder.prototype.pauseRecording = function() {
        return this.model.set('state', 'paused-recording');
      };

      Recorder.prototype.recordFor = function(duration) {
        var _this = this;
        if (duration) {
          this.recTimer.stop();
          this.recTimer.addCues({
            at: duration,
            fn: function() {
              return _this.pauseRecording();
            }
          });
          return this.model.set({
            'state': 'recording-duration',
            'duration': duration * 1000
          });
        } else {
          return this.model.set('state', 'recording');
        }
      };

      Recorder.prototype.startRecordingIn = function(delay, duration) {
        var _this = this;
        if (delay) {
          this.waitTimer.stop();
          this.waitTimer.addCues({
            at: delay,
            fn: function() {
              return _this.recordFor(duration);
            }
          });
          return this.model.set({
            'state': 'waiting-to-record',
            'delay': delay * 1000
          });
        } else {
          return this.recordFor(duration);
        }
      };

      Recorder.prototype.renderRecordings = function() {
        var rec, rv, _i, _len, _ref1, _results;
        this.$('.student-recordings').empty();
        _ref1 = this.collection.models;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          rec = _ref1[_i];
          rv = new Views.Recording({
            model: rec,
            recorder: this.model
          });
          _results.push(rv.render().open(this.$('.student-recordings')));
        }
        return _results;
      };

      Recorder.prototype.renderUploads = function() {
        var upl, uv, _i, _len, _ref1, _results;
        this.$('.student-uploads').empty();
        _ref1 = this.options.filez.recUploads(this.model.get('lastSubmit'));
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          upl = _ref1[_i];
          uv = new Views.StudentUpload({
            model: upl
          });
          _results.push(uv.render().open(this.$('.student-uploads')));
        }
        return _results;
      };

      Recorder.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {
            return span({
              "class": 'accordion-toggle icon-comment',
              'data-toggle': 'collapse',
              'data-target': '.lab-recorder'
            }, ' Recorder');
          });
          return div({
            "class": 'collapse in lab-recorder accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              return div({
                "class": 'recorder-cont'
              }, function() {
                div({
                  "class": 'time-played'
                }, function() {});
                div({
                  "class": 'scrubber-cont'
                }, function() {});
                div({
                  "class": 'controls-cont'
                }, function() {});
                table({
                  "class": 'table table-condensed table-hover student-recordings'
                }, function() {});
                return table({
                  "class": 'table table-condensed table-hover student-uploads'
                }, function() {});
              });
            });
          });
        });
      };

      Recorder.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.renderControls();
        this.renderRecordings();
        this.renderUploads();
        return this;
      };

      return Recorder;

    })(Backbone.View);
    Views.MediaPlayer = (function(_super) {

      __extends(MediaPlayer, _super);

      function MediaPlayer() {
        return MediaPlayer.__super__.constructor.apply(this, arguments);
      }

      MediaPlayer.prototype.tagName = 'div';

      MediaPlayer.prototype.className = 'media-player';

      MediaPlayer.prototype.playbackRates = [0.5, 0.75, 1, 1.25, 1.5, 2];

      MediaPlayer.prototype.rateLabel = function(val) {
        switch (val) {
          case 0.5:
            return '&frac12;x';
          case 0.75:
            return '&frac34;x';
          case 1:
            return '1x';
          case 1.25:
            return '1&frac14;x';
          case 1.5:
            return '1&frac12;x';
          case 2:
            return '2x';
        }
      };

      MediaPlayer.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.collection.on("load:" + this.options.label, function(file) {
          _this.model.set('file', file.attributes);
          _this.model.trigger('change:file', _this.model, _this.model.get('file'));
          _this.render();
          return _this.setPcEvents();
        });
        this.on('open', function() {
          return _this.setPcEvents();
        });
        this.model.on('change:visible', function() {
          _this.$('.accordion-group').toggleClass('visible');
          return _this.$('.toggle-visible').toggleClass('icon-eye-open').toggleClass('icon-eye-close');
        });
        return this.model.on('change:muted', function(m, muted) {
          _this.$('.toggle-mute').toggleClass('icon-volume-up').toggleClass('icon-volume-off');
          return _this.pc.volume((muted ? 0.1 : 1));
        });
      };

      MediaPlayer.prototype.events = {
        'click .change-media': 'selectMedia',
        'click .speed-option': 'changeSpeed',
        'click .play': function() {
          return this.pc.play();
        },
        'click .pause': function() {
          return this.pc.pause();
        },
        'click .back-10': function() {
          return this.pc.currentTime(this.pc.currentTime() - 10);
        },
        'click .back-5': function() {
          return this.pc.currentTime(this.pc.currentTime() - 5);
        },
        'click .toggle-mute': function() {
          console.log('vol', this.pc.volume());
          return this.model.set('muted', !this.model.get('muted'));
        },
        'click .toggle-visible': function(e) {
          e.stopPropagation();
          return this.model.set('visible', !this.model.get('visible'));
        },
        'click .speed-inc': function() {
          return this.changeSpeed(1);
        },
        'click .speed-dec': function() {
          return this.changeSpeed(-1);
        }
      };

      MediaPlayer.prototype.template = function() {
        var file;
        file = this.model.get('file');
        return div({
          "class": "accordion-group" + (this.model.get('visible') ? ' visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle '
            }, function() {
              var _ref1;
              span({
                'data-toggle': 'collapse',
                'data-target': ".lab-media-" + this.label,
                "class": "media-name icon-facetime-video"
              }, " " + ((_ref1 = file != null ? file.title : void 0) != null ? _ref1 : 'Media...'));
              return span({
                "class": 'pull-right'
              }, function() {
                var _ref2;
                if ((_ref2 = file != null ? file.type : void 0) === 'audio' || _ref2 === 'video') {
                  button({
                    "class": "btn btn-mini icon-cogs"
                  });
                }
                if (file != null) {
                  text("&nbsp;&nbsp;");
                  return button({
                    "class": 'btn btn-mini change-media icon-remove'
                  });
                } else {
                  return form({
                    "class": 'navbar-search pull-right'
                  }, function() {
                    return input({
                      type: 'text',
                      "class": 'search-query input-small',
                      placeholder: 'search'
                    });
                  });
                }
              });
            });
          });
          return div({
            "class": "collapse in lab-media-" + this.label + " accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              if (file != null) {
                div({
                  "class": 'controls-cont'
                }, function() {});
                div({
                  "class": 'scrubber-cont'
                }, function() {});
                return div({
                  "class": 'media-cont'
                }, function() {});
              } else {
                return div({
                  "class": 'lab-file-list'
                }, function() {
                  return table({
                    "class": 'table table-condensed table-hover'
                  }, function() {
                    return tbody(function() {});
                  });
                });
              }
            });
          });
        });
      };

      MediaPlayer.prototype.selectMedia = function(e) {
        e.stopPropagation();
        this.model.set('file', null);
        this.model.set('visible', false);
        this.model.set('currentTime', 0);
        return this.render();
      };

      MediaPlayer.prototype.changeSpeed = function(amt) {
        var i;
        i = _.indexOf(this.playbackRates, this.pc.playbackRate());
        i = (i + amt === this.playbackRates.length) || (i + amt < 0) ? i : i + amt;
        return this.pc.playbackRate(this.playbackRates[i]);
      };

      MediaPlayer.prototype.formattedTime = function() {
        var min, secs, totalSecs;
        totalSecs = Math.floor(this.pc.currentTime());
        min = Math.floor(totalSecs / 60);
        secs = totalSecs % 60;
        return "" + min + ":" + secs;
      };

      MediaPlayer.prototype.controlsTemplate = function() {
        return div({
          "class": 'btn-toolbar span12'
        }, function() {
          var type;
          if ((type = this.model.get('file').type) === 'image') {
            return div({
              "class": "btn-group pull-right"
            }, function() {
              return button({
                "class": "btn btn-mini pull-left icon-eye-" + (this.model.get('visible') ? 'open' : 'close') + " toggle-visible"
              });
            });
          } else if (type === 'audio' || type === 'video') {
            div({
              "class": 'btn-group pull-left'
            }, function() {
              button({
                "class": "btn btn-mini" + (this.pc.playbackRate() === 0.5 ? ' disabled' : '') + " icon-caret-left speed-dec"
              });
              button({
                "class": 'btn btn-mini disabled speed'
              }, " " + (this.rateLabel(this.pc.playbackRate())) + " speed");
              return button({
                "class": "btn btn-mini" + (this.pc.playbackRate() === 2 ? ' disabled' : '') + " icon-caret-right speed-inc"
              });
            });
            div({
              "class": 'btn-group'
            }, function() {
              return span({
                "class": 'time'
              }, "" + (this.formattedTime()));
            });
            div({
              "class": 'btn-group'
            }, function() {
              button({
                "class": "btn btn-mini pull-left icon-eye-" + (this.model.get('visible') ? 'open' : 'close') + " toggle-visible"
              });
              return button({
                "class": "btn btn-mini icon-volume-" + (this.model.get('muted') ? 'off' : 'up') + " pull-left toggle-mute"
              });
            });
            return div({
              "class": 'btn-group pull-right'
            }, function() {
              if (this.pc.paused()) {
                return div({
                  "class": 'btn btn-mini btn-success icon-play play'
                }, " play");
              } else {
                return div({
                  "class": 'btn btn-mini icon-pause pause'
                }, " pause");
              }
            });
          }
        });
      };

      MediaPlayer.prototype.avTemplate = function() {
        return video({
          "class": "" + this.file.type + "-type"
        }, function() {
          if (this.file.type === 'video') {
            source({
              src: "" + this.file.webmUrl
            });
            source({
              src: "" + this.file.h264Url
            });
          }
          if (this.file.type === 'audio') {
            return source({
              src: "" + this.file.mp3Url
            });
          }
        });
      };

      MediaPlayer.prototype.renderControls = function() {
        console.log('render cntrols');
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this));
        return this;
      };

      MediaPlayer.prototype.renderScrubber = function() {
        var _this = this;
        this.scrubber.render().open(this.$('.scrubber-cont'));
        return this.scrubber.on('change', function(v) {
          console.log('change scrubber', v);
          return _this.pc.currentTime(v / 1000);
        });
      };

      MediaPlayer.prototype.setPcEvents = function() {
        var _ref1, _ref2,
          _this = this;
        console.log('ev');
        if ((_ref1 = (_ref2 = this.model.get('file')) != null ? _ref2.type : void 0) === 'video' || _ref1 === 'audio') {
          this.pc = new Popcorn(this.$('.media-cont video')[0]);
          this.pc.on('canplay', function() {
            _this.renderControls();
            _this.pc.currentTime(_this.model.get('currentTime'));
            _this.pc.playbackRate(_this.model.get('playbackRate'));
            _this.scrubber = new UI.Slider({
              max: _this.pc.duration() * 1000
            });
            return _this.renderScrubber();
          });
          this.pc.on('playing', function() {
            _this.model.set({
              currentTime: _this.pc.currentTime()
            }, {
              silent: true
            });
            _this.model.set('state', 'playing');
            return _this.renderControls();
          });
          this.pc.on('pause', function() {
            _this.model.set({
              currentTime: _this.pc.currentTime()
            }, {
              silent: true
            });
            _this.model.set('state', 'paused');
            return _this.renderControls();
          });
          this.pc.on('ended', function() {
            _this.model.set('event', 'ended');
            return _this.renderScrubber();
          });
          this.pc.on('seeking', function() {
            return _this.model.set({
              currentTime: _this.pc.currentTime(),
              event: 'seeking'
            });
          });
          this.pc.on('ratechange', function() {
            console.log('rate change');
            _this.model.set('playbackRate', _this.pc.playbackRate());
            return _this.renderControls();
          });
          return this.pc.on('timeupdate', function() {
            _this.model.set({
              currentTime: _this.pc.currentTime()
            }, {
              silent: true
            });
            _this.scrubber.setVal(_this.pc.currentTime() * 1000);
            return _this.$('.time').text(_this.formattedTime());
          });
        }
      };

      MediaPlayer.prototype.render = function() {
        var file, fv, imgEl, _i, _len, _ref1;
        file = this.model.get('file');
        this.$el.html(ck.render(this.template, this.options));
        if (!(file != null)) {
          _ref1 = this.collection.models;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            file = _ref1[_i];
            fv = new Views.LabFile({
              model: file,
              label: this.options.label
            });
            fv.render().open(this.$('.lab-file-list tbody'));
          }
        } else {
          switch (file.type) {
            case 'image':
              imgEl = $('<img/>').attr('src', file.imageUrl);
              imgEl.appendTo(this.$('.media-cont'));
              this.renderControls();
              break;
            case 'video':
            case 'audio':
              this.$('.media-cont').html(ck.render(this.avTemplate, this.model.attributes));
          }
        }
        return this;
      };

      return MediaPlayer;

    })(Backbone.View);
    Views.LabStudent = (function(_super) {

      __extends(LabStudent, _super);

      function LabStudent() {
        return LabStudent.__super__.constructor.apply(this, arguments);
      }

      LabStudent.prototype.tagName = 'tr';

      LabStudent.prototype.className = 'lab-student';

      LabStudent.prototype.recorderStates = {
        'submitting': 'rss',
        'submitted': 'download-alt',
        'none': '',
        'recording': 'comment',
        'recording-duration': 'comment'
      };

      LabStudent.prototype.initialize = function() {
        var _this = this;
        this.model.on('change:online', function(student, online) {
          _this.$el.toggleClass('online', online);
          return _this.model.collection.trigger('change:online', _this.model);
        });
        this.model.on('change:help', function(student, help) {
          _this.$el.toggleClass('help', help);
          _this.render();
          _this.model.collection.trigger('help');
          if (help) {
            return _this.sfx('sos');
          }
        });
        return this.model.on('recorder:state', function(recorder) {
          return _this.$('.recorder-state i').removeClass().addClass("icon-" + _this.recorderStates[recorder.state]);
        });
      };

      LabStudent.prototype.events = {
        'click .toggle-control': function() {
          this.model.toggleControl();
          return this.model.collection.trigger('change:control');
        }
      };

      LabStudent.prototype.template = function() {
        var recorderState, _ref1, _ref2;
        recorderState = (_ref1 = (_ref2 = this.model.get('teacherLabState')) != null ? _ref2.recorder.state : void 0) != null ? _ref1 : 'none';
        log('recstate:', recorderState);
        td(function() {
          return button({
            'data-id': "" + this.model.id,
            "class": "btn btn-mini icon-hand-up box toggle-control " + (this.model.get('control') ? 'active' : ''),
            'data-toggle': 'button'
          });
        });
        td(function() {
          return i({
            "class": "online-status icon-" + (this.model.get('help') ? 'bullhorn' : 'heart') + " " + (this.model.get('online') ? 'online' : '') + (this.model.get('help') ? ' help' : '')
          });
        });
        td({
          "class": 'recorder-state'
        }, function() {
          return i({
            "class": "icon-" + this.recorderStates[recorderState]
          });
        });
        return td("" + (this.model.get('name')));
      };

      LabStudent.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.$el.toggleClass('help', this.model.get('help'));
        this.$el.toggleClass('online', this.model.get('online'));
        return this;
      };

      return LabStudent;

    })(Backbone.View);
    Views.LabFile = (function(_super) {

      __extends(LabFile, _super);

      function LabFile() {
        return LabFile.__super__.constructor.apply(this, arguments);
      }

      LabFile.prototype.tagName = 'tr';

      LabFile.prototype.className = 'lab-file';

      LabFile.prototype.initialize = function(options) {
        this.options = options;
      };

      LabFile.prototype.events = {
        'click': function() {
          return this.model.collection.trigger("load:" + this.options.label, this.model);
        }
      };

      LabFile.prototype.template = function() {
        td(function() {
          return img({
            src: "" + (this.thumbnail())
          });
        });
        return td(function() {
          return div("" + (this.get('title')));
        });
      };

      return LabFile;

    })(Backbone.View);
    Views.WhiteBoard = (function(_super) {

      __extends(WhiteBoard, _super);

      function WhiteBoard() {
        return WhiteBoard.__super__.constructor.apply(this, arguments);
      }

      WhiteBoard.prototype.tagName = 'div';

      WhiteBoard.prototype.className = 'lab-whiteboard';

      WhiteBoard.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.editor = new UI.HtmlEditor({
          html: this.model.get('html')
        });
        /*
              @on 'open', =>
                @editor.open @$('.wb-cont')
        */

        return this.model.on('change:visible', function() {
          _this.$('.accordion-group').toggleClass('visible');
          _this.$('.toggle-visible').toggleClass('icon-eye-close').toggleClass('icon-eye-open');
          return _this.$('.editor-area').toggleClass('visible');
        });
      };

      WhiteBoard.prototype.events = {
        'keyup .editor-area': 'update',
        'click button, a': 'update',
        'click .accordion-group': function() {
          return this.model.set('open', !this.model.get('open'));
        },
        'click .toggle-visible': function(e) {
          e.stopPropagation();
          return this.model.set('visible', !this.model.get('visible'));
        }
      };

      WhiteBoard.prototype.update = function() {
        return this.model.set('html', this.editor.simplifiedHTML());
      };

      WhiteBoard.prototype.template = function() {
        return div({
          "class": "accordion-group " + (this.model.get('visible') ? 'visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle icon-edit',
              'data-toggle': 'collapse',
              'data-target': ".lab-wb-" + this.label
            }, function() {
              text(" Whiteboard " + this.label);
              return span({
                "class": 'btn-group pull-right'
              }, function() {});
            });
          });
          return div({
            "class": "collapse" + (this.model.get('open') ? ' in' : '') + " lab-wb-" + this.label + " accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner wb-cont'
            }, function() {
              return div({
                "class": "wb-cont-" + this.label
              }, function() {});
            });
          });
        });
      };

      WhiteBoard.prototype.eyeTemplate = function() {
        var _ref1;
        return button({
          "class": "btn btn-mini icon-eye-" + (((_ref1 = this.model) != null ? _ref1.get('visible') : void 0) ? 'open' : 'close') + " toggle-visible"
        });
      };

      WhiteBoard.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.editor.render().open(this.$(".wb-cont-" + this.options.label));
        this.$('.wb-header .right-group').html(ck.render(this.eyeTemplate, this.options));
        this.$('.editor-area').toggleClass('visible', this.model.get('visible'));
        return this;
      };

      return WhiteBoard;

    })(Backbone.View);
    Views.Questions = (function(_super) {

      __extends(Questions, _super);

      function Questions() {
        return Questions.__super__.constructor.apply(this, arguments);
      }

      Questions.prototype.tagName = 'div';

      Questions.prototype.className = 'lab-questions-main';

      Questions.prototype.initialize = function(options) {
        this.options = options;
      };

      Questions.prototype.template = function() {
        return div({
          "class": "accordion-group " + (this.model.get('visible') ? 'visible' : '')
        }, function() {
          div({
            "class": 'accordion-heading'
          }, function() {
            return span({
              "class": 'accordion-toggle icon-edit',
              'data-toggle': 'collapse',
              'data-target': ".lab-questions"
            }, function() {
              text(" Questions");
              return span({
                "class": 'btn-group pull-right'
              }, function() {});
            });
          });
          return div({
            "class": "collapse" + (this.model.get('open') ? ' in' : '') + " lab-questions accordion-body"
          }, function() {
            return div({
              "class": 'accordion-inner questions-cont'
            }, function() {
              return text("blarg");
            });
          });
        });
      };

      Questions.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        return this;
      };

      return Questions;

    })(Backbone.View);
    Views.Students = (function(_super) {

      __extends(Students, _super);

      function Students() {
        return Students.__super__.constructor.apply(this, arguments);
      }

      Students.prototype.initialize = function(options) {
        var _this = this;
        this.collection.on('help', function() {
          return _this.renderHeading();
        });
        return this.collection.on('change:control', this.render, this);
      };

      Students.prototype.headingTemplate = function() {
        return span({
          "class": 'accordion-toggle icon-group',
          'data-toggle': 'collapse',
          'data-target': '.lab-students'
        }, function() {
          span({
            "class": ''
          }, ' Students');
          return span({
            "class": 'pull-right'
          }, function() {
            var needHelp;
            if ((needHelp = this.collection.studentsNeedingHelp())) {
              return span({
                "class": 'icon-bullhorn need-help'
              }, " " + needHelp);
            }
          });
        });
      };

      Students.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {});
          return div({
            "class": 'collapse in lab-students accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              return table({
                "class": 'table table-condensed table-hover lab-student-list'
              }, function() {
                tbody({
                  "class": 'control'
                });
                return tbody({
                  "class": 'no-control'
                });
              });
            });
          });
        });
      };

      Students.prototype.renderHeading = function() {
        this.$('.accordion-heading').html(ck.render(this.headingTemplate, this.options));
        return this;
      };

      Students.prototype.renderStudentsList = function() {
        var stu, sv, _i, _j, _len, _len1, _ref1, _ref2, _results;
        _ref1 = this.collection.controlled();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          stu = _ref1[_i];
          sv = new Views.LabStudent({
            model: stu
          });
          sv.render().open(this.$('.lab-student-list tbody.control'));
        }
        _ref2 = this.collection.notControlled();
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          stu = _ref2[_j];
          sv = new Views.LabStudent({
            model: stu
          });
          _results.push(sv.render().open(this.$('.lab-student-list tbody.no-control')));
        }
        return _results;
      };

      Students.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.renderHeading();
        this.renderStudentsList();
        return this;
      };

      return Students;

    })(Backbone.View);
    Views.Settings = (function(_super) {

      __extends(Settings, _super);

      function Settings() {
        return Settings.__super__.constructor.apply(this, arguments);
      }

      Settings.prototype.tagName = 'div';

      Settings.prototype.className = 'lab-setting-main';

      Settings.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        console.log(this.model.get('tags'));
        this.tags = new UI.Tags({
          tags: this.model.get('tags')
        });
        return this.tags.on('change', function(arr, str) {
          console.log(str);
          return _this.model.set('tags', str);
        });
      };

      Settings.prototype.template = function() {
        return div({
          "class": 'accordion-group'
        }, function() {
          div({
            "class": 'accordion-heading '
          }, function() {
            return span({
              "class": 'accordion-toggle icon-wrench',
              'data-toggle': 'collapse',
              'data-target': '.lab-settings'
            }, ' Lab Settings');
          });
          return div({
            "class": 'collapse in lab-settings accordion-body'
          }, function() {
            return div({
              "class": 'accordion-inner'
            }, function() {
              return form({
                "class": 'form-inline'
              }, function() {
                label("Enter some tags that you want attached to student submissions:");
                return div({
                  "class": 'act-tags-cont'
                }, function() {});
              });
            });
          });
        });
      };

      Settings.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.tags.render().open(this.$('.act-tags-cont'));
        return this;
      };

      return Settings;

    })(Backbone.View);
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'lab-view container';

      Main.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.wbA = new Views.WhiteBoard({
          label: 'A',
          model: this.model.get('whiteBoardA')
        });
        this.wbB = new Views.WhiteBoard({
          label: 'B',
          model: this.model.get('whiteBoardB')
        });
        this.recorder = new Views.Recorder({
          model: this.model.get('recorder'),
          collection: this.model.get('recordings'),
          filez: this.model.filez,
          students: this.model.students
        });
        this.mediaA = new Views.MediaPlayer({
          collection: this.model.filez,
          model: this.model.get('mediaA'),
          label: 'A'
        });
        this.mediaB = new Views.MediaPlayer({
          collection: this.model.filez,
          model: this.model.get('mediaB'),
          label: 'B'
        });
        this.questions = new Views.Questions({
          model: this.model.get('questions')
        });
        this.settings = new Views.Settings({
          model: this.model.get('settings')
        });
        this.students = new Views.Students({
          collection: this.model.students
        });
        return this.recorder.model.on('change:state', function(model, state) {
          var _ref1, _ref2, _ref3, _ref4;
          console.log('recorder change: ', state);
          if (state === 'recording' || state === 'waiting-to-record') {
            if ((_ref1 = _this.mediaA.pc) != null) {
              _ref1.pause();
            }
            if ((_ref2 = _this.mediaB.pc) != null) {
              _ref2.pause();
            }
          }
          if (state === 'paused-recording') {
            if ((_ref3 = _this.mediaA.pc) != null) {
              _ref3.play();
            }
            return (_ref4 = _this.mediaB.pc) != null ? _ref4.play() : void 0;
          }
        });
      };

      Main.prototype.events = {
        'click [data-toggle=collapse]': function(e) {
          return $(e.currentTarget).parent('.accordion-group').toggleClass('open');
        }
      };

      Main.prototype.template = function() {
        return div({
          "class": 'row-fluid'
        }, function() {
          div({
            "class": 'span3'
          }, function() {
            div({
              "class": 'lab-settings-cont'
            }, function() {});
            div({
              "class": 'lab-recorder-cont'
            }, function() {});
            return div({
              "class": 'lab-students-cont'
            }, function() {});
          });
          div({
            "class": 'span4'
          }, function() {
            div({
              "class": 'lab-media-a-cont'
            }, function() {});
            return div({
              "class": 'lab-media-b-cont'
            }, function() {});
          });
          return div({
            "class": 'span5 content'
          }, function() {
            div({
              "class": 'lab-whiteboard-a-cont'
            }, function() {});
            div({
              "class": 'lab-whiteboard-b-cont'
            }, function() {});
            return div({
              "class": 'lab-questions-cont'
            }, function() {});
          });
        });
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        this.mediaA.render().open(this.$('.lab-media-a-cont'));
        this.mediaB.render().open(this.$('.lab-media-b-cont'));
        this.wbA.render().open(this.$('.lab-whiteboard-a-cont'));
        this.wbB.render().open(this.$('.lab-whiteboard-b-cont'));
        this.recorder.render().open(this.$('.lab-recorder-cont'));
        this.settings.render().open(this.$('.lab-settings-cont'));
        this.students.render().open(this.$('.lab-students-cont'));
        this.questions.render().open(this.$('.lab-questions-cont'));
        return this;
      };

      return Main;

    })(Backbone.View);
  });

  module('App.Student', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    exports.Views = Views = {};
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'student';

      Model.prototype.idAttribute = '_id';

      Model.prototype.initialize = function() {};

      Model.prototype.getLoginKey = function(cb) {
        return this.sync('getLoginKey', this.toJSON(), {
          error: cb,
          success: cb
        });
      };

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "student" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('name')) + " (" + (this.get('email')) + ")";
      };

      Model.prototype.isSelected = function() {
        return this.get('selected');
      };

      Model.prototype.toggleSelect = function() {
        return this.set('selected', !this.get('selected'));
      };

      Model.prototype.randomPassword = function() {};

      Model.prototype.passwordMask = function() {
        var pw;
        pw = this.get('password');
        return pw.replace(/./g, '*');
      };

      Model.prototype.match = function(query) {
        var re;
        re = new RegExp(query, 'i');
        return (re.test(this.get('name'))) || (re.test(this.get('email')));
      };

      Model.prototype.changePennies = function(byAmount, cb) {
        var _this = this;
        return this.sync('changePennies', this.toJSON(), {
          byAmount: byAmount,
          error: function(m, err) {
            return console.log(err);
          },
          success: function(m, resp) {
            console.log('success', m, resp);
            return _this.set('piggyBank', m.piggyBank);
          }
        });
      };

      Model.prototype.toggleControl = function() {
        var _this = this;
        return this.sync('changeControl', null, {
          ids: [this.id],
          control: !this.get('control'),
          success: function() {}
        });
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'student';

      Collection.prototype._selected = [];

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        console.log('fromDB: ', data);
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'online':
            return this.get(model._id).set('online', model.online);
          case 'control':
            return this.get(model._id).set('control', model.control);
          case 'help':
            return this.get(model._id).set('help', model.help);
        }
      };

      Collection.prototype.modelType = function() {
        return "students";
      };

      Collection.prototype.studentsNeedingHelp = function() {
        return (this.filter(function(s) {
          return s.get('help');
        })).length;
      };

      Collection.prototype.initialize = function() {
        var _this = this;
        return this.on('reset', function() {
          var id, _i, _len, _ref, _results;
          if (_this._selected) {
            _ref = _this._selected;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              _results.push(_this.get(id).toggleSelect());
            }
            return _results;
          }
        });
      };

      Collection.prototype.selected = function() {
        return this.filter(function(s) {
          return s.isSelected();
        });
      };

      Collection.prototype.selectionState = function() {
        var selState;
        if (this.selectedFiltered().length === this.filtered().length) {
          selState = 'all';
        } else if (this.selectedFiltered().length === 0) {
          selState = 'none';
        } else {
          selState = 'some';
        }
        return selState;
      };

      Collection.prototype.filtered = function() {
        var _this = this;
        return this.filter(function(m) {
          var _ref;
          return m.match((_ref = _this.searchTerm) != null ? _ref : '');
        });
      };

      Collection.prototype.selectedFiltered = function() {
        return _.filter(this.filtered(), function(m) {
          return m.get('selected') === true;
        });
      };

      Collection.prototype.selectFiltered = function(setTo) {
        var student, _i, _len, _ref, _results;
        if (setTo == null) {
          setTo = true;
        }
        _ref = this.filtered();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          student = _ref[_i];
          _results.push(student.set('selected', setTo));
        }
        return _results;
      };

      Collection.prototype.controlled = function() {
        var _this = this;
        return this.filter(function(m) {
          return m.get('control');
        });
      };

      Collection.prototype.notControlled = function() {
        var _this = this;
        return this.filter(function(m) {
          return !m.get('control');
        });
      };

      Collection.prototype.selectedControlled = function() {
        return _.filter(this.selected(), function(m) {
          return m.get('control') === true;
        });
      };

      Collection.prototype.toggleSelectFiltered = function() {
        if (this.selectedFiltered().length === this.filtered().length) {
          return this.selectFiltered(false);
        } else if (this.selectedFiltered().length === 0) {
          return this.selectFiltered(true);
        } else {
          return this.selectFiltered(false);
        }
      };

      Collection.prototype.toggleControl = function() {
        var _this = this;
        return this.sync('changeControl', null, {
          ids: _.pluck(this.selected(), 'id'),
          control: this.selectedControlled().length !== this.selected().length,
          success: function() {}
        });
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        currentListView: 'list',
        searchTerm: '',
        addMode: false
      };

      UIState.prototype.toggleAddMode = function() {
        this.set('addMode', this.get('addMode'));
        return this;
      };

      return UIState;

    })(Backbone.Model);
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'student-main container';

      Main.prototype.initialize = function() {
        var _this = this;
        this.state = new UIState;
        this.searchBox = new top.App.Teacher.Views.SearchBox;
        this.collection.on('reset', this.render, this);
        this.collection.on('add', function(i) {
          _this.addItem(i, true);
          return _this.renderControls();
        });
        this.collection.on('remove', function() {
          return _this.renderControls();
        });
        this.collection.on('saved', function() {
          var fm;
          fm = new UI.FlashMessage({
            message: 'changes saved',
            type: 'success',
            time: 1000,
            cont: _this.$('.message-cont')
          });
          return fm.render();
        });
        this.state.on('change:adding', function(m, v) {
          return _this.quickAdd();
        });
        this.searchBox.on('change', function(v) {
          _this.collection.searchTerm = v;
          _this.renderControls();
          return _this.renderList();
        });
        return this.newItem = new Views.NewListItem({
          collection: this.collection
        });
      };

      Main.prototype.events = {
        'click .add-students': function() {
          return this.state.set('adding', !this.state.get('adding'));
        },
        'click .delete-students': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            collection: this.collection
          });
          return dc.render().open();
        },
        'click .email-students': function() {
          var es;
          es = new Views.EmailStudents({
            collection: this.collection
          });
          return es.render().open();
        },
        'click .passwords': function() {
          var pws;
          pws = new Views.Passwords({
            collection: this.collection
          });
          return pws.render();
        },
        'click .toggle-select-all': function() {
          return this.collection.toggleSelectFiltered();
        },
        'click .control-students': function() {
          return this.collection.toggleControl();
        }
      };

      Main.prototype.selectIcons = {
        'all': 'check',
        'none': 'check-empty',
        'some': 'reorder'
      };

      Main.prototype.selectStrings = {
        'all': 'Unselect all',
        'none': 'Select all',
        'some': 'Unselect all'
      };

      Main.prototype.search = function(e) {
        var _this = this;
        clearTimeout(this.searchWait);
        return this.searchWait = wait(200, function() {
          return _this.state.set('searchTerm', $(e.target).val());
        });
      };

      Main.prototype.quickAdd = function() {
        if (this.state.get('adding')) {
          this.newItem.render().open(this.$('.new-item-cont'));
          this.newItem.focus();
          return this.newItem.delegateEvents();
        } else {
          return this.newItem.remove();
        }
      };

      Main.prototype.controlsTemplate = function() {
        return div({
          "class": 'btn-toolbar span12'
        }, function() {
          div({
            "class": 'btn-group pull-left message-cont'
          }, function() {
            var selState;
            return button({
              "class": "btn btn-mini pull-left icon-" + this.selectIcons[selState = this.collection.selectionState()] + " toggle-select-all"
            }, " " + this.selectStrings[selState]);
          });
          div({
            "class": 'btn-group pull-right'
          }, function() {
            return button({
              "class": "btn btn-mini btn-success icon-plus add-students " + (this.state.get('adding') ? 'active' : ''),
              'data-toggle': 'button'
            }, ' Quick add');
          });
          if (this.collection.selected().length) {
            div({
              "class": 'btn-group pull-left'
            }, function() {
              button({
                "class": 'btn btn-mini btn-info icon-envelope email-students'
              }, ' Email');
              button({
                "class": 'btn btn-mini btn-warning icon-key passwords'
              }, ' Passwords');
              button({
                "class": 'btn btn-mini icon-heart heartbeats'
              }, ' Heartbeats');
              return button({
                "class": "btn btn-mini control-students icon-hand-up " + (this.collection.selectedControlled().length === this.collection.selected().length ? 'active' : ''),
                'data-toggle': 'button'
              }, ' Control lab');
            });
            return div({
              "class": 'btn-group pull-right'
            }, function() {
              return button({
                "class": 'btn btn-mini btn-danger icon-trash delete-students'
              }, ' Delete');
            });
          }
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'controls-cont row'
        }, function() {});
        return table({
          "class": 'list-cont table'
        }, function() {
          thead({
            "class": 'new-item-cont'
          });
          return tbody({
            "class": 'list'
          }, function() {});
        });
      };

      Main.prototype.addItem = function(stu, prepend) {
        var v;
        if (prepend == null) {
          prepend = false;
        }
        v = new Views.ListItem({
          model: stu,
          collection: this.collection
        });
        v.render();
        if (prepend) {
          v.$el.prependTo(this.$('.list'));
        } else {
          v.$el.appendTo(this.$('.list'));
        }
        return stu.on('change:selected', this.renderControls, this);
      };

      Main.prototype.renderControls = function() {
        this.$('.controls-cont').html(ck.render(this.controlsTemplate, this));
        return this;
      };

      Main.prototype.renderList = function() {
        var stu, _i, _len, _ref, _ref1;
        this.$('.list').empty();
        _ref1 = (_ref = this.collection.filtered()) != null ? _ref : this.collection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          stu = _ref1[_i];
          this.addItem(stu);
        }
        return this.quickAdd();
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this));
        this.$('.message').alert('close');
        this.renderList();
        this.renderControls();
        this.searchBox.setElement($('input#search-box')[0]);
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.NewListItem = (function(_super) {

      __extends(NewListItem, _super);

      function NewListItem() {
        this.clearErrors = __bind(this.clearErrors, this);

        this.showErrors = __bind(this.showErrors, this);
        return NewListItem.__super__.constructor.apply(this, arguments);
      }

      NewListItem.prototype.tagName = 'tr';

      NewListItem.prototype.className = 'list-item';

      NewListItem.prototype.initialize = function() {};

      NewListItem.prototype.events = {
        'click .add-item': 'addItem',
        'keydown input.email': function(e) {
          var _ref;
          console.log(e.which + ' pressed');
          if (((_ref = e.which) === 9 || _ref === 13) && !e.shiftKey) {
            console.log('calling additem');
            return this.addItem();
          }
        }
      };

      NewListItem.prototype.showErrors = function(model, errObj) {
        var err, fieldEl, fieldName, _ref, _results;
        _ref = errObj.errors;
        _results = [];
        for (fieldName in _ref) {
          err = _ref[fieldName];
          fieldEl = this.$("input." + fieldName);
          fieldEl.addClass('err');
          this.$(".control-group." + fieldName + " .help-block").text("" + err.type);
          _results.push(fieldEl.focus());
        }
        return _results;
      };

      NewListItem.prototype.clearErrors = function(x, y) {
        this.$('.control-group .help-block').text('');
        this.collection.trigger('saved');
        return this.clear().focus();
      };

      NewListItem.prototype.focus = function() {
        return this.$('input:first').focus();
      };

      NewListItem.prototype.addItem = function() {
        return this.collection.create({
          name: this.$('input.name').val(),
          email: this.$('input.email').val()
        }, {
          wait: true,
          error: this.showErrors,
          success: this.clearErrors
        });
      };

      NewListItem.prototype.clear = function() {
        this.$('input.name').val('');
        this.$('input.email').val('');
        return this;
      };

      NewListItem.prototype.template = function() {
        td(function() {
          return i({
            "class": 'icon-caret-right'
          });
        });
        td(function() {
          return i({
            "class": 'icon-user'
          });
        });
        td(function() {
          return div({
            "class": 'control-group name'
          }, function() {
            input({
              type: 'text span3',
              placeholder: 'name',
              "class": 'name'
            });
            return span({
              "class": 'help-block'
            });
          });
        });
        td(function() {
          return div({
            "class": 'control-group email'
          }, function() {
            input({
              type: 'text span3',
              placeholder: 'email',
              "class": 'email'
            });
            return span({
              "class": 'help-block'
            });
          });
        });
        td(function() {});
        return td(function() {
          return i({
            "class": 'icon-plus add-item'
          });
        });
      };

      NewListItem.prototype.render = function() {
        NewListItem.__super__.render.call(this);
        console.log('render called');
        return this;
      };

      return NewListItem;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        this.clearErrors = __bind(this.clearErrors, this);

        this.showErrors = __bind(this.showErrors, this);
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'list-item';

      ListItem.prototype.initialize = function() {
        var _this = this;
        this.tags = new UI.Tags({
          tags: this.model.get('tags')
        });
        this.tags.on('change', function(arr, str) {
          return _this.model.save({
            tags: str
          }, {
            error: _this.showErrors,
            success: function() {}
          });
        });
        this.model.on('change', function() {
          return _this.render();
        });
        return this.model.on('remove', this.remove, this);
      };

      ListItem.prototype.events = {
        'click .select-item': function() {
          return this.model.toggleSelect();
        },
        'click .delete-item': function() {
          var dc;
          dc = new UI.ConfirmDelete({
            model: this.model
          });
          return dc.render().open();
        },
        'click .manage-password': function() {
          var managePassword;
          managePassword = new Views.ManagePassword({
            model: this.model
          });
          return managePassword.render().open();
        },
        'change .name': function() {
          return this.model.save({
            name: this.$('input.name').val()
          }, {
            error: this.showErrors,
            success: this.clearErrors
          });
        },
        'change .email': function() {
          return this.model.save({
            email: this.$('input.email').val()
          }, {
            error: this.showErrors,
            success: this.clearErrors
          });
        },
        'click .inc-piggyBank': function() {
          console.log('inc', this.model);
          return this.model.changePennies(5);
        },
        'click .dec-piggyBank': function() {
          return this.model.changePennies(-5);
        },
        'click .signin-as': function() {
          return this.model.getLoginKey(function(err, key) {
            return alert(err, key);
          });
        },
        'click .send-email': function() {
          var es;
          es = new Views.EmailStudents({
            model: this.model
          });
          return es.render().open();
        },
        'click .toggle-control': function() {
          return this.model.toggleControl();
        },
        'click .tags-list': function() {
          var tm,
            _this = this;
          tm = new UI.TagsModal({
            tags: this.model.get('tags'),
            label: this.model.get('name')
          });
          tm.render();
          return tm.on('change', function(arr, str) {
            _this.model.save('tags', str);
            return _this.render();
          });
        }
      };

      ListItem.prototype.showErrors = function(model, errObj) {
        var err, fieldEl, fieldName, _ref, _results;
        console.log(model, errObj);
        _ref = errObj.errors;
        _results = [];
        for (fieldName in _ref) {
          err = _ref[fieldName];
          fieldEl = this.$("input." + fieldName);
          fieldEl.addClass('err');
          this.$(".control-group." + fieldName + " .help-block").text("" + err.type);
          _results.push(fieldEl.focus());
        }
        return _results;
      };

      ListItem.prototype.clearErrors = function(x, y) {
        this.$('.control-group .help-block').text('');
        return this.model.collection.trigger('saved');
      };

      ListItem.prototype.heartBeat = function() {
        var _this = this;
        this.$('.icon-heart').addClass('beat');
        return wait(500, function() {
          return _this.$('.icon-heart').removeClass('beat');
        });
      };

      ListItem.prototype.template = function() {
        td(function() {
          return i({
            "class": "" + (this.isSelected() ? 'icon-check' : 'icon-check-empty') + " select-item"
          });
        });
        td(function() {
          div({
            "class": "piggy-bank icon-heart " + (this.get('online') ? 'online' : '')
          }, " " + (this.get('piggyBank')));
          return div({
            "class": 'btn-group hid'
          }, function() {
            button({
              "class": 'btn btn-mini icon-plus inc-piggyBank'
            });
            return button({
              "class": 'btn btn-mini icon-minus dec-piggyBank'
            });
          });
        });
        td(function() {
          div({
            "class": 'control-group name'
          }, function() {
            input({
              type: 'text span3',
              value: "" + (this.get('name')),
              placeholder: 'name',
              "class": 'name'
            });
            return span({
              "class": 'help-block name'
            });
          });
          return span({
            "class": 'tags-list span3'
          }, function() {
            var tag, _i, _len, _ref, _ref1, _results;
            if (this.get('tags')) {
              _ref1 = (_ref = this.get('tags')) != null ? _ref.split('|') : void 0;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                tag = _ref1[_i];
                _results.push(span({
                  "class": 'icon-tag tag'
                }, " " + tag));
              }
              return _results;
            } else {
              return span({
                "class": 'icon-tags'
              }, " +tags");
            }
          });
        });
        td(function() {
          return div({
            "class": 'control-group email'
          }, function() {
            input({
              type: 'text span3',
              value: "" + (this.get('email')),
              placeholder: 'email',
              "class": 'email'
            });
            return span({
              "class": 'help-block email'
            });
          });
        });
        td(function() {
          div({
            "class": 'btn-group hid'
          }, function() {
            button({
              "class": 'btn btn-mini manage-password icon-key'
            });
            button({
              "class": 'btn btn-mini signin-as icon-signin'
            });
            return button({
              "class": 'btn btn-mini delete-item icon-trash'
            });
          });
          return div({
            "class": 'btn-group hid'
          }, function() {
            return button({
              "class": 'btn btn-mini send-email icon-envelope'
            });
          });
        });
        return td(function() {
          return button({
            "class": "btn btn-mini icon-hand-up toggle-control " + (this.get('control') ? 'active' : ''),
            'data-toggle': 'button'
          });
        });
      };

      ListItem.prototype.render = function() {
        ListItem.__super__.render.call(this);
        if (this.model.isSelected()) {
          this.$el.addClass('selected');
        } else {
          this.$el.removeClass('selected');
        }
        this.$('input').tooltip();
        this.tags.render().open(this.$('.tags-cont'));
        return this;
      };

      return ListItem;

    })(Backbone.View);
    Views.ManagePassword = (function(_super) {

      __extends(ManagePassword, _super);

      function ManagePassword() {
        return ManagePassword.__super__.constructor.apply(this, arguments);
      }

      ManagePassword.prototype.tagName = 'div';

      ManagePassword.prototype.className = 'modal manage-password-view hide fade';

      ManagePassword.prototype.initialize = function() {
        this.$el.modal();
        return this.model.on('change:password', this.render, this);
      };

      ManagePassword.prototype.chargeEmailButton = function() {
        var _this = this;
        return this.$('.send-pw').one('click', function(e) {
          console.log('clicked');
          $(e.target).off().addClass('disabled').text(' Sending...');
          return _this.model.sync('email', {
            _id: _this.model.id
          }, {
            subject: 'your password',
            html: "your password is " + (_this.model.get('password')),
            error: function(model, err) {
              return console.log(model, err);
            },
            success: function() {
              return $(e.target).removeClass('icon-envelope').addClass('icon-ok').removeClass('btn-info').addClass('btn-success').addClass('disabled').text(' Email sent!');
            }
          });
        });
      };

      ManagePassword.prototype.events = {
        'click .generate-pw': function() {
          return this.model.save({
            password: '*'
          }, {
            regenerate: true
          });
        }
      };

      ManagePassword.prototype.template = function() {
        div({
          "class": 'modal-body'
        }, function() {
          span({
            "class": 'icon-key pw'
          }, " " + (this.get('password')));
          return span("  is " + (this.get('name')) + "'s password.");
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return div({
            "class": 'btn-toolbar'
          }, function() {
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-info icon-envelope send-pw'
              }, " Email password to " + (this.get('name')));
            });
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-warning icon-refresh generate-pw'
              }, " Generate a new one");
            });
            return div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn',
                'data-dismiss': 'modal'
              }, "Close");
            });
          });
        });
      };

      ManagePassword.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        this.chargeEmailButton();
        return this;
      };

      return ManagePassword;

    })(Backbone.View);
    Views.Passwords = (function(_super) {

      __extends(Passwords, _super);

      function Passwords() {
        return Passwords.__super__.constructor.apply(this, arguments);
      }

      Passwords.prototype.tagName = 'div';

      Passwords.prototype.className = 'modal fade hide';

      Passwords.prototype.initialize = function() {
        var _this = this;
        return this.collection.on('reset', function() {
          return _this.renderList();
        });
      };

      Passwords.prototype.events = {
        'click .generate-pws': 'generatePws',
        'click .email-pws': 'emailPws'
      };

      Passwords.prototype.generatePws = function() {
        var _this = this;
        this.collection._selected = _.pluck(this.collection.selected(), 'id');
        return this.collection.sync('changePasswords', null, {
          ids: _.pluck(this.collection.selected(), 'id'),
          error: function(m, e) {
            return console.log('error', m, e);
          },
          success: function(m, e) {
            return _this.collection.fetch();
          }
        });
      };

      Passwords.prototype.emailPws = function() {
        var html,
          _this = this;
        html = "<p>Hello, {name}!\n</p>\n<p>\nHere is your password: {password}\n<br/>\nClick <a href='http://lingualab.io' >here to sign in</a>.\n</p>\n<b>Bye!</b>";
        return this.collection.sync('email', null, {
          ids: _.pluck(this.collection.selected(), 'id'),
          subject: 'Your password',
          html: html,
          error: function(m, e) {
            return console.log('error', m, e);
          },
          success: function(m, e) {
            return console.log('success');
          }
        });
      };

      Passwords.prototype.listTemplate = function() {
        var stu, _i, _len, _ref, _results;
        _ref = this.selected();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stu = _ref[_i];
          _results.push(tr(function() {
            td("" + (stu.get('name')) + " (" + (stu.get('email')) + ")");
            return td({
              "class": 'pw icon-key'
            }, " " + (stu.get('password')));
          }));
        }
        return _results;
      };

      Passwords.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3('Manage passwords');
        });
        div({
          "class": 'modal-body'
        }, function() {
          return table({
            "class": 'table'
          }, function() {});
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return div({
            "class": 'btn-toolbar'
          }, function() {
            button({
              "class": 'btn btn-info icon-envelope email-pws'
            }, ' Email passwords');
            button({
              "class": 'btn btn-warning icon-key generate-pws'
            }, ' Generate new passwords');
            return button({
              "class": 'btn',
              'data-dismiss': 'modal'
            }, ' Close');
          });
        });
      };

      Passwords.prototype.renderList = function() {
        this.$('table').html(ck.render(this.listTemplate, this.collection));
        return this;
      };

      Passwords.prototype.render = function() {
        Passwords.__super__.render.call(this);
        this.renderList();
        this.$el.modal('show');
        return this;
      };

      return Passwords;

    })(Backbone.View);
    Views.EmailStudents = (function(_super) {

      __extends(EmailStudents, _super);

      function EmailStudents() {
        return EmailStudents.__super__.constructor.apply(this, arguments);
      }

      EmailStudents.prototype.tagName = 'div';

      EmailStudents.prototype.className = 'modal hide fade emailer-view';

      EmailStudents.prototype.templates = {
        'password': "<p>Hello, <span class=\"template-field\" data-fld=\"name\">name</span>!\n</p>\n<p>\nHere is your password: <span class=\"template-field\" data-fld=\"password\">password</span>\n<br/>\nClick <a href='http://lingualab.io' >here to sign in</a>.\n</p>\n<b>Bye!</b>",
        'praise': "<p>Hello, <span class=\"template-field\" data-fld=\"name\">name</span>!</p>\n<p>\nYou've been working hard outside of class. I just wanted to let you know that I\nsee how much you've been practicing this week. Great job! Keep it up, I promise it'll pay off for you!\n</p>"
      };

      EmailStudents.prototype.initialize = function() {};

      EmailStudents.prototype.document = document;

      EmailStudents.prototype.events = {
        'click .bold': 'bold',
        'click .italic': 'italic',
        'click .underline': 'underline',
        'click .link': 'link',
        'click .size': 'size',
        'click ul.insert-data a': 'insertFld',
        'click .send-emails': 'sendEmails',
        'click .load-template': 'loadTemplate'
      };

      EmailStudents.prototype.sendEmails = function() {
        var col, ids, _ref,
          _this = this;
        this.$('button.send-emails').button('loading');
        col = (_ref = this.collection) != null ? _ref : this.model.collection;
        ids = this.collection ? _.pluck(this.collection.selected(), 'id') : [this.model.id];
        return col.sync('email', null, {
          ids: ids,
          subject: "important email from " + (top.app.data.teacher.get('teacherName')),
          html: this.simplifiedHTML(),
          error: function(m, e) {
            return _this.$('button.send-emails').button('error');
          },
          success: function(m, e) {
            var suc;
            suc = new UI.FlashMessage({
              message: 'Sent!',
              cont: _this.$('.modal-footer')
            });
            suc.render();
            return _this.$('button.send-emails').button('reset');
          }
        });
      };

      EmailStudents.prototype.simplifiedHTML = function() {
        var body;
        body = this.$('.editor-area').html();
        body = body.replace(/<span class=.template-field. data-fld=.([^"]+).>[^<]*<\/span>/g, "{$1}");
        console.log(body);
        return body;
      };

      EmailStudents.prototype.getSelectedText = function() {
        var _ref;
        if ((_ref = this.document) != null ? _ref.selection : void 0) {
          return document.selection.createRange().text;
        } else if (this.document) {
          return document.getSelection().toString();
        }
      };

      EmailStudents.prototype.selectTest = function() {
        if (this.getSelectedText().length === 0) {
          alert('Select some text first.');
          return false;
        }
        return true;
      };

      EmailStudents.prototype.exec = function(type, arg) {
        if (arg == null) {
          arg = null;
        }
        return this.document.execCommand(type, false, arg);
      };

      EmailStudents.prototype.query = function(type) {
        return this.document.queryCommandValue(type);
      };

      EmailStudents.prototype.bold = function(e) {
        e.preventDefault();
        return this.exec('bold');
      };

      EmailStudents.prototype.italic = function(e) {
        e.preventDefault();
        return this.exec('italic');
      };

      EmailStudents.prototype.underline = function(e) {
        e.preventDefault();
        return this.exec('underline');
      };

      EmailStudents.prototype.list = function(e) {
        e.preventDefault();
        return this.exec('insertUnorderedList');
      };

      EmailStudents.prototype.link = function(e) {
        var href;
        e.preventDefault();
        this.exec('unlink');
        href = prompt('Enter a link:', 'http://');
        if (!href || href === 'http://') {
          return;
        }
        if (!/:\/\//.test(href)) {
          href = 'http://' + href;
        }
        return this.exec('createLink', href);
      };

      EmailStudents.prototype.insertFld = function(e) {
        var fld, label;
        console.log(e.currentTarget);
        e.preventDefault();
        fld = $(e.currentTarget).attr('data-fld');
        label = $(e.currentTarget).attr('data-label');
        return this.exec('insertHTML', "&nbsp;<span class='template-field' data-fld='" + fld + "' contenteditable=false>" + label + "</span>&nbsp;");
      };

      EmailStudents.prototype.size = function(e) {
        e.preventDefault();
        return this.exec('fontSize', $(e.target).attr('data-size'));
      };

      EmailStudents.prototype.loadTemplate = function(e) {
        e.preventDefault();
        return this.$('.editor-area').html(this.templates[$(e.currentTarget).attr('data-template')]);
      };

      EmailStudents.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return div({
            "class": 'btn-toolbar'
          }, function() {
            div({
              "class": 'btn-group'
            }, function() {
              button({
                "class": 'btn icon-bold bold'
              });
              button({
                "class": 'btn icon-italic italic'
              });
              button({
                "class": 'btn icon-underline underline'
              });
              button({
                "class": 'btn icon-link link'
              });
              a({
                "class": "btn dropdown-toggle icon-text-height",
                'data-toggle': "dropdown",
                href: "#"
              }, function() {
                return span({
                  "class": 'caret'
                });
              });
              return ul({
                "class": 'dropdown-menu'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'size',
                    'data-size': 2
                  }, 'small');
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'size',
                    'data-size': 4
                  }, 'medium');
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'size',
                    'data-size': 5
                  }, 'large');
                });
              });
            });
            div({
              "class": 'btn-group'
            }, function() {
              a({
                "class": 'btn dropdown-toggle icon-user',
                'data-toggle': 'dropdown',
                href: '#'
              }, function() {
                span(" Student info ");
                return span({
                  "class": 'caret'
                });
              });
              return ul({
                "class": 'dropdown-menu insert-data'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-name',
                    'data-label': 'name',
                    'data-fld': 'name'
                  }, function() {
                    i({
                      "class": 'icon-credit-card'
                    });
                    return span(' Name');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-email',
                    'data-label': 'email address',
                    'data-fld': 'email'
                  }, function() {
                    return span('@ Email Address');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-password',
                    'data-label': 'password',
                    'data-fld': 'password'
                  }, function() {
                    i({
                      "class": 'icon-key'
                    });
                    return span(' Password');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-signin',
                    'data-label': 'instant sign-in link (good for 10m)',
                    'data-fld': 'signin-link'
                  }, function() {
                    i({
                      "class": 'icon-signin'
                    });
                    return span(' Instant sign in link');
                  });
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'insert-time',
                    'data-label': 'practice time this week',
                    'data-fld': 'time-week'
                  }, function() {
                    i({
                      "class": 'icon-time'
                    });
                    return span(' Time spent practicing this week');
                  });
                });
              });
            });
            return div({
              "class": 'btn-group'
            }, function() {
              a({
                "class": 'btn dropdown-toggle',
                'data-toggle': 'dropdown',
                href: '#'
              }, function() {
                i({
                  "class": 'icon-file'
                });
                span(' Templates ');
                return span({
                  "class": 'caret'
                });
              });
              return ul({
                "class": 'dropdown-menu'
              }, function() {
                li(function() {
                  return a({
                    href: '#',
                    "class": 'load-template',
                    'data-template': 'password'
                  }, function() {
                    i({
                      "class": 'icon-key'
                    });
                    return span(' Send passwords');
                  });
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'load-template',
                    'data-template': 'praise'
                  }, function() {
                    i({
                      "class": 'icon-thumbs-up'
                    });
                    return span(' Praise');
                  });
                });
                return li(function() {
                  return a({
                    href: '#',
                    "class": 'load-template',
                    'data-template': 'reminder'
                  }, function() {
                    i({
                      "class": 'icon-pushpin'
                    });
                    return span(' Reminder');
                  });
                });
              });
            });
          });
        });
        div({
          "class": 'modal-body'
        }, function() {
          return div({
            "class": 'editor-area'
          }, function() {});
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn pull-right',
            'data-dismiss': 'modal'
          }, "Close");
          return button({
            'data-loading-text': 'Sending...',
            'data-complete-text': 'Successfully sent!',
            "class": 'btn btn-info icon-envelope send-emails pull-left'
          }, " Send it to " + this.len + " " + (this.len > 1 ? 'students' : 'student'));
        });
      };

      EmailStudents.prototype.render = function() {
        var len,
          _this = this;
        len = this.collection != null ? this.collection.selected().length : 1;
        this.$el.html(ck.render(this.template, {
          len: len
        }));
        this.$el.modal('show');
        this.$el.on('shown', function() {
          _this.trigger('ready');
          _this.$('.editor-area').attr('contenteditable', true);
          return _this.$('.editor-area').focus();
        });
        return this;
      };

      return EmailStudents;

    })(Backbone.View);
    Views.Detail = (function(_super) {

      __extends(Detail, _super);

      function Detail() {
        return Detail.__super__.constructor.apply(this, arguments);
      }

      Detail.prototype.tagName = 'div';

      Detail.prototype.className = 'detail';

      Detail.prototype.initialize = function() {};

      Detail.prototype.showErrors = function(model, errs) {
        var err, type, _ref, _results;
        console.log(errs);
        _ref = errs.errors;
        _results = [];
        for (type in _ref) {
          err = _ref[type];
          this.$(".control-group." + type).addClass('error');
          _results.push(this.$(".control-group." + type + " .help-block").text(err.type));
        }
        return _results;
      };

      Detail.prototype.events = {
        'keyup .name': function() {
          var _ref, _ref1;
          return this.$('.full-name').text(" " + ((_ref = this.$('input.firstName').val()) != null ? _ref : '') + " " + ((_ref1 = this.$('input.lastName').val()) != null ? _ref1 : ''));
        },
        'click .save': function() {
          var fld, model, _i, _len, _ref,
            _this = this;
          model = {};
          _ref = this.$('.fld');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fld = _ref[_i];
            model[$(fld).attr('data-fld')] = $(fld).val();
          }
          return this.model.save(model, {
            error: function(model, errs) {
              return _this.showErrors(model, errs);
            },
            success: function() {
              return top.app.router.navigate('students', true);
            }
          });
        }
      };

      Detail.prototype.template = function() {
        div({
          "class": 'page-header'
        }, function() {
          var _ref;
          return h2({
            "class": 'icon-user icon-large full-name'
          }, " " + ((_ref = this.get('name')) != null ? _ref : ''));
        });
        fieldset(function() {
          div({
            "class": 'control-group name'
          }, function() {
            var _ref;
            input({
              type: 'text',
              "class": 'fld firstName name',
              'data-fld': 'name',
              placeholder: 'Name',
              value: "" + ((_ref = this.get('name')) != null ? _ref : '')
            });
            return span({
              "class": 'help-block'
            });
          });
          div({
            "class": 'control-group email'
          }, function() {
            div({
              "class": 'input-prepend'
            }, function() {
              var _ref;
              span({
                "class": 'add-on'
              }, function() {
                return i({
                  "class": 'icon-envelope'
                });
              });
              return input({
                type: 'text',
                "class": 'fld email',
                'data-fld': 'email',
                placeholder: 'email',
                value: "" + ((_ref = this.get('email')) != null ? _ref : '')
              });
            });
            return span({
              "class": 'help-block'
            });
          });
          return div({
            "class": 'control-group password'
          }, function() {
            div({
              "class": 'input-prepend'
            }, function() {
              var _ref;
              span({
                "class": 'add-on'
              }, function() {
                return i({
                  "class": 'icon-key'
                });
              });
              input({
                type: 'text',
                "class": 'fld password',
                'data-fld': 'password',
                value: "" + ((_ref = this.get('password')) != null ? _ref : '')
              });
              return span(function() {
                var _ref1, _ref2;
                a({
                  href: '#',
                  rel: 'popover',
                  "class": 'password-toggle',
                  'data-content': "is " + ((_ref1 = this.get('firstName')) != null ? _ref1 : '') + "'s password",
                  'data-title': "" + ((_ref2 = this.get('password')) != null ? _ref2 : ''),
                  'data-placement': 'left'
                }, function() {});
                return i({
                  "class": 'icon-eye'
                });
              });
            });
            return span({
              "class": 'help-block'
            });
          });
        });
        div({
          "class": 'page-header'
        });
        return button({
          "class": 'save btn btn-success icon-check'
        }, ' Save changes');
      };

      return Detail;

    })(Backbone.View);
    return _ref = [Model, Collection, UIState], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UIState = _ref[2], _ref;
  });

  module('App.Teacher', function(exports, top) {
    var Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.idAttribute = '_id';

      Model.prototype.syncName = 'user';

      Model.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'piggyBank':
            return this.set('piggyBank', model.piggyBank);
        }
      };

      return Model;

    })(Backbone.Model);
    exports.Model = Model;
    exports.Views = Views = {};
    Views.Profile = (function(_super) {

      __extends(Profile, _super);

      function Profile() {
        return Profile.__super__.constructor.apply(this, arguments);
      }

      Profile.prototype.tagName = 'div';

      Profile.prototype.className = 'modal fade hide profile-view';

      Profile.prototype.initialize = function() {};

      Profile.prototype.events = {
        'change input, select': function(e) {
          var model;
          log('change');
          model = {};
          model[$(e.target).attr('data-fld')] = $(e.target).val();
          return this.model.save(model, {
            error: this.showErrors,
            success: this.saveSuccess
          });
        }
      };

      Profile.prototype.showErrors = function(model, errs) {
        var err, type, _ref, _results;
        log(errs);
        _ref = errs.errors;
        _results = [];
        for (type in _ref) {
          err = _ref[type];
          this.$(".control-group." + type).addClass('error');
          _results.push(this.$(".control-group." + type + " .help-block").text(err.type));
        }
        return _results;
      };

      Profile.prototype.saveSuccess = function() {
        var alert,
          _this = this;
        this.$('.control-group').removeClass('error');
        this.$('.control-group .help-block').text('');
        alert = $('<span/>').addClass('label-success').addClass('label').addClass('pull-left').text('Change saved!');
        alert.prependTo(this.$('.modal-footer'));
        return wait(1000, function() {
          return alert.remove();
        });
      };

      Profile.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h1(function() {
            img({
              src: "" + (this.get('twitterImg'))
            });
            return text(" " + (this.get('twitterName')));
          });
        });
        div({
          "class": 'modal-body'
        }, function() {
          return form(function() {
            div({
              "class": 'control-group teacherName'
            }, function() {
              label('How do students address you? (if different from your Twitter name above)');
              input({
                type: 'text',
                placeholder: 'your teacher name',
                'data-fld': 'teacherName',
                value: "" + (this.get('teacherName'))
              });
              return span({
                "class": 'help-block'
              });
            });
            div({
              "class": 'control-group email'
            }, function() {
              label('Enter an email address where you can be contacted (optional).');
              input({
                type: 'text',
                placeholder: 'your email',
                'data-fld': 'email',
                value: "" + (this.get('email'))
              });
              return span({
                "class": 'help-block'
              });
            });
            return div({
              "class": 'control-group emailPref'
            }, function() {
              label('When do you want to receive emails from lingualab.io?');
              return select({
                "class": 'email-pref',
                'data-fld': 'emailPref'
              }, function() {
                option({
                  value: 'never'
                }, 'Never!');
                option({
                  value: 'important'
                }, 'Important notifications only');
                return option({
                  value: 'features'
                }, 'Notifications, new features and tips');
              });
            });
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return button('btn', {
            'data-dismiss': 'modal'
          }, 'Close');
        });
      };

      Profile.prototype.render = function() {
        var _this = this;
        Profile.__super__.render.call(this);
        this.$el.modal('show');
        this.$('select.email-pref').val(this.model.get('emailPref'));
        this.delegateEvents();
        this.$el.on('hidden', function() {
          return _this.remove();
        });
        return this;
      };

      return Profile;

    })(Backbone.View);
    Views.Account = (function(_super) {

      __extends(Account, _super);

      function Account() {
        return Account.__super__.constructor.apply(this, arguments);
      }

      Account.prototype.tagName = 'div';

      Account.prototype.className = 'modal fade hide account-view';

      Account.prototype.initialize = function() {};

      Account.prototype.events = {
        'click button.purchase': 'createToken'
      };

      Account.prototype.createToken = function() {
        var data,
          _this = this;
        data = {
          number: this.$('input.card-number').val(),
          cvc: this.$('input.card-cvc').val(),
          exp_month: this.$('input.card-expiry-month').val(),
          exp_year: this.$('input.card-expiry-year').val()
        };
        return Stripe.createToken(data, function(status, response) {
          log('stripe: ', status, response);
          if (response.error) {
            return _this.$('.errors').text(response.error.message);
          } else {
            log(_this.model.toJSON());
            return _this.model.sync('charge', _this.model.toJSON(), {
              charge: {
                amount: _this.$('.amount').val(),
                card: response.id,
                currency: 'usd',
                description: _this.model.id
              },
              error: function(m, err) {
                return log('charge error: ', m, err);
              },
              success: function(m, err) {
                return log('charge success: ', m, err);
              }
            });
          }
        });
      };

      Account.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h2('Account');
        });
        div({
          "class": 'modal-body'
        }, function() {
          h3("You currently have " + (this.get('piggyBank')));
          form({
            "class": 'form-inline'
          }, function() {
            return div({
              "class": 'control-group'
            }, function() {
              span("Purchase ");
              return input({
                type: 'text',
                "class": 'input-mini amount'
              });
            });
          });
          form({
            "class": 'cc'
          }, function() {
            div({
              "class": 'control-group card-number'
            }, function() {
              input({
                type: 'text',
                "class": 'fld card-number',
                'data-fld': 'card-number',
                placeholder: 'credit card number',
                autocomplete: 'off',
                size: 20
              });
              return span({
                "class": 'help-block'
              });
            });
            div({
              "class": 'control-group card-cvc'
            }, function() {
              input({
                type: 'text',
                "class": 'fld card-cvc input-mini',
                'data-fld': 'card-cvc',
                placeholder: 'CVCC',
                autocomplete: 'off',
                size: 4
              });
              return span({
                "class": 'help-block'
              });
            });
            div({
              "class": 'control-group card-expiry-month'
            }, function() {
              input({
                type: 'text',
                "class": 'fld input-mini card-expiry-month',
                'data-fld': 'card-expiry-month',
                placeholder: 'MM',
                autocomplete: 'off',
                size: '2'
              });
              return span({
                "class": 'help-block'
              });
            });
            return div({
              "class": 'control-group card-expiry-year'
            }, function() {
              input({
                type: 'text',
                "class": 'fld input-small card-expiry-year',
                'data-fld': 'card-expiry-year',
                placeholder: 'YYYY',
                autocomplete: 'off',
                size: '4'
              });
              return span({
                "class": 'help-block'
              });
            });
          });
          return div({
            "class": 'errors'
          }, function() {});
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn-success btn icon-credit-card purchase pull-left btn-large icon-large'
          }, " Purchase");
          return button({
            "class": 'btn',
            'data-dismiss': 'modal'
          }, ' Close');
        });
      };

      Account.prototype.render = function() {
        var _this = this;
        Account.__super__.render.call(this);
        this.$el.modal('show');
        this.delegateEvents();
        this.$el.on('hidden', function() {
          return _this.remove();
        });
        return this;
      };

      return Account;

    })(Backbone.View);
    Views.SearchBox = (function(_super) {

      __extends(SearchBox, _super);

      function SearchBox() {
        return SearchBox.__super__.constructor.apply(this, arguments);
      }

      SearchBox.prototype.events = {
        'keyup': function(e) {
          var _this = this;
          clearTimeout(this.searchWait);
          return this.searchWait = wait(200, function() {
            return _this.trigger('change', $(e.target).val());
          });
        }
      };

      SearchBox.prototype.initialize = function() {
        this.el = $('input#search-box')[0];
        return this.delegateEvents();
      };

      return SearchBox;

    })(Backbone.View);
    return Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'top-bar navbar navbar-fixed-top';

      TopBar.prototype.initialize = function() {
        var _this = this;
        return this.model.on('change:piggyBank', function(m, v) {
          log('piggyBank change:', v);
          return _this.$('.piggyBank').text(v);
        });
      };

      TopBar.prototype.events = {
        'click .profile': function(e) {
          log('profile');
          top.app.views.profile.render();
          return false;
        },
        'click .heart': function(e) {
          top.app.views.piggy.render();
          return false;
        }
      };

      TopBar.prototype.updateNav = function(rt) {
        this.$('ul.nav li').removeClass('active');
        this.$("ul.nav a[href=#" + rt + "]").parent('li').addClass('active');
        return this;
      };

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            a({
              "class": 'btn btn-navbar',
              'data-toggle': 'collapse',
              'data-target': '.nav-collapse'
            }, function() {
              span({
                "class": 'icon-beaker icon-large'
              });
              return span({
                "class": 'icon-reorder icon-large'
              });
            });
            return div({
              "class": 'nav-collapse'
            }, function() {
              ul({
                "class": 'nav'
              }, function() {
                li(function() {
                  return a({
                    "class": 'user profile',
                    href: '#'
                  }, function() {
                    return img({
                      src: "" + (this.get('twitterImg'))
                    });
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                li(function() {
                  return a({
                    href: '#files'
                  }, function() {
                    i({
                      "class": 'icon-briefcase'
                    });
                    return text(' Files');
                  });
                });
                li(function() {
                  return a({
                    href: '#students'
                  }, function() {
                    i({
                      "class": 'icon-group'
                    });
                    return text(' Students');
                  });
                });
                return li(function() {
                  return a({
                    href: '#lab'
                  }, function() {
                    i({
                      "class": 'icon-headphones'
                    });
                    return text(' Lab');
                  });
                });
              });
              return ul({
                "class": 'nav pull-right'
              }, function() {
                li({
                  "class": 'pull-left'
                }, function() {
                  return form({
                    "class": 'navbar-search pull-left'
                  }, function() {
                    return input({
                      type: 'text',
                      id: 'search-box',
                      "class": 'search-query span2',
                      placeholder: 'search'
                    });
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                li(function() {
                  return a({
                    href: '#',
                    "class": 'heart'
                  }, function() {
                    i({
                      "class": 'icon-heart'
                    });
                    return span({
                      "class": 'piggyBank'
                    }, " " + (this.get('piggyBank')));
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                return li(function() {
                  return a({
                    href: '/logout',
                    "class": 'icon-signout'
                  });
                });
              });
            });
          });
        });
      };

      TopBar.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return TopBar;

    })(Backbone.View);
  });

  module('App', function(exports, top) {
    var Model, Router, _ref;
    Model = (function() {

      function Model() {
        var fetcher, _ref,
          _this = this;
        if ((_ref = window.filepicker) != null) {
          _ref.setKey('Ag4e6fVtyRNWgXY2t3Dccz');
        }
        if (typeof Stripe !== "undefined" && Stripe !== null) {
          Stripe.setPublishableKey('pk_04LnDZEuRgae5hqjKjFaWjFyTYFgs');
        }
        this.socketConnect();
        this.fromDB();
        this.data = {
          teacher: new App.Teacher.Model(top.data.session.user),
          filez: new App.File.Collection(),
          students: new App.Student.Collection()
        };
        this.data.lab = new App.Lab.Model({}, {
          teacher: this.data.teacher,
          students: this.data.students,
          filez: this.data.filez
        });
        this.views = {
          topBar: new App.Teacher.Views.TopBar({
            model: this.data.teacher
          }),
          filez: new App.File.Views.Main({
            collection: this.data.filez
          }),
          students: new App.Student.Views.Main({
            collection: this.data.students
          }),
          profile: new App.Teacher.Views.Profile({
            model: this.data.teacher
          }),
          piggy: new App.Teacher.Views.Account({
            model: this.data.teacher
          })
        };
        this.router = new Router(this.data, this.views);
        this.fetched = 0;
        fetcher = function(col) {
          return col.fetch({
            success: function() {
              _this.fetched++;
              if (_this.fetched === (_.keys(_this.data)).length - 2) {
                return Backbone.history.start();
              }
            }
          });
        };
        wait(200, function() {
          fetcher(_this.data.filez);
          return fetcher(_this.data.students);
        });
      }

      Model.prototype.fromDB = function() {
        var _this = this;
        return this.connection.on('sync', function(service, data) {
          log('service', service, 'data', data);
          switch (service) {
            case 'file':
              return _this.data.filez.fromDB(data);
            case 'student':
              return _this.data.students.fromDB(data);
            case 'user':
              return _this.data.teacher.fromDB(data);
            case 'lab':
              return _this.data.lab.fromDB(data);
          }
        });
      };

      Model.prototype.socketConnect = function() {
        this.connection = window.sock = window.io.connect("https://" + window.data.CFG.API.HOST);
        return this.connectionView = new App.Connection.Views.Main({
          model: this.connection
        });
      };

      return Model;

    })();
    Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.initialize = function(data, views) {
        this.data = data;
        this.views = views;
        return this.showTopBar();
      };

      Router.prototype.routes = {
        '/': 'home',
        'files': 'files',
        'students': 'students',
        'lab': 'lab',
        'lab/:id': 'loadLab'
      };

      Router.prototype.showTopBar = function() {
        return this.views.topBar.render().open();
      };

      Router.prototype.home = function() {
        return this.clearViews();
      };

      Router.prototype.profile = function() {
        return this.views.profile.render();
      };

      Router.prototype.files = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('files');
        return this.views.filez.render().open();
      };

      Router.prototype.fileDetail = function(id) {
        this.clearViews('topBar');
        this.views.detail = new App.File.Views.Detail({
          model: this.data.filez.get(id)
        });
        return this.views.detail.render().open();
      };

      Router.prototype.students = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('students');
        return this.views.students.render().open();
      };

      Router.prototype.lab = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('lab');
        this.views.lab = new App.Lab.Views.Main({
          model: this.data.lab
        });
        return this.views.lab.render().open();
      };

      return Router;

    })(Backbone.Router);
    return _ref = [Model, Router], exports.Model = _ref[0], exports.Router = _ref[1], _ref;
  });

  $(function() {
    return window.app = new App.Model;
  });

}).call(this);
