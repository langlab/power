// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  module('App.File', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'file';

      Model.prototype.idAttribute = '_id';

      Model.prototype.thumbBase = "http://s3.amazonaws.com/lingualabio-media";

      Model.prototype.iconHash = {
        video: 'facetime-video',
        image: 'picture',
        pdf: 'file',
        audio: 'volume-up'
      };

      Model.prototype.src = function() {
        switch (this.get('type')) {
          case 'image':
            return this.get('imageUrl');
          case 'video':
            if (top.Modernizr.video.webm) {
              return this.get('webmUrl');
            } else if (top.Modernizr.video.h264) {
              return this.get('h264Url');
            }
            break;
          case 'audio':
            return this.get('mp3Url');
        }
      };

      Model.prototype.thumbnail = function() {
        var _ref, _ref1;
        return (_ref = (_ref1 = this.get('thumbUrl')) != null ? _ref1 : this.get('imageUrl')) != null ? _ref : 'http://placehold.it/100x100';
      };

      Model.prototype.icon = function() {
        if (this.get('type') === 'application') {
          return this.iconHash[this.get('ext')];
        } else {
          return this.iconHash[this.get('type')];
        }
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'file';

      Collection.prototype.initialize = function() {};

      Collection.prototype.comparator = function() {
        return 0 - moment(this.get('modified')).valueOf();
      };

      Collection.prototype.filteredBy = function(searchTerm) {
        return this.filter(function(m) {
          var re;
          re = new RegExp(searchTerm, 'i');
          return re.test(m.get('title'));
        });
      };

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        console.log('updating ', model);
        switch (method) {
          case 'create':
            return this.add(model);
          case 'update':
            return this.get(model._id).set(model);
          case 'progress':
            return this.get(model._id).set({
              prepProgress: model.prepProgress,
              status: model.status
            });
          case 'status':
            return this.get(model._id).set(model);
        }
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        searchTerm: '',
        currentListView: 'list'
      };

      return UIState;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'files-main';

      Main.prototype.initialize = function() {
        var _this = this;
        this.listView = new Views.List({
          collection: this.collection
        });
        this.ui = new UIState();
        this.collection.on('reset', function() {
          return _this.renderList();
        });
        return this.ui.on('change:searchTerm', function(ui, term) {
          return _this.listView.doSearch(term);
        });
      };

      Main.prototype.events = {
        'click .select-browser-view': function() {
          return this.ui.set('currentListView', 'browser');
        },
        'click .select-list-view': function() {
          return this.ui.set('currentListView', 'list');
        },
        'keyup .search-query': 'search',
        'click .record-upload': 'openRecorder',
        'click .file-picker': 'openFilePicker'
      };

      Main.prototype.search = function(e) {
        var _this = this;
        clearTimeout(this.searchWait);
        return this.searchWait = wait(200, function() {
          return _this.ui.set('searchTerm', $(e.target).val());
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'row files-top-bar'
        }, function() {
          span({
            "class": 'btn-toolbar span4'
          }, function() {
            return div({
              "class": 'input-prepend'
            }, function() {
              span({
                "class": 'add-on icon-search'
              });
              return input({
                "class": 'search-query span3',
                type: 'text',
                placeholder: 'search'
              });
            });
          });
          return span({
            "class": 'btn-toolbar span8 pull-right'
          }, function() {
            return button({
              "class": 'btn btn-success icon-plus file-picker pull-right'
            }, ' Add a file');
          });
        });
        div({
          "class": 'files-list-cont span10'
        }, function() {});
        return div({
          "class": 'file-detail-cont'
        });
      };

      Main.prototype.openFilePicker = function() {
        var _this = this;
        window.filepicker.getFile('*/*', {
          modal: true,
          persist: false,
          location: filepicker.SERVICES.COMPUTER
        }, function(url, data) {
          console.log(url, data);
          return _this.collection.create(new Model({
            title: data.filename,
            filename: data.filename,
            size: data.size,
            type: data.type.split('/')[0],
            mime: data.type,
            fpUrl: url
          }));
        });
        return wait(1000, function() {
          return $('<button></button>').addClass('btn').text('hello').appendTo(this.$('#filepicker_dialog_container'));
        });
      };

      Main.prototype.handleFileUpload = function() {
        return console.log($('.file-picker-url').val());
      };

      Main.prototype.openRecorder = function() {
        var _ref, _ref1;
        if ((_ref = this.recorder) != null) {
          _ref.remove();
        }
        if ((_ref1 = this.recorder) == null) {
          this.recorder = new Views.Recorder();
        }
        this.recorder.render().open();
        return this;
      };

      Main.prototype.renderList = function() {
        this.listView.render().open(this.$('.files-list-cont'));
        return this;
      };

      Main.prototype.render = function() {
        var _this = this;
        this.$el.html(ck.render(this.template, this));
        this.renderList();
        this.$('.tt').tooltip();
        this.$('.files-top-bar').removeClass('navbar-fixed-top').waypoint(function(event, direction) {
          if (direction === 'down') {
            return _this.$('.files-top-bar').hide().addClass('sticky').fadeIn();
          } else {
            return _this.$('.files-top-bar').hide().removeClass('sticky').fadeIn();
          }
        }, {
          offset: 0
        });
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'modal popup-recorder';

      Recorder.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h2('Record and upload your voice');
        });
        div({
          "class": 'modal-body'
        }, function() {});
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn'
          }, function() {
            return text(' Nevermind');
          });
          return button({
            "class": 'btn btn-success'
          }, function() {
            i({
              "class": 'icon-upload'
            });
            return text(' Upload it!');
          });
        });
      };

      Recorder.prototype.render = function() {
        var _ref;
        Recorder.__super__.render.call(this);
        if ((_ref = this.recorder) == null) {
          this.recorder = new App.Recording.Views.Recorder();
        }
        this.recorder.render().open(this.$('.modal-body'));
        this.$el.modal('show');
        return this;
      };

      return Recorder;

    })(Backbone.View);
    Views.List = (function(_super) {

      __extends(List, _super);

      function List() {
        this.addItem = __bind(this.addItem, this);
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.tagName = 'table';

      List.prototype.className = 'table file-list';

      List.prototype.initialize = function() {
        var _this = this;
        this.collection.on('add', this.addItem);
        return this.collection.on('reset', function() {
          return _this.render();
        });
      };

      List.prototype.doSearch = function(searchTerm) {
        this.searchTerm = searchTerm;
        return this.render();
      };

      List.prototype.template = function() {
        thead(function() {});
        tbody(function() {});
        return tfoot(function() {});
      };

      List.prototype.addItem = function(f) {
        var _ref, _ref1;
        if ((_ref = f.listItemView) != null) {
          _ref.remove();
        }
        if ((_ref1 = f.listItemView) == null) {
          f.listItemView = new Views.ListItem({
            model: f
          });
        }
        f.listItemView.render().open(this.$('tbody'));
        return this;
      };

      List.prototype.render = function() {
        var f, input, upl, _i, _len, _ref;
        this.$el.html(ck.render(this.template, this.collection));
        _ref = (this.searchTerm ? this.collection.filteredBy(this.searchTerm) : this.collection.models);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          this.addItem(f);
        }
        upl = this.collection.uploadFile;
        input = this.$('.select-upload').browseElement();
        input.on('change', function(e) {
          var _j, _len1, _ref1, _results;
          _ref1 = e.target.files;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            f = _ref1[_j];
            console.log('uploading ', f);
            _results.push(upl(f));
          }
          return _results;
        });
        this.delegateEvents();
        return this;
      };

      return List;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'list-item';

      ListItem.prototype.initialize = function() {
        var _this = this;
        this.model.on('change', function() {
          return _this.renderThumb();
        });
        return this.model.on('remove', function() {
          return _this.remove();
        });
      };

      ListItem.prototype.events = {
        'change .title': function(e) {
          return this.model.save({
            title: $(e.target).val()
          });
        },
        'click .delete': 'deleteItem',
        'click .dl': 'downloadItem',
        'dblclick': function() {
          return this.model.collection.trigger('selected', this.model);
        }
      };

      ListItem.prototype.thumbTemplate = function() {
        if (this.get('status') !== 'finished') {
          div('processing');
          return div({
            "class": 'progress progress-striped active'
          }, function() {
            return div({
              "class": 'bar',
              style: "width: " + (this.get('prepProgress' || 5)) + "%"
            });
          });
        } else {
          if (this.thumbnail()) {
            return img({
              src: "" + (this.thumbnail()),
              "class": 'thumb'
            });
          } else {
            return i({
              "class": "icon-" + (this.icon()) + " icon-large"
            });
          }
        }
      };

      ListItem.prototype.template = function() {
        var urls;
        urls = this.get('urls');
        td({
          "class": 'thumb-cont'
        }, function() {});
        td(function() {
          return input({
            "class": 'title',
            value: "" + (this.get('title'))
          });
        });
        td(moment(this.get('created')).format("MMM D h:mm:ss a"));
        td({
          "class": 'tags-cont'
        }, function() {});
        td(function() {
          return i({
            "class": 'icon-share-alt dl'
          });
        });
        return td(function() {
          return i({
            "class": 'icon-trash delete'
          });
        });
      };

      ListItem.prototype.deleteItem = function() {
        return this.model.destroy();
      };

      ListItem.prototype.downloadItem = function() {
        return filepicker.saveAs(this.model.src(), this.model.get('mime'), function(url) {
          return console.log(url);
        });
      };

      ListItem.prototype.renderThumb = function() {
        return this.$('.thumb-cont').html(ck.render(this.thumbTemplate, this.model));
      };

      ListItem.prototype.render = function() {
        this.delegateEvents();
        ListItem.__super__.render.call(this);
        this.renderThumb();
        return this;
      };

      return ListItem;

    })(Backbone.View);
    Views.Detail = (function(_super) {

      __extends(Detail, _super);

      function Detail() {
        return Detail.__super__.constructor.apply(this, arguments);
      }

      Detail.prototype.tagName = 'div';

      Detail.prototype.className = 'file-video-detail';

      Detail.prototype.template = function() {
        switch (this.get('type')) {
          case 'video':
            return video({
              "class": 'video',
              src: "" + (this.src())
            });
          case 'image':
            return img({
              src: "" + (this.src())
            });
        }
      };

      return Detail;

    })(Backbone.View);
    return _ref = [Model, Collection, UI], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UI = _ref[2], _ref;
  });

  module('App.Recording', function(exports, top) {
    var Collection, Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(App.File.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      return Collection;

    })(Backbone.Collection);
    exports.Views = Views = {};
    return Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'recorder';

      Recorder.prototype.initialize = function() {};

      Recorder.prototype.events = {
        'click .record': 'record',
        'click .play': 'play',
        'click .stop': 'stop',
        'click .pause': 'pause'
      };

      Recorder.prototype.template = function() {
        applet({
          "class": 'recorder-applet',
          archive: '/java/nanogong.jar',
          code: 'gong.NanoGong',
          width: 150,
          height: 40
        }, function() {
          param({
            name: 'AudioFormat',
            value: 'Speex'
          });
          param({
            name: 'MaxDuration',
            value: '1200'
          });
          return param({
            name: 'SamplingRate',
            value: '16000'
          });
        });
        div({
          "class": 'scrubber'
        }, function() {});
        div({
          "class": 'status'
        });
        return div({
          "class": 'recorder-main'
        }, function() {
          button({
            "class": 'btn btn-danger record state-stopped state-closed state-paused-recording'
          }, function() {
            i({
              "class": 'icon-comment'
            });
            return text(' rec');
          });
          button({
            "class": 'btn pause state-playing state-recording'
          }, function() {
            i({
              "class": 'icon-pause'
            });
            return text(' pause');
          });
          button({
            "class": 'btn btn-success play state-paused state-stopped state-paused'
          }, function() {
            i({
              "class": 'icon-play'
            });
            return text(' play');
          });
          return button({
            "class": 'btn btn-inverse stop state-paused state-recording state-playing state-paused-recording'
          }, function() {
            i({
              "class": 'icon-stop'
            });
            return text(' stop');
          });
        });
      };

      Recorder.prototype.appEvents = function() {
        var _this = this;
        return doEvery(200, function() {
          return _this.statusCheck();
        });
      };

      Recorder.prototype.handleNewStatus = function() {
        this.$('.recorder-main .btn').hide();
        return this.$(".recorder-main .state-" + this.status).show();
      };

      Recorder.prototype.statusCheck = function() {
        if (this.status !== (this.status = this.getStatus().replace(' ', '-'))) {
          this.trigger('status', this.status);
          this.$('.status').text(this.status);
          return this.handleNewStatus();
        }
      };

      Recorder.prototype.render = function() {
        var _ref;
        Recorder.__super__.render.call(this);
        this.rec = this.$('.recorder-applet')[0];
        this.appEvents();
        if ((_ref = this.scrubber) == null) {
          this.scrubber = new UI.Slider();
        }
        this.scrubber.render().open(this.$('.scrubber'));
        return this;
      };

      Recorder.prototype._req = function() {
        var args, res, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        res = (_ref = this.rec).sendGongRequest.apply(_ref, args);
        return res;
      };

      Recorder.prototype.record = function() {
        var duration;
        duration = this._req('RecordMedia', 'audio', 1200000);
        return this;
      };

      Recorder.prototype.stop = function() {
        this._req('StopMedia', 'audio');
        return this;
      };

      Recorder.prototype.pause = function() {
        this._req('PauseMedia', 'audio');
        return this;
      };

      Recorder.prototype.clear = function() {
        this._req('ClearMedia', 'audio');
        return this;
      };

      Recorder.prototype.play = function() {
        this._req('PlayMedia', 'audio');
        return this;
      };

      Recorder.prototype.getStatus = function() {
        return this._req('GetMediaStatus', 'audio');
      };

      Recorder.prototype.getTime = function() {
        return this._req('GetMediaTime', 'audio');
      };

      Recorder.prototype.setTime = function(s) {
        this._req('SetMediaTime', 'audio', Math.floor(s * 1000));
        return this;
      };

      Recorder.prototype.getAudioLevel = function() {
        return this._req('GetAudioLevel', 'audio');
      };

      Recorder.prototype.upload = function() {
        return this._req('PostToForm', 'http://lingualab.io/upload', 'file', '', 'recording.spx');
      };

      return Recorder;

    })(Backbone.View);
  });

  module('App.Student', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    exports.Views = Views = {};
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'student';

      Model.prototype.idAttribute = '_id';

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "student" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('firstName')) + " " + (this.get('lastName')) + " (" + (this.get('email')) + ")";
      };

      Model.prototype.initialize = function() {};

      Model.prototype.isSelected = function() {
        return this.get('selected');
      };

      Model.prototype.toggleSelect = function() {
        return this.set('selected', !this.get('selected'));
      };

      Model.prototype.randomPassword = function() {};

      Model.prototype.passwordMask = function() {
        var pw;
        pw = this.get('password');
        return pw.replace(/./g, '*');
      };

      Model.prototype.match = function(query) {
        var re;
        re = new RegExp(query, 'i');
        return (re.test(this.get('firstName'))) || (re.test(this.get('lastName'))) || (re.test(this.get('email')));
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'student';

      Collection.prototype.modelType = function() {
        return "students";
      };

      Collection.prototype.initialize = function() {};

      Collection.prototype.selected = function() {
        return this.filter(function(s) {
          return s.isSelected();
        });
      };

      Collection.prototype.filtered = function() {
        var _this = this;
        return this.filter(function(m) {
          var _ref;
          return m.match((_ref = _this.searchTerm) != null ? _ref : '');
        });
      };

      Collection.prototype.selectedFiltered = function() {
        return _.filter(this.filtered(), function(m) {
          return m.get('selected') === true;
        });
      };

      Collection.prototype.selectFiltered = function(setTo) {
        var student, _i, _len, _ref, _results;
        if (setTo == null) {
          setTo = true;
        }
        _ref = this.filtered();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          student = _ref[_i];
          _results.push(student.set('selected', setTo));
        }
        return _results;
      };

      Collection.prototype.toggleSelectFiltered = function() {
        if (this.selectedFiltered().length === this.filtered().length) {
          return this.selectFiltered(false);
        } else if (this.selectedFiltered().length === 0) {
          return this.selectFiltered(true);
        } else {
          return this.selectFiltered(false);
        }
      };

      return Collection;

    })(Backbone.Collection);
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      UIState.prototype.defaults = {
        currentListView: 'list',
        searchTerm: '',
        addMode: false
      };

      UIState.prototype.toggleAddMode = function() {
        this.set('addMode', this.get('addMode'));
        return this;
      };

      return UIState;

    })(Backbone.Model);
    Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'student-main container';

      Main.prototype.initialize = function() {
        var _this = this;
        this.state = new UIState;
        this.collection.on('reset', this.render, this);
        return this.collection.on('add', function(s) {
          console.log('added: ', s);
          return _this.render();
        });
      };

      Main.prototype.events = {
        'click .add-student': function() {
          console.log('click');
          return top.app.router.navigate('student/new', true);
        }
      };

      Main.prototype.template = function() {
        div({
          "class": 'controls-cont'
        }, function() {});
        return table({
          "class": 'list-cont table'
        }, function() {
          return tbody({
            "class": 'list'
          }, function() {});
        });
      };

      Main.prototype.addItem = function(stu) {
        var v,
          _this = this;
        v = new Views.ListItem({
          model: stu
        });
        v.render().open(this.$('.list'));
        return stu.on('open:detail', function() {
          var d;
          d = new Views.Detail({
            model: stu
          });
          return d.render().open(_this.$('.detail'));
        });
      };

      Main.prototype.render = function() {
        var stu, _i, _len, _ref;
        this.$el.html(ck.render(this.template, this));
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stu = _ref[_i];
          this.addItem(stu);
        }
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'list-item';

      ListItem.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      ListItem.prototype.events = {
        'click .select-item': function() {
          return this.model.toggleSelect();
        },
        'click .edit': function() {
          console.log(this.model);
          return top.app.router.navigate("student/" + this.model.id, true);
        },
        'click .manage-password': function() {
          var managePassword;
          managePassword = new Views.ManagePassword({
            model: this.model
          });
          return managePassword.render().open();
        }
      };

      ListItem.prototype.template = function() {
        td(function() {
          return i({
            "class": "" + (this.isSelected() ? 'icon-check' : 'icon-check-empty') + " icon-large select-item"
          });
        });
        td(function() {
          return img({
            src: 'http://placehold.it/75x100'
          });
        });
        td(function() {
          return input({
            type: 'text',
            value: "" + (this.get('name')),
            placeholder: 'name'
          });
        });
        td(function() {
          return input({
            type: 'text',
            value: "" + (this.get('email')),
            placeholder: 'email'
          });
        });
        return td(function() {
          return div({
            "class": 'manage-password'
          }, function() {
            return i({
              "class": 'icon-key'
            });
          });
        });
      };

      ListItem.prototype.render = function() {
        ListItem.__super__.render.call(this);
        return this;
      };

      return ListItem;

    })(Backbone.View);
    Views.ManagePassword = (function(_super) {

      __extends(ManagePassword, _super);

      function ManagePassword() {
        return ManagePassword.__super__.constructor.apply(this, arguments);
      }

      ManagePassword.prototype.tagName = 'div';

      ManagePassword.prototype.className = 'modal manage-password-view hide fade';

      ManagePassword.prototype.initialize = function() {
        this.$el.modal();
        return this.model.on('change:password', this.render, this);
      };

      ManagePassword.prototype.events = {
        'click .generate-pw': function() {
          return this.model.save({
            password: '*'
          }, {
            regenerate: true
          });
        }
      };

      ManagePassword.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          span({
            "class": 'icon-key pw'
          }, " " + (this.get('password')));
          return span("  is " + (this.get('name')) + "'s password.");
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return div({
            "class": 'btn-toolbar'
          }, function() {
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn icon-refresh generate-pw'
              }, " Generate a new one");
            });
            div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn btn-info icon-envelope'
              }, " Email " + (this.get('name')) + " this password");
            });
            return div({
              "class": 'btn-group'
            }, function() {
              return button({
                "class": 'btn',
                'data-dismiss': 'modal'
              }, "Close");
            });
          });
        });
      };

      ManagePassword.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return ManagePassword;

    })(Backbone.View);
    Views.Detail = (function(_super) {

      __extends(Detail, _super);

      function Detail() {
        return Detail.__super__.constructor.apply(this, arguments);
      }

      Detail.prototype.tagName = 'div';

      Detail.prototype.className = 'detail';

      Detail.prototype.initialize = function() {};

      Detail.prototype.showErrors = function(model, errs) {
        var err, type, _ref, _results;
        console.log(errs);
        _ref = errs.errors;
        _results = [];
        for (type in _ref) {
          err = _ref[type];
          this.$(".control-group." + type).addClass('error');
          _results.push(this.$(".control-group." + type + " .help-block").text(err.type));
        }
        return _results;
      };

      Detail.prototype.events = {
        'keyup .name': function() {
          var _ref, _ref1;
          return this.$('.full-name').text(" " + ((_ref = this.$('input.firstName').val()) != null ? _ref : '') + " " + ((_ref1 = this.$('input.lastName').val()) != null ? _ref1 : ''));
        },
        'click .save': function() {
          var fld, model, _i, _len, _ref,
            _this = this;
          model = {};
          _ref = this.$('.fld');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fld = _ref[_i];
            model[$(fld).attr('data-fld')] = $(fld).val();
          }
          return this.model.save(model, {
            error: function(model, errs) {
              return _this.showErrors(model, errs);
            },
            success: function() {
              return top.app.router.navigate('students', true);
            }
          });
        }
      };

      Detail.prototype.template = function() {
        div({
          "class": 'page-header'
        }, function() {
          var _ref;
          return h2({
            "class": 'icon-user icon-large full-name'
          }, " " + ((_ref = this.get('name')) != null ? _ref : ''));
        });
        fieldset(function() {
          div({
            "class": 'control-group name'
          }, function() {
            var _ref;
            input({
              type: 'text',
              "class": 'fld firstName name',
              'data-fld': 'name',
              placeholder: 'Name',
              value: "" + ((_ref = this.get('name')) != null ? _ref : '')
            });
            return span({
              "class": 'help-block'
            });
          });
          div({
            "class": 'control-group email'
          }, function() {
            div({
              "class": 'input-prepend'
            }, function() {
              var _ref;
              span({
                "class": 'add-on'
              }, function() {
                return i({
                  "class": 'icon-envelope'
                });
              });
              return input({
                type: 'text',
                "class": 'fld email',
                'data-fld': 'email',
                placeholder: 'email',
                value: "" + ((_ref = this.get('email')) != null ? _ref : '')
              });
            });
            return span({
              "class": 'help-block'
            });
          });
          return div({
            "class": 'control-group password'
          }, function() {
            div({
              "class": 'input-prepend'
            }, function() {
              var _ref;
              span({
                "class": 'add-on'
              }, function() {
                return i({
                  "class": 'icon-key'
                });
              });
              input({
                type: 'text',
                "class": 'fld password',
                'data-fld': 'password',
                value: "" + ((_ref = this.get('password')) != null ? _ref : '')
              });
              return span(function() {
                var _ref1, _ref2;
                a({
                  href: '#',
                  rel: 'popover',
                  "class": 'password-toggle',
                  'data-content': "is " + ((_ref1 = this.get('firstName')) != null ? _ref1 : '') + "'s password",
                  'data-title': "" + ((_ref2 = this.get('password')) != null ? _ref2 : ''),
                  'data-placement': 'left'
                }, function() {});
                return i({
                  "class": 'icon-eye'
                });
              });
            });
            return span({
              "class": 'help-block'
            });
          });
        });
        div({
          "class": 'page-header'
        });
        return button({
          "class": 'save btn btn-success icon-check'
        }, ' Save changes');
      };

      return Detail;

    })(Backbone.View);
    return _ref = [Model, Collection, UIState], exports.Model = _ref[0], exports.Collection = _ref[1], exports.UIState = _ref[2], _ref;
  });

  /*
  # model for the main view's UI state
    class UIState extends Backbone.Model
      defaults:
        currentListView: 'list'
        searchTerm: ''
        addMode: false
  
      toggleAddMode: ->
        @set 'addMode', (@get 'addMode')
        @
  
  
  
  
  # for the special show/hide password field
    class Views.Password extends Backbone.View
      tagName: 'input'
      className: 'password'
  
      initialize: ->
        @_val = @el.value
        @updateInput()
            
      mask: ->
        @_val.replace /./g, '*'
  
      events:
        'focus': ->
          @focus = true
          @updateInput()
  
        'mouseover':->
          @mouseover = true
          @updateInput()
  
        'mouseout':->
          @mouseover = false
          @_val = @$el.val()
          @updateInput()
          
  
        'click': ->
          @focus = true
          @updateInput
  
        'blur': ->
          @focus = false
          @updateInput()
  
        'keyup': ->
          @_val = @el.value
  
      updateInput: ->
        @el.value = (if @focus or @mouseover then @_val else @mask())
        @
  
      val: (v)->
        if v
          @_val = v
          @updateInput()
          @
        else @_val
  
  
  # the main view, including search bar
    class Views.Main extends Backbone.View
      tagName: 'div'
      className: 'student-main-view'
  
      initialize: ->
        @listView = new Views.List { collection: @collection }
  
        @ui = new UIState()
  
        @ui.on 'change:searchTerm', =>
          @collection.searchTerm = @$('.search-query').val()
          @updateBar()
          @renderList()
          @listView.toggleNew @ui.get 'addMode'
  
        @ui.on 'change:addMode', (v)=>
          @listView.toggleNew @ui.get 'addMode'
  
        @collection.on 'reset', =>
          @render()
  
        @collection.on 'change:selected', (m)=>
          @updateBar()
         
  
      events:
        'keyup input.search-query': 'search'
        'click .add-students': (e)-> @ui.toggleAddMode()
        'click .toggle-select-all': -> @collection.toggleSelectFiltered()
        'click .delete-students': 'deleteStudents'
  
      search: (e)->
        clearTimeout @searchWait
        @searchWait = wait 200, => @ui.set 'searchTerm', $(e.target).val()
  
      deleteStudents: ->
        deleteConfirm = new UI.ConfirmDelete { collection: @collection.selected() }
        deleteConfirm.render().open()
  
      buttonGroupTemplate: ->
        if (numSel = @collection.selected().length)
          button rel:'tooltip', class:'btn btn-danger icon-trash delete-students', 'title':'delete these files', ' Delete'
  
        button rel:'tooltip', title:'add students', class:"btn btn-success icon-plus add-students #{ if @ui.get 'addMode' then 'active' else ''}", 'data-toggle':'button', ->
          i class:'icon-group'
          span ' Add'
  
  
      checkAllTemplate: ->
        if @collection.selectedFiltered().length is @collection.filtered().length then checkClass = 'check icon-large'
        else if @collection.selectedFiltered().length is 0 then checkClass = 'check-empty icon-large'
        else checkClass = 'reorder'
        div class:"icon-#{checkClass} pull-left toggle-select-all", ' '
  
      template: ->
        div class:'search-panel', ->
          input class:'search-query', type:'text', placeholder:'search', value:"#{@ui.get 'searchTerm'}"
  
        div class:'list-panel', ->
          div class:'files-top-bar', ->
            
            span class:'btn-toolbar', ->
              
              span class:'check-all-cont', ->
              
              #h3 class:'pull-left', "#{ @collection.filtered?.length ? @collection.length } students shown, #{ @collection.selected().length } selected, of #{ @collection.length } total"
  
              
              div class:'btn-group pull-right', ->
                
          # where the list goes
          div class:'student-list-cont', ->
  
      updateBar: ->
        @$('.check-all-cont').html ck.render @checkAllTemplate, @
        @$('.btn-group').html ck.render @buttonGroupTemplate, @
  
      
      renderList: ->
        @listView.render().open @$('.student-list-cont')
        @
  
      render: ->
        @$el.html ck.render @template, @
        @updateBar()
        @renderList()
        @$('button').tooltip { placement: 'bottom' }
        @delegateEvents()
        @
  
  
  # the entire list view of students
    class Views.List extends Backbone.View
      tagName: 'table'
      className: 'table student-list'
  
      initialize: ->
  
        @collection.on 'reset', =>
          @render()
  
        @collection.on 'add', (item)=>
          @addItem item, true
  
        @newItem = new Model()
  
        @newItem.on 'saved', =>
          newItem = @collection.add @newItem.clone()
  
      events:
        'keydown thead.new-student input.password': (e)-> if e.which in [9,13] then @newItemView.saveNew()
  
      template: ->
  
        # row for new students go here
        thead class:'off new-student', ->
  
        # where the student list items go
        tbody ->
  
      addItem: (item, prepend = false)=>
        iv = new Views.ListItem model: item 
        $cont = @$("#{ if item.isNew() then 'thead' else 'tbody'}")
        $viewEl = iv.render().$el
        if prepend then $viewEl.prependTo $cont 
        else $viewEl.appendTo $cont
  
        if item.isNew()
          @newItemView = iv 
          iv.$('input:first').focus()
  
      toggleNew: (turnOff)=> 
        @$('thead.new-student').toggleClass 'off', turnOff
        if turnOff then @$('thead.new-student input:first').focus()
  
      renderList: ->
        for item in @collection.filtered()
          @addItem item
        @
  
      render: =>
        @$el.html ck.render @template
        @renderList()
        @addItem @newItem
        @delegateEvents()
        @
  
  # each student row in the list
    class Views.ListItem extends Backbone.View
      tagName: 'tr'
      className: 'student-list-item list-item'
  
      initialize: ->
  
        @model.on 'change', =>
          @$('input').removeClass('err')
  
        @model.on 'change:selected', =>
          @model.collection.trigger 'change:selected', @model
          @render()
  
        @model.on 'remove', =>
          @remove()
  
        @model.on 'error', @showErrors
  
        @model.on 'reset', @render()
  
      template: ->
        td ->
          if @isNew()
            i class:"icon-caret-right icon-large"
          else
            i class:"icon-check#{ if not @isSelected() then '-empty' else '' } select-student"
        td ->
          i class:'icon-user icon-large'
        td -> 
          #div class:'control-group lastName'
          input 'data-field':'lastName', value:"#{@get('lastName') ? ''}", placeholder:'Last Name'
        td -> 
          input 'data-field':'firstName', value:"#{@get('firstName') ? ''}", placeholder:'First Name'
        td ->
          input 'data-field':'email', value:"#{@get('email') ? ''}", placeholder:'email'
        td ->
          input 'data-field':'password', class:'password', placeholder: 'Password', value:"#{@get('password') ? ''}"
        if @isNew()
          td ->
            i class:'icon-plus add'
        else
          td ->
            i class:'icon-trash delete'
  
      passwordMask: ->
        pw = @$('.password').val()
        pw.replace /./g,'*'
  
      events:
        'change input': 'saveField'
        'click .delete':'deleteItem'
        'click .add':'saveNew'
        'click .select-student': -> @model.toggleSelect()
  
      saveField: (e)=>
        if not @model.isNew()
          field = $(e.target).attr 'data-field'
          (attrs = {})[field] = if field is 'password' then @passwordEl.val() else $(e.target).val()
  
          @model.save attrs, {
            error: @showErrors
            success: @clearErrors
          }
  
      saveNew: =>
        attrs = {}
        for fld in @$('[data-field]')
          attrs[field = $(fld).attr('data-field')] = if field is 'password' then @passwordEl.val() else $(fld).val()
  
        @model.save attrs, {
          error: @showErrors
          success: => 
            @model.trigger 'saved'
            @model.clear()
            @render().$('input:first').focus()
        }
  
      deleteItem: ->
        @deleteConfirm = new UI.ConfirmDelete { collection: [ @model ] }
        @deleteConfirm.render().open()
        #@model.destroy()
  
  
      showErrors: (model,errObj)=>
        @$('.model-status').removeClass('icon-ok').addClass('icon-warning-sign')
        for fieldName,err of errObj.errors
          fieldEl = @$("input[data-field='#{fieldName}']")
          fieldEl.addClass('err').attr 'title', err
          fieldEl.focus()
  
      render: ->
        super()
        @passwordEl = new Views.Password { el: @$('.password') }
        @$el.toggleClass 'selected', @model.isSelected()
        @
  */


  module('App.Teacher', function(exports, top) {
    var Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(Backbone.Model);
    exports.Model = Model;
    exports.Views = Views = {};
    return Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'top-bar navbar navbar-fixed-top';

      TopBar.prototype.updateNav = function(rt) {
        this.$('ul.nav li').removeClass('active');
        this.$("ul.nav a[href=#" + rt + "]").parent('li').addClass('active');
        return this;
      };

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            a({
              "class": 'btn btn-navbar',
              'data-toggle': 'collapse',
              'data-target': '.nav-collapse'
            }, function() {
              span({
                "class": 'icon-beaker icon-large'
              });
              return span({
                "class": 'icon-reorder icon-large'
              });
            });
            return div({
              "class": 'nav-collapse'
            }, function() {
              ul({
                "class": 'nav'
              }, function() {
                li(function() {
                  return a({
                    "class": 'brand pull-left',
                    href: '#'
                  }, function() {
                    return i({
                      "class": 'icon-bolt'
                    });
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                li(function() {
                  return a({
                    href: '#files'
                  }, function() {
                    i({
                      "class": 'icon-briefcase'
                    });
                    return text(' Files');
                  });
                });
                li(function() {
                  return a({
                    href: '#students'
                  }, function() {
                    i({
                      "class": 'icon-group'
                    });
                    return text(' Students');
                  });
                });
                return li(function() {
                  return a({
                    href: '#lab'
                  }, function() {
                    i({
                      "class": 'icon-headphones'
                    });
                    return text(' Lab');
                  });
                });
              });
              return ul({
                "class": 'nav pull-right'
              }, function() {
                li({
                  "class": 'user'
                }, function() {
                  return span(function() {
                    img({
                      src: "" + (this.get('twitterData').profile_image_url)
                    });
                    return text(" " + (this.get('twitterData').name) + " ");
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                return li(function() {
                  return a({
                    href: '/logout'
                  }, function() {
                    return i({
                      "class": 'icon-signout'
                    });
                  });
                });
              });
            });
          });
        });
      };

      TopBar.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return TopBar;

    })(Backbone.View);
  });

  module('App', function(exports, top) {
    var Model, Router, _ref;
    Model = (function() {

      function Model() {
        var fetcher,
          _this = this;
        window.filepicker.setKey('Ag4e6fVtyRNWgXY2t3Dccz');
        this.sock = top.window.sock;
        this.fromDB();
        this.data = {
          teacher: new App.Teacher.Model(top.data.session.user),
          filez: new App.File.Collection(),
          students: new App.Student.Collection()
        };
        this.views = {
          topBar: new App.Teacher.Views.TopBar({
            model: this.data.teacher
          }),
          filez: new App.File.Views.Main({
            collection: this.data.filez
          }),
          students: new App.Student.Views.Main({
            collection: this.data.students
          })
        };
        this.router = new Router(this.data, this.views);
        this.fetched = 0;
        fetcher = function(col) {
          return col.fetch({
            success: function() {
              _this.fetched++;
              if (_this.fetched === (_.keys(_this.data)).length - 1) {
                return Backbone.history.start();
              }
            }
          });
        };
        wait(200, function() {
          fetcher(_this.data.filez);
          return fetcher(_this.data.students);
        });
      }

      Model.prototype.fromDB = function() {
        var _this = this;
        return this.sock.on('sync', function(service, data) {
          console.log('service', service, 'data', data);
          if (service === 'file') {
            return _this.filez.fromDB(data);
          }
        });
      };

      return Model;

    })();
    Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.initialize = function(data, views) {
        this.data = data;
        this.views = views;
        return this.showTopBar();
      };

      Router.prototype.clearViews = function(exceptFor) {
        var key, view, _ref, _results;
        _ref = this.views;
        _results = [];
        for (key in _ref) {
          view = _ref[key];
          if (key !== exceptFor) {
            _results.push(view.remove());
          }
        }
        return _results;
      };

      Router.prototype.routes = {
        '/': 'home',
        'files': 'files',
        'students': 'students',
        'files/:id': 'fileDetail',
        'student/:id': 'studentDetail',
        'lab': 'lab'
      };

      Router.prototype.studentView = function() {};

      Router.prototype.showTopBar = function() {
        return this.views.topBar.render().open();
      };

      Router.prototype.home = function() {
        return this.clearViews();
      };

      Router.prototype.files = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('files');
        return this.views.filez.render().open();
      };

      Router.prototype.fileDetail = function(id) {
        this.clearViews('topBar');
        this.views.detail = new App.File.Views.Detail({
          model: this.data.filez.get(id)
        });
        return this.views.detail.render().open();
      };

      Router.prototype.students = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav('students');
        return this.views.students.render().open();
      };

      Router.prototype.studentDetail = function(id) {
        var model;
        this.clearViews('topBar');
        model = id === 'new' ? new App.Student.Model : this.data.students.get(id);
        this.views.detail = new App.Student.Views.Detail({
          model: model
        });
        return this.views.detail.render().open();
      };

      Router.prototype.lab = function() {
        this.clearViews('topBar');
        this.views.topBar.updateNav();
        return this.views.lab.render().open();
      };

      return Router;

    })(Backbone.Router);
    return _ref = [Model, Router], exports.Model = _ref[0], exports.Router = _ref[1], _ref;
  });

  $(function() {
    return window.app = new App.Model;
  });

}).call(this);
