// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module('App.File', function(exports, top) {
    var Collection, Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.baseUrl = 'https://lingualabio-media.s3.amazonaws.com';

      Model.prototype.syncName = 'file';

      Model.prototype.idAttribute = '_id';

      Model.prototype.thumbBase = "https://s3.amazonaws.com/lingualabio-media";

      Model.prototype.iconHash = {
        image: 'picture',
        video: 'play-circle',
        audio: 'volume-up',
        pdf: 'file'
      };

      Model.prototype.studentName = function() {
        var _ref;
        if (this.get("student")) {
          return (_ref = top.app.data.students.get(this.get('student'))) != null ? _ref.get('name') : void 0;
        } else {
          return null;
        }
      };

      Model.prototype.src = function() {
        var base;
        base = this.baseUrl;
        switch (this.get('type')) {
          case 'image':
            return "" + base + "/" + (this.get('filename')) + "." + (this.get('ext'));
          case 'video':
            if (top.Modernizr.video.webm) {
              return "" + base + "/" + (this.get('filename')) + ".webm";
            } else if (top.Modernizr.video.h264) {
              return "" + base + "/" + (this.get('filename')) + ".mp4";
            }
            break;
          case 'audio':
            return "" + base + "/" + (this.get('filename')) + ".mp3";
        }
      };

      Model.prototype.thumbnail = function() {
        var _ref, _ref1, _ref2;
        switch (this.get('type')) {
          case 'audio':
            if (this.get('student')) {
              return '/img/cassette.svg';
            } else {
              return '/img/sound.svg';
            }
            break;
          case 'video':
            return (_ref = (_ref1 = this.get('thumbUrl')) != null ? _ref1 : this.get('imageUrl')) != null ? _ref : '/img/video.svg';
          case 'image':
            return (_ref2 = this.get('thumbUrl')) != null ? _ref2 : this.get('imageUrl');
        }
      };

      Model.prototype.icon = function() {
        if (this.get('type') === 'application') {
          return this.iconHash[this.get('ext')];
        } else {
          return this.iconHash[this.get('type')];
        }
      };

      Model.prototype.match = function(query, type, student) {
        var re, _ref;
        re = new RegExp(query, 'i');
        return (student ? this.get('student') : true) && (type === this.get('type') || type === null) && ((re.test(this.get('title'))) || (re.test(this.get('tags'))) || (re.test((_ref = top.app.data.students.get(this.get('student'))) != null ? _ref.get('name') : void 0)));
      };

      Model.prototype.modelType = function(plural) {
        if (plural == null) {
          plural = false;
        }
        return "file" + (plural ? 's' : '');
      };

      Model.prototype.displayTitle = function() {
        return "" + (this.get('title'));
      };

      Model.prototype.formattedSize = function() {
        var size;
        size = this.get('size');
        size = size / 1024;
        if ((0 < size && size < 1000)) {
          return "" + (Math.round(size * 10) / 10) + "KB";
        }
        size = size / 1024;
        if (size > 0) {
          return "" + (Math.round(size * 10) / 10) + "MB";
        }
      };

      Model.prototype.formattedDuration = function() {
        var dur, mins, secs;
        dur = this.get('duration');
        if (dur) {
          secs = moment.duration(dur).seconds();
          mins = moment.duration(dur).minutes();
          return "" + mins + ":" + (secs < 10 ? '0' : '') + secs;
        } else {
          return "?s";
        }
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'file';

      Collection.prototype.modelType = function() {
        return "files";
      };

      Collection.prototype.iconHash = {
        image: 'picture',
        video: 'play-circle',
        audio: 'volume-up',
        pdf: 'file'
      };

      Collection.prototype.comparator = function(f) {
        var _ref;
        return 0 - (moment((_ref = f.get('modified')) != null ? _ref : 0).valueOf());
      };

      Collection.prototype.modifiedVal = function() {
        var _ref;
        return moment((_ref = this.get('modified')) != null ? _ref : 0).valueOf();
      };

      Collection.prototype.filtered = function(ui) {
        var student, term, type,
          _this = this;
        if (ui == null) {
          ui = {};
        }
        term = ui.term, type = ui.type, student = ui.student;
        return this.filter(function(m) {
          return m.match(term != null ? term : '', type, student);
        });
      };

      return Collection;

    })(Backbone.Collection);
    _.extend(exports, {
      Model: Model,
      Collection: Collection
    });
    exports.Views = Views = {};
    return Views.MediaPlayer = (function(_super) {

      __extends(MediaPlayer, _super);

      function MediaPlayer() {
        return MediaPlayer.__super__.constructor.apply(this, arguments);
      }

      MediaPlayer.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        return this.on('open', function() {
          return _this.setPcEvents();
        });
      };

      MediaPlayer.prototype.setPcEvents = function() {
        var _ref;
        return (_ref = this.pc) != null ? _ref.destroy() : void 0;
      };

      MediaPlayer.prototype.template = function() {
        return this;
      };

      MediaPlayer.prototype.render = function() {
        return this.$el.html(ck.render(this.template, this));
      };

      return MediaPlayer;

    })(Backbone.Collection);
  });

  module('App.Lab', function(exports, top) {
    var Collection, Model, StudentRecording, StudentRecordings, UIState, Views, _ref;
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      return UIState;

    })(Backbone.Model);
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        this.updateState = __bind(this.updateState, this);
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'lab';

      Model.prototype.idAttribute = '_id';

      Model.prototype.initialize = function() {
        var throttledUpdate,
          _this = this;
        throttledUpdate = _.throttle(this.updateState, 5000);
        this.set({
          'whiteBoardBig': new UIState,
          'whiteBoardA': new UIState,
          'whiteBoardB': new UIState,
          'mediaA': new UIState,
          'mediaB': new UIState,
          'recorder': new UIState({
            state: 'clean-slate'
          }),
          'recordings': new StudentRecordings
        });
        return this.get('recorder').on('change:state', function(model, state) {
          _this.remoteAction('recorder', 'update', model);
          return throttledUpdate();
        });
      };

      Model.prototype.remoteAction = function(area, action, data) {
        var actionObj,
          _this = this;
        actionObj = {
          action: action
        };
        actionObj[area] = data;
        return this.sync('action', actionObj, {
          student: top.app.data.student.toJSON(),
          success: function(err, data) {
            return log('action complete: ', data);
          }
        });
      };

      Model.prototype.updateState = function() {
        var _this = this;
        return this.sync('update:state', this.getState(), {
          success: function(err, data) {
            return log('state updated: ', data);
          }
        });
      };

      Model.prototype.setState = function(model) {
        var area, data, _ref;
        for (area in model) {
          data = model[area];
          if ((_ref = this.get(area)) != null) {
            _ref.set(model[area]);
          }
        }
        return this.trigger('join');
      };

      Model.prototype.getState = function() {
        var area, labState, state, _ref;
        labState = {};
        _ref = this.attributes;
        for (area in _ref) {
          state = _ref[area];
          labState[area] = state.attributes;
        }
        return labState;
      };

      Model.prototype.fromDB = function(data) {
        var action, method, model, options, prop, val, _ref, _results;
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'join':
            return this.setState(model);
          case 'action':
            action = model.action;
            switch (model.action) {
              case 'update':
                _results = [];
                for (prop in model) {
                  val = model[prop];
                  if (prop !== 'action') {
                    if (!(prop === 'recorder' && val.state === 'waiting-for-recordings')) {
                      _results.push((_ref = this.get(prop)) != null ? _ref.set(val) : void 0);
                    } else {
                      _results.push(void 0);
                    }
                  }
                }
                return _results;
            }
        }
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'lab';

      return Collection;

    })(Backbone.Collection);
    StudentRecording = (function(_super) {

      __extends(StudentRecording, _super);

      function StudentRecording() {
        return StudentRecording.__super__.constructor.apply(this, arguments);
      }

      return StudentRecording;

    })(Backbone.Model);
    StudentRecordings = (function(_super) {

      __extends(StudentRecordings, _super);

      function StudentRecordings() {
        return StudentRecordings.__super__.constructor.apply(this, arguments);
      }

      StudentRecordings.prototype.model = StudentRecording;

      return StudentRecordings;

    })(Backbone.Collection);
    _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1];
    exports.Views = Views = {};
    Views.ModalMsg = (function(_super) {

      __extends(ModalMsg, _super);

      function ModalMsg() {
        return ModalMsg.__super__.constructor.apply(this, arguments);
      }

      ModalMsg.prototype.tagName = 'div';

      ModalMsg.prototype.className = 'modal modal-msg fade hide';

      return ModalMsg;

    })(Backbone.View);
    Views.ShortInput = (function(_super) {

      __extends(ShortInput, _super);

      function ShortInput() {
        return ShortInput.__super__.constructor.apply(this, arguments);
      }

      ShortInput.prototype.initialize = function(options) {
        var _this = this;
        this.options = options;
        this.config = this.options.config;
        this.model.on('change:answer', function(m, s) {
          return _this.checkAnswer();
        });
        return this.model.on('change:state', function() {
          return _this.updateNotify();
        });
      };

      ShortInput.prototype.events = {
        'keyup input': function(e) {
          if (e.which === 9) {
            e.preventDefault();
            if (this.model.get('state') === 'correct') {
              return this.trigger('correct');
            }
          }
        },
        'mouseout .notify': function(e) {
          return this.$('.notify').popover('hide');
        },
        'change input': function(e) {
          this.model.set('answer', $(e.currentTarget).val());
          return $(e.currentTarget).focus();
        },
        'dblclick input': function(e) {
          return console.log(JSON.parse(Base64($(e.currentTarget).attr('data-config'))));
        },
        'click .notify': function(e) {
          if (this.model.get('state') !== 'correct') {
            this.$('input').focus();
          }
          return $(e.currentTarget).popover('show');
        }
      };

      ShortInput.prototype.updateNotify = function() {
        var fbContent, fbk, _i, _len, _ref1;
        if (this.config.get('notifyCorrect')) {
          this.$el.toggleClass('state-correct', this.model.get('state') === 'correct');
          this.$el.toggleClass('state-feedback', this.model.get('state') === 'feedback');
          this.$el.toggleClass('state-wrong', this.model.get('state') === 'wrong');
        }
        switch (this.model.get('state')) {
          case 'correct':
            if (this.config.get('notifyCorrect')) {
              this.$('.notify').removeClass().addClass('notify add-on icon-ok');
              this.$('.notify').popover('destroy');
              this.$('.notify').popover({
                title: this.config.get('label'),
                content: this.model.get('feedbacks')[0],
                placement: 'top'
              });
              this.sfx('bbell');
              return this.trigger('correct');
            }
            break;
          case 'feedback':
            fbContent = "";
            _ref1 = this.model.get('feedbacks');
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              fbk = _ref1[_i];
              fbContent = "" + fbContent + "<li>" + fbk + "</li>";
            }
            this.$('.notify').removeClass().addClass('notify add-on icon-star');
            this.$('.notify').popover('destroy');
            return this.$('.notify').popover({
              title: this.config.get('label'),
              content: fbContent,
              placement: 'top'
            });
          default:
            this.$('.notify').removeClass().addClass('notify add-on icon-question-sign');
            this.$('.notify').popover('destroy');
            return this.$('.notify').popover({
              title: this.config.get('label'),
              content: 'Type your answer in the box, then click here again to check your answer.',
              placement: 'top'
            });
        }
      };

      ShortInput.prototype.match = function(re, str, cb) {
        var caseSensitive, useRegex, _ref1;
        _ref1 = this.config.toJSON(), useRegex = _ref1.useRegex, caseSensitive = _ref1.caseSensitive;
        return this.io.emit('tre', 'compare', {
          re: re,
          str: str,
          literal: !useRegex,
          caseSensitive: caseSensitive
        }, function(err, resp) {
          return cb(err, resp[0]);
        });
      };

      ShortInput.prototype.checkAnswer = function() {
        var answer, att, caseSensitive, feedbacks, notifyAlmost, useRegex, val, _ref1, _ref2,
          _this = this;
        _ref1 = this.config.toJSON(), answer = _ref1.answer, feedbacks = _ref1.feedbacks, useRegex = _ref1.useRegex, caseSensitive = _ref1.caseSensitive, notifyAlmost = _ref1.notifyAlmost;
        att = (_ref2 = this.model.get('attempts')) != null ? _ref2 : {};
        att[moment().valueOf()] = this.model.get('answer');
        this.model.set('attempts', att);
        val = this.model.get('answer').trim();
        this.model.set('state', 'typing');
        this.fbArr = [];
        return this.match(answer, val, function(err, resp) {
          var addFbIfMatch, fbkObj, _i, _len, _ref3, _results;
          if (resp.edits === '0') {
            return _this.model.set({
              state: 'correct',
              feedbacks: ["" + ((_ref3 = _this.model.get('correctFeedback')) != null ? _ref3 : 'Good job!')]
            });
          } else {
            if (notifyAlmost) {
              if (resp.edits <= 2) {
                _this.fbArr.push("You are so close! Just make " + resp.edits + " little change" + (resp.edits > 1 ? 's' : '') + " and you'll have it right!");
                _this.model.set({
                  state: 'feedback',
                  feedbacks: _this.fbArr
                });
              }
            }
            addFbIfMatch = function(fbkObj) {
              var expr, fb;
              expr = fbkObj.expr, fb = fbkObj.fb;
              return _this.match(expr, val, function(err, resp) {
                if (resp.edits < 1) {
                  console.log('pushing: ', fb);
                  if (fb) {
                    _this.fbArr.unshift(fb);
                    _this.model.set({
                      state: 'feedback',
                      feedbacks: _this.fbArr
                    });
                    return _this.model.trigger('change:state');
                  }
                }
              });
            };
            _results = [];
            for (_i = 0, _len = feedbacks.length; _i < _len; _i++) {
              fbkObj = feedbacks[_i];
              _results.push(addFbIfMatch(fbkObj));
            }
            return _results;
          }
        });
      };

      ShortInput.prototype.render = function() {
        var kb,
          _this = this;
        this.$el.toggleClass('input-append');
        this.$('.notify').toggleClass('add-on icon-question-sign');
        this.$('.notify').popover({
          title: this.config.get('label'),
          content: 'Type your answer in the box.',
          placement: 'top'
        });
        if ((kb = this.config.get('kb'))) {
          this.kb = new UI.IKeyboard({
            language: kb
          });
          this.kb.render().open(this.$el);
          this.kb.on('select', function() {
            return _this.checkAnswer();
          });
        }
        return this;
      };

      return ShortInput;

    })(Backbone.View);
    Views.SoundRecTest = (function(_super) {

      __extends(SoundRecTest, _super);

      function SoundRecTest() {
        return SoundRecTest.__super__.constructor.apply(this, arguments);
      }

      SoundRecTest.prototype.tagName = 'div';

      SoundRecTest.prototype.className = 'modal fade hide sound-rec-test';

      SoundRecTest.prototype.initialize = function(options) {
        this.options = options;
        return this.rec = $('.test-recorder-applet')[0];
      };

      SoundRecTest.prototype.events = {
        'click .ready-to-begin': function() {
          this.$el.html(ck.render(this.stepTwoTemplate, this));
          return this.startSoundLoop();
        },
        'click .sound-test-ok': function() {
          this.loopAudioPc.pause().destroy();
          return this.$el.html(ck.render(this.stepThreeTemplate, this));
        },
        'click .start-rec-test': 'startRecTest'
      };

      SoundRecTest.prototype.stepOneTemplate = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3("Sound and recording test");
        });
        div({
          "class": 'modal-body'
        }, function() {
          p("We're going to test your sound and recording capabilities. Ready?");
          return ul(function() {
            return li({
              "class": 'icon-headphones'
            }, "Connect and put on your headphones or earphones now if you have them.");
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return button({
            "class": 'ready-to-begin btn btn-success icon-ok pull-right'
          }, " Okay, I'm ready to begin.");
        });
      };

      SoundRecTest.prototype.start = function() {
        this.$el.html(ck.render(this.stepOneTemplate, this));
        this.$el.modal({
          backdrop: 'static',
          keyboard: false
        });
        return this.$el.modal('show');
      };

      SoundRecTest.prototype.startSoundLoop = function() {
        var _ref1;
        this.loopAudio = new Audio();
        this.loopAudio.src = "/mp3/testingBot.mp3";
        if ((_ref1 = this.loopAudioPc) != null) {
          _ref1.destroy();
        }
        this.loopAudioPc = new Popcorn(this.loopAudio);
        this.loopAudioPc.loop(true);
        return this.loopAudioPc.play();
      };

      SoundRecTest.prototype.startRecTest = function() {
        var _this = this;
        $('.test-recorder-applet').addClass('submit-error');
        this.recTimer = new App.Utils.Timer;
        this.recTimer.at(3000, function() {
          return _this.rec.sendGongRequest('RecordMedia', 'audio');
        });
        this.recTimer.at(3200, function() {
          return _this.sfx('bbell');
        });
        this.recTimer.at(13000, function() {
          _this.sfx('bbell');
          return _this.rec.sendGongRequest('PauseMedia', 'audio');
        });
        this.recTimer.on('tick', function() {
          var al;
          al = _this.rec.sendGongRequest('GetAudioLevel', '');
          return _this.$('.mic').css({
            'border-color': "" + (al > 0.2 ? 'red' : '#333'),
            'box-shadow': "0px 0px " + (al * 100) + "px red"
          });
        });
        this.recTimer.at('14000', function() {
          return _this.recTimer.stop();
        });
        return this.recTimer.start();
      };

      SoundRecTest.prototype.stepTwoTemplate = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3({
            "class": 'icon-headphones'
          }, " Sound test");
        });
        div({
          "class": 'modal-body'
        }, function() {
          h3("Do you hear the sound playing right now?");
          p("If you can't, check the following:");
          return ul(function() {
            li({
              "class": 'icon-headphones'
            }, function() {
              i({
                "class": 'icon-circle-arrow-right'
              });
              return text(" Make sure your headphones are plugged into the computer or device.");
            });
            li({
              "class": 'icon-volume-up'
            }, " Make sure that the mute button on your headphones is not pressed. Adjust them to a comfortable volume.");
            return li({
              "class": 'icon-volume-up'
            }, " Make sure that sound is not muted on your computer controls. You may need to adjust the volume controls there as well.");
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'sound-test-ok btn btn-success icon-ok pull-right'
          }, " I can hear the sound fine.");
          return button({
            "class": 'sound-test-problem btn btn-danger icon-remove pull-left'
          }, " I'm having trouble hearing. Help!");
        });
      };

      SoundRecTest.prototype.stepThreeTemplate = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3({
            "class": 'icon-headphones'
          }, " Recording test");
        });
        div({
          "class": 'modal-body'
        }, function() {
          h3("Now we'll record your voice. When you hear the bell:");
          ol(function() {
            li("First, say your FULL NAME.");
            return li("Then, START COUNTING, and continue counting until you hear the bell again.");
          });
          p("As you speak, you should see the microphone below glow.");
          return div({
            "class": 'mic-cont'
          }, function() {
            return span({
              "class": 'mic'
            }, function() {
              return img({
                src: '/img/mic.svg'
              });
            });
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return button({
            "class": 'start-rec-test btn btn-info'
          }, " Begin recording test");
        });
      };

      return SoundRecTest;

    })(Backbone.View);
    Views.WhiteBoard = (function(_super) {

      __extends(WhiteBoard, _super);

      function WhiteBoard() {
        return WhiteBoard.__super__.constructor.apply(this, arguments);
      }

      WhiteBoard.prototype.tagName = 'div';

      WhiteBoard.prototype.className = 'wb-cont';

      WhiteBoard.prototype.initialize = function() {
        var _this = this;
        this.inputs = {};
        this.model.on('change:html', function() {
          return _this.render();
        });
        return this.model.on('change:state', function(m, state) {
          if (state === 'submit') {
            return _this.submitAnswers();
          }
        });
      };

      WhiteBoard.prototype.events = function() {
        return {
          'click .wb-tts': function(e) {
            var pc, sp,
              _this = this;
            sp = new Spinner({
              length: 3,
              radius: 1,
              lines: 8,
              corners: 0,
              trail: 50,
              width: 2,
              color: 'blue'
            }).spin($(e.currentTarget).find('.spinner')[0]);
            pc = this.tts(JSON.parse(Base64.decode($(e.currentTarget).attr('data-config'))));
            return pc.on("canplay", function() {
              return $(sp.el).remove();
            });
          },
          'dblclick .wb-input input': function(e) {
            return console.log(JSON.parse(Base64.decode($(e.currentTarget).parent().attr('data-config'))));
          }
        };
      };

      WhiteBoard.prototype.addInput = function(wbInput) {
        var data, v,
          _this = this;
        data = JSON.parse(Base64.decode($(wbInput).attr('data-config')));
        console.log('config data', data);
        v = new Views.ShortInput({
          el: wbInput,
          model: new Backbone.Model,
          config: new Backbone.Model(data)
        });
        console.log('v:', v);
        v.render();
        v.on('correct', function() {
          var ids, myId, nextIndex;
          myId = v.$el.attr('id');
          ids = _.map(_this.$('.wb-input'), function(el) {
            return $(el).attr('id');
          });
          nextIndex = ids.indexOf(myId) + 1;
          if (nextIndex >= ids.length) {
            nextIndex = 0;
          }
          return _this.$("#" + ids[nextIndex] + " input").focus();
        });
        this.inputs[v.config.get('id')] = v;
        return console.log('inputs:', this.inputs);
      };

      WhiteBoard.prototype.renderInputs = function() {
        var wbInput, _i, _len, _ref1, _results;
        _ref1 = this.$('.wb-input');
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          wbInput = _ref1[_i];
          _results.push(this.addInput(wbInput));
        }
        return _results;
      };

      WhiteBoard.prototype.submitAnswers = function() {
        var answers, context, response,
          _this = this;
        console.log(this.inputs);
        answers = _.map(this.inputs, function(i) {
          return {
            type: 'short',
            question: i.config.toJSON(),
            answer: i.model.toJSON()
          };
        });
        context = {
          type: 'whiteboard',
          state: this.model.toJSON()
        };
        console.log('answers:', answers);
        response = new App.Response.Model({
          owner: app.data.student.get('teacherId'),
          answers: answers,
          context: context
        });
        console.log('resp', response);
        return response.save({}, {
          success: function(data) {
            _this.model.set('state', 'waiting');
            _this.trigger('inputs:submitted');
            _this.inputs = [];
            _this.render();
            return console.log('success: ', data);
          },
          error: function(data) {
            return console.log('error', data);
          }
        });
      };

      WhiteBoard.prototype.render = function(msg) {
        this.$el.html(this.model.get('html'));
        this.renderInputs();
        this.delegateEvents();
        return this;
      };

      return WhiteBoard;

    })(Backbone.View);
    Views.MediaPlayer = (function(_super) {

      __extends(MediaPlayer, _super);

      function MediaPlayer() {
        return MediaPlayer.__super__.constructor.apply(this, arguments);
      }

      MediaPlayer.prototype.tagName = 'div';

      MediaPlayer.prototype.className = 'media-cont';

      MediaPlayer.prototype.initialize = function() {
        var _this = this;
        this.model.on('change:file', function(m, file) {
          console.log('file changed');
          return _this.render();
        });
        this.model.on('change:state', function(m, state) {
          var _ref1, _ref2, _ref3, _ref4, _ref5;
          switch (state) {
            case 'playing':
              if ((_ref1 = _this.pc) != null) {
                _ref1.playbackRate(m.get('playbackRate'));
              }
              if ((_ref2 = _this.pc) != null) {
                _ref2.currentTime(m.get('currentTime'));
              }
              return (_ref3 = _this.pc) != null ? _ref3.play() : void 0;
            case 'paused':
              if ((_ref4 = _this.pc) != null) {
                _ref4.currentTime(m.get('currentTime'));
              }
              return (_ref5 = _this.pc) != null ? _ref5.pause() : void 0;
          }
        });
        this.model.on('change:currentTime', function(m, time) {
          var _ref1;
          return (_ref1 = _this.pc) != null ? _ref1.currentTime(time) : void 0;
        });
        this.model.on('change:playbackRate', function(m, rate) {
          var _ref1, _ref2;
          if ((_ref1 = _this.pc) != null) {
            _ref1.currentTime(m.get('currentTime'));
          }
          return (_ref2 = _this.pc) != null ? _ref2.playbackRate(rate) : void 0;
        });
        this.model.on('change:muted', function(m, muted) {
          var _ref1, _ref2, _ref3;
          if (muted) {
            if ((_ref1 = _this.pc) != null) {
              _ref1.mute();
            }
          } else {
            if ((_ref2 = _this.pc) != null) {
              _ref2.unmute();
            }
          }
          return (_ref3 = _this.pc) != null ? _ref3.currentTime(m.get('currentTime')) : void 0;
        });
        this.model.on('change:visible', function(m, viz) {
          var _ref1;
          _this.$('.media').toggleClass('hid', !viz);
          return (_ref1 = _this.pc) != null ? _ref1.currentTime(m.get('currentTime')) : void 0;
        });
        return this.model.on('change:fullscreen', function(m, fs) {
          var _ref1;
          if ((_ref1 = _this.pc) != null) {
            _ref1.currentTime(m.get('currentTime'));
          }
          return _this.$el.toggleClass('fullscreen', fs);
        });
      };

      MediaPlayer.prototype.template = function() {
        var file;
        file = new App.File.Model(this.model.get('file'));
        return div({
          "class": "media"
        }, function() {
          if (file != null) {
            switch (file.get('type')) {
              case 'image':
                return img({
                  src: "" + (file.src())
                });
              case 'video':
                return video({
                  src: "" + (file.src())
                });
              case 'audio':
                return audio(function() {
                  return source({
                    src: "" + (file.src())
                  });
                });
            }
          }
        });
      };

      MediaPlayer.prototype.setPcEvents = function() {
        var type, _ref1,
          _this = this;
        type = (_ref1 = this.model.get('file')) != null ? _ref1.type : void 0;
        this.pc = Popcorn(this.$(type)[0]);
        return this.pc.on('canplay', function() {
          _this.pc.currentTime(_this.model.get('currentTime'));
          _this.pc.playbackRate(_this.model.get('playbackRate'));
          log('state: ', _this.model.get('state'));
          if (_this.model.get('state') === 'playing') {
            return _this.pc.play();
          }
        });
      };

      MediaPlayer.prototype.render = function() {
        var type, _ref1, _ref2;
        this.$el.html(ck.render(this.template, this.options));
        this.$('.media').toggleClass('hid', !this.model.get('visible'));
        this.$el.toggleClass('fullscreen', this.model.get('fullscreen'));
        if ((_ref1 = (type = (_ref2 = this.model.get('file')) != null ? _ref2.type : void 0)) === 'video' || _ref1 === 'audio') {
          this.setPcEvents();
        }
        return this;
      };

      return MediaPlayer;

    })(Backbone.View);
    Views.SubmitError = (function(_super) {

      __extends(SubmitError, _super);

      function SubmitError() {
        return SubmitError.__super__.constructor.apply(this, arguments);
      }

      SubmitError.prototype.tagName = 'div';

      SubmitError.prototype.className = 'modal fade hide';

      SubmitError.prototype.initialize = function(options) {
        this.options = options;
      };

      SubmitError.prototype.events = {
        'click .try-again': function() {
          return this.model.set('state', 'submitting');
        },
        'click .save-recording': function() {
          this.options.rec.sendGongRequest('SaveMessage', 'wav/adpcm');
          return wait(3000, this.$el.modal('hide'));
        }
      };

      SubmitError.prototype.template = function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h2({
            "class": 'icon-exclamation-sign'
          }, 'Error submitting recording');
        });
        div({
          "class": 'modal-body'
        }, function() {
          return p("There was an error sending your recording to the server. You can either try to submit again, or save the file to deliver to your teacher some other way.");
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn icon-share-alt try-again'
          }, ' Try to submit again');
          return button({
            "class": 'btn btn-info icon-download save-recording'
          }, ' Save to your computer');
        });
      };

      SubmitError.prototype.render = function() {
        var _this = this;
        SubmitError.__super__.render.call(this);
        this.$el.modal('show');
        this.delegateEvents();
        this.$el.on('hidden', function() {
          return _this.remove();
        });
        return this;
      };

      return SubmitError;

    })(Backbone.View);
    Views.Recorder = (function(_super) {

      __extends(Recorder, _super);

      function Recorder() {
        return Recorder.__super__.constructor.apply(this, arguments);
      }

      Recorder.prototype.tagName = 'div';

      Recorder.prototype.className = 'recorder';

      Recorder.prototype.initialize = function(options) {
        this.options = options;
        this.rec = $('applet')[0];
        this.recTimer = new App.Activity.Timer;
        this.playTimer = new App.Activity.Timer;
        this.bigRecTimer = new App.Activity.Timer;
        this.waitTimer = new App.Activity.Timer;
        this.setTimerEvents();
        this.setStateEvents();
        return this.submitError = new Views.SubmitError({
          model: this.model,
          rec: this.rec
        });
      };

      Recorder.prototype.setAlertType = function(type) {
        var t, _i, _len, _ref1;
        _ref1 = ['info', 'warning', 'success', 'danger'];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          t = _ref1[_i];
          this.$('.recorder-message').removeClass("alert-" + t);
        }
        return this.$('.recorder-message').addClass("alert-" + type);
      };

      Recorder.prototype.timeDisplay = function(dur) {
        dur = moment.duration(dur);
        return "" + (dur.minutes()) + ":" + (dur.seconds() < 10 ? '0' : '') + (dur.seconds());
      };

      Recorder.prototype.setTimerEvents = function() {
        var _this = this;
        this.recTimer.on('tick', function(data) {
          var audioLevel, minsLeft, secs, secsLeft, ticks, timeLeft, waitText;
          ticks = data.ticks, secs = data.secs;
          if (_this.model.get('state') === 'recording-duration') {
            timeLeft = moment.duration(_this.model.get('duration') - ticks);
            secsLeft = (Math.floor(timeLeft.seconds())) + 1;
            minsLeft = Math.floor(timeLeft.minutes());
            waitText = "RECORDING NOW, pauses in" + (minsLeft ? ' ' + minsLeft + 'm' : '') + " " + secsLeft + "s";
            _this.$('.recorder-message').text(waitText);
          } else {
            _this.$('.recorder-message').text("RECORDING NOW, " + (_this.timeDisplay(ticks)) + " so far");
          }
          audioLevel = 100 * _this.rec.sendGongRequest('GetAudioLevel', '');
          return _this.$('.recorder-message').css('box-shadow', "0px 0px " + audioLevel + "px");
        });
        return this.waitTimer.on('tick', function(data) {
          var minsLeft, secs, secsLeft, ticks, timeLeft, waitText;
          ticks = data.ticks, secs = data.secs;
          timeLeft = moment.duration(_this.model.get('delay') - ticks);
          secsLeft = (Math.floor(timeLeft.seconds())) + 1;
          minsLeft = Math.floor(timeLeft.minutes());
          waitText = "recording in" + (minsLeft ? ' ' + minsLeft + 'm' : '') + " " + secsLeft + "s";
          return _this.$('.recorder-message').text(waitText);
        });
      };

      Recorder.prototype.setStateEvents = function() {
        var throttledSubmit,
          _this = this;
        throttledSubmit = _.throttle(this.submitRec, 5000);
        return this.model.on('change:state', function(m, state) {
          _this.render();
          switch (state) {
            case 'waiting-to-record':
              _this.waitTimer.start();
              return _this.sfx('metronome');
            case 'recording':
              _this.rec.sendGongRequest('RecordMedia', 'audio', 1200000);
              _this.setAlertType('danger');
              _this.recTimer.start();
              _this.bigRecTimer.start();
              return _this.sfx('start-record');
            case 'recording-duration':
              _this.rec.sendGongRequest('RecordMedia', 'audio', 1200000);
              _this.setAlertType('danger');
              _this.waitTimer.stop();
              _this.recTimer.start();
              _this.bigRecTimer.start();
              return _this.sfx('start-record');
            case 'paused-recording':
              _this.setAlertType('warning');
              _this.collection.add({
                question: _this.model.get('question'),
                at: _this.bigRecTimer.currentMSecs() - _this.recTimer.currentMSecs(),
                delay: _this.model.get('delay'),
                duration: _this.recTimer.currentMSecs()
              });
              _this.recTimer.stop();
              _this.bigRecTimer.pause();
              _this.sfx('end-record');
              return _this.rec.sendGongRequest('PauseMedia', 'audio');
            case 'stopped-recording':
              _this.setAlertType('info');
              _this.rec.sendGongRequest('StopMedia', 'audio');
              _this.recTimer.stop();
              return _this.bigRecTimer.stop();
            case 'playing':
              _this.rec.sendGongRequest('PlayMedia', 'audio');
              return _this.playTimer.start();
            case 'paused-playing':
              _this.rec.sendGongRequest('PauseMedia', 'audio');
              return _this.playTimer.pause();
            case 'stopped-playing':
              return _this.playTimer.stop();
            case 'clean-slate':
              _this.setAlertType('info');
              _this.rec.sendGongRequest('StopMedia', 'audio');
              _this.rec.sendGongRequest('ClearMedia', 'audio');
              _this.recTimer.stop();
              _this.playTimer.stop();
              _this.bigRecTimer.stop();
              return _this.collection.reset();
            case 'submitting':
              _this.setAlertType('info');
              _this.submitRec();
              _this.rec.sendGongRequest('StopMedia', 'audio');
              return _this.rec.sendGongRequest('ClearMedia', 'audio');
            case 'submitted':
              _this.setAlertType('success');
              return _this.sfx('submitted');
            case 'submit-error':
              return _this.submitError.render();
          }
        });
      };

      Recorder.prototype.submitRec = function() {
        var data, dataObj, url;
        dataObj = {
          s: app.data.student.id,
          t: app.data.student.get('teacherId'),
          ts: this.model.get('lastSubmit'),
          title: this.model.get('title'),
          tags: this.model.get('tags'),
          recordings: this.collection.toJSON()
        };
        data = Base64.encode(JSON.stringify(dataObj));
        url = "http://up.langlab.org/rec?data=" + data;
        log(dataObj, url);
        this.submitStat = this.rec.sendGongRequest('PostToForm', url, 'file', "", "" + app.data.student.id + "_" + (app.data.student.get('teacherId')) + "_" + (this.model.get('ts')) + ".spx");
        if (this.submitStat) {
          return this.model.set('state', 'submitted');
        } else {
          return this.model.set('state', 'submit-error');
        }
      };

      Recorder.prototype.template = function() {
        return div({
          "class": 'alert alert-info recorder-message'
        }, "" + (this.get('state')));
      };

      return Recorder;

    })(Backbone.View);
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'student-lab-view container buffer-top';

      Main.prototype.initialize = function() {
        var wb, _i, _len, _ref1, _results;
        this.wbBig = new Views.WhiteBoard({
          model: this.model.get('whiteBoardBig'),
          cont: '.wb-cont-big'
        });
        this.wbA = new Views.WhiteBoard({
          model: this.model.get('whiteBoardA'),
          cont: '.wb-cont-a'
        });
        this.wbB = new Views.WhiteBoard({
          model: this.model.get('whiteBoardB'),
          cont: '.wb-cont-b'
        });
        this.mediaA = new Views.MediaPlayer({
          model: this.model.get('mediaA')
        });
        this.mediaB = new Views.MediaPlayer({
          model: this.model.get('mediaB')
        });
        this.recorder = new Views.Recorder({
          model: this.model.get('recorder'),
          collection: this.model.get('recordings')
        });
        _ref1 = [this.wbBig, this.wbA, this.wbB];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          wb = _ref1[_i];
          _results.push(this.setWbEvents(wb));
        }
        return _results;
      };

      Main.prototype.setWbEvents = function(wb) {
        var _this = this;
        wb.model.on('change:visible', function(m, vis) {
          if (vis) {
            return wb.render().open(_this.$("" + wb.options.cont));
          } else {
            return wb.remove();
          }
        });
        return wb.on('inputs:submitted', function() {
          return _this.$('.msg').text('answers submitted!');
        });
      };

      Main.prototype.template = function() {
        div({
          "class": 'row-fluid'
        }, function() {
          div({
            "class": 'span7'
          }, function() {
            div({
              "class": 'media-cont-a'
            }, function() {});
            div({
              "class": 'media-cont-b'
            }, function() {});
            return div({
              "class": 'wb-cont-a'
            }, function() {});
          });
          return div({
            "class": 'span5'
          }, function() {
            div({
              "class": 'msg'
            });
            div({
              "class": 'recorder-cont'
            });
            return div({
              "class": 'wb-cont-b'
            }, function() {});
          });
        });
        return div({
          "class": 'row-fluid'
        }, function() {
          return div({
            "class": 'wb-cont-big'
          }, function() {});
        });
      };

      Main.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.options));
        if (this.wbBig.model.get('visible')) {
          this.wbBig.render().open(this.$('.wb-cont-big'));
        }
        if (this.wbA.model.get('visible')) {
          this.wbA.render().open(this.$('.wb-cont-a'));
        }
        if (this.wbB.model.get('visible')) {
          this.wbB.render().open(this.$('.wb-cont-b'));
        }
        this.mediaA.render().open(this.$('.media-cont-a'));
        this.mediaB.render().open(this.$('.media-cont-b'));
        this.recorder.render().open(this.$('.recorder-cont'));
        this.delegateEvents();
        return this;
      };

      return Main;

    })(Backbone.View);
  });

  module('App.Response', function(exports, top) {
    var Collection, Model;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'response';

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      return Collection;

    })(Backbone.Collection);
    return _.extend(exports, {
      Model: Model,
      Collection: Collection
    });
  });

  module('App.Student', function(exports, top) {
    var Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'student';

      Model.prototype.idAttribute = '_id';

      Model.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'piggyBank':
            return this.set('piggyBank', model.piggyBank);
        }
      };

      Model.prototype.toggleHelp = function() {
        var _this = this;
        this.set('help', !this.get('help'));
        return this.sync('help', this.toJSON(), {
          success: function() {
            return log('asked for help');
          }
        });
      };

      return Model;

    })(Backbone.Model);
    exports.Model = [Model][0];
    exports.Views = Views = {};
    return Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'top-bar navbar navbar-fixed-top';

      TopBar.prototype.initialize = function() {
        var _this = this;
        return this.model.on('change:piggyBank', function(m, v) {
          return _this.render();
        });
      };

      TopBar.prototype.events = {
        'click .get-help': function() {
          this.model.toggleHelp();
          return this.render();
        }
      };

      TopBar.prototype.updateNav = function() {
        var rt;
        rt = Backbone.history.fragment.split('/')[0];
        this.$('ul.nav li').removeClass('active');
        this.$("ul.nav a[href=#" + rt + "]").parent('li').addClass('active');
        return this;
      };

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            a({
              "class": 'btn btn-navbar',
              'data-toggle': 'collapse',
              'data-target': '.nav-collapse'
            }, function() {
              span({
                "class": 'icon-beaker icon-large'
              });
              return span({
                "class": 'icon-reorder icon-large'
              });
            });
            return div({
              "class": 'nav-collapse'
            }, function() {
              ul({
                "class": 'nav'
              }, function() {
                li({
                  "class": 'user'
                }, function() {
                  return span(function() {
                    i({
                      "class": 'icon-user'
                    });
                    return text(" " + (this.get('name')) + " ");
                  });
                });
                return li({
                  "class": 'divider-vertical'
                  /*
                                li ->
                                  a href:'#lab', ->
                                    i class:'icon-headphones'
                                    text ' Lab'
                                li ->
                                  a href:'#practice', ->
                                    i class:'icon-refresh'
                                    text ' Practice'
                                li ->
                                  a href:'#achievements', ->
                                    i class:'icon-trophy'
                                    text ' Achievements'
                  */

                });
              });
              button({
                "class": "btn btn-small icon-bullhorn get-help pull-right btn-" + (this.get('help') ? 'warning active' : 'danger'),
                'data-toggle': 'button'
              }, " " + (this.get('help') ? 'Getting help...' : ' Ask for help'));
              return ul({
                "class": 'nav pull-right'
              }, function() {
                /*
                              li class:'divider-vertical'
                              li class:'heartbeats', ->
                                a href:'#', ->
                                  i class: 'icon-heart'
                                  span class:'piggyBank', " #{@get 'piggyBank'}"
                */
                li({
                  "class": 'divider-vertical'
                });
                return li(function() {
                  return a({
                    href: '/studentLogout'
                  }, function() {
                    return i({
                      "class": 'icon-signout'
                    });
                  });
                });
              });
            });
          });
        });
      };

      return TopBar;

    })(Backbone.View);
  });

  module('App', function(exports, top) {
    var Model, Router;
    Model = (function() {

      function Model() {
        this.socketConnect();
        this.fromDB();
        this.data = {
          student: new App.Student.Model(top.data.session.student),
          lab: new App.Lab.Model
        };
        this.views = {
          topBar: new App.Student.Views.TopBar({
            model: this.data.student
          }),
          lab: new App.Lab.Views.Main({
            model: this.data.lab,
            student: this.data.student
          })
        };
        this.router = new Router(this.data, this.views);
        Backbone.history.start();
      }

      Model.prototype.fromDB = function() {
        var _this = this;
        return this.connection.on('sync', function(service, data) {
          switch (service) {
            case 'student':
              return _this.data.student.fromDB(data);
            case 'lab':
              if (data.method === 'join') {
                _this.router.navigate('lab', true);
              }
              return _this.data.lab.fromDB(data);
          }
        });
      };

      Model.prototype.socketConnect = function() {
        this.connection = window.sock = window.io.connect("https://" + data.CFG.API.HOST);
        return this.connectionView = new App.Connection.Views.Main({
          model: this.connection
        });
      };

      return Model;

    })();
    exports.Model = [Model][0];
    return Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.initialize = function(data, views) {
        this.data = data;
        this.views = views;
        return this.showTopBar();
      };

      Router.prototype.routes = {
        '': 'home',
        'lab': 'lab'
      };

      Router.prototype.showTopBar = function() {
        return this.views.topBar.render().open();
      };

      Router.prototype.home = function() {};

      Router.prototype.lab = function() {
        this.clearViews('topBar');
        return this.views.lab.render().open();
      };

      return Router;

    })(Backbone.Router);
  });

  $(function() {
    console.log('starting');
    return window.app = new App.Model;
  });

}).call(this);
