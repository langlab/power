// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module('App.Lab', function(exports, top) {
    var Collection, Model, UIState, Views, _ref;
    UIState = (function(_super) {

      __extends(UIState, _super);

      function UIState() {
        return UIState.__super__.constructor.apply(this, arguments);
      }

      return UIState;

    })(Backbone.Model);
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'lab';

      Model.prototype.idAttribute = '_id';

      Model.prototype.initialize = function() {
        return this.set({
          'whiteBoardA': new UIState({
            html: 'yoyoyo'
          }),
          'whiteBoardB': new UIState
        });
      };

      Model.prototype.fromDB = function(data) {
        var action, method, model, options, prop, val, _ref, _results;
        console.log('fromDB: ', data);
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'action':
            action = model.action;
            switch (model.action) {
              case 'update':
                console.log('update');
                _results = [];
                for (prop in model) {
                  val = model[prop];
                  if (prop !== 'action') {
                    _results.push((_ref = this.get(prop)) != null ? _ref.set(val) : void 0);
                  }
                }
                return _results;
            }
        }
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.syncName = 'lab';

      return Collection;

    })(Backbone.Collection);
    _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1];
    exports.Views = Views = {};
    Views.WhiteBoard = (function(_super) {

      __extends(WhiteBoard, _super);

      function WhiteBoard() {
        return WhiteBoard.__super__.constructor.apply(this, arguments);
      }

      WhiteBoard.prototype.tagName = 'div';

      WhiteBoard.prototype.className = 'wb-cont';

      WhiteBoard.prototype.initialize = function() {
        var _this = this;
        return this.model.on('change:html', function() {
          console.log('changing html', _this.model.get('html'));
          return _this.render();
        });
      };

      WhiteBoard.prototype.render = function() {
        this.$el.html(this.model.get('html'));
        return this;
      };

      return WhiteBoard;

    })(Backbone.View);
    return Views.Main = (function(_super) {

      __extends(Main, _super);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.tagName = 'div';

      Main.prototype.className = 'lab-view container';

      Main.prototype.initialize = function() {
        this.wbA = new Views.WhiteBoard({
          model: this.model.get('whiteBoardA')
        });
        return this.wbB = new Views.WhiteBoard({
          model: this.model.get('whiteBoardB')
        });
      };

      Main.prototype.template = function() {
        return div({
          "class": 'row-fluid'
        }, function() {
          div({
            "class": 'span6'
          }, function() {
            div({
              "class": 'media-cont-a media-cont'
            }, function() {
              var file, _ref1;
              file = (_ref1 = this.get('mediaA')) != null ? _ref1.file : void 0;
              console.log(file);
              if (file != null) {
                switch (file.type) {
                  case 'image':
                    return img({
                      src: "" + file.imageUrl
                    });
                  case 'video':
                    return video(function() {
                      source({
                        src: "" + file.webmUrl
                      });
                      return source({
                        src: "" + file.h264Url
                      });
                    });
                  case 'audio':
                    return audio(function() {
                      return source({
                        src: "" + file.mp3Url
                      });
                    });
                }
              }
            });
            return div({
              "class": 'media-cont-b media-cont'
            }, function() {
              var file, _ref1;
              file = (_ref1 = this.get('mediaB')) != null ? _ref1.file : void 0;
              if (file != null) {
                switch (file.type) {
                  case 'image':
                    return img({
                      src: "" + file.imageUrl
                    });
                  case 'video':
                    return video(function() {
                      source({
                        src: "" + file.webmUrl
                      });
                      return source({
                        src: "" + file.h264Url
                      });
                    });
                  case 'audio':
                    return audio(function() {
                      return source({
                        src: "" + file.mp3Url
                      });
                    });
                }
              }
            });
          });
          return div({
            "class": 'span6'
          }, function() {
            div({
              "class": 'wb-cont-a'
            }, function() {});
            return div({
              "class": 'wb-cont-b'
            }, function() {});
          });
        });
      };

      Main.prototype.render = function() {
        Main.__super__.render.call(this);
        this.wbA.render().open(this.$('.wb-cont-a'));
        this.wbB.render().open(this.$('.wb-cont-b'));
        return this;
      };

      return Main;

    })(Backbone.View);
  });

  module('App.Student', function(exports, top) {
    var Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.syncName = 'student';

      Model.prototype.idAttribute = '_id';

      Model.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        switch (method) {
          case 'piggyBank':
            return this.set('piggyBank', model.piggyBank);
        }
      };

      return Model;

    })(Backbone.Model);
    exports.Model = [Model][0];
    exports.Views = Views = {};
    return Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'top-bar navbar navbar-fixed-top';

      TopBar.prototype.initialize = function() {
        var _this = this;
        return this.model.on('change:piggyBank', function(m, v) {
          return _this.$('.piggyBank').text(" " + (_this.model.get('piggyBank')));
        });
      };

      TopBar.prototype.updateNav = function() {
        var rt;
        rt = Backbone.history.fragment.split('/')[0];
        this.$('ul.nav li').removeClass('active');
        this.$("ul.nav a[href=#" + rt + "]").parent('li').addClass('active');
        return this;
      };

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            a({
              "class": 'btn btn-navbar',
              'data-toggle': 'collapse',
              'data-target': '.nav-collapse'
            }, function() {
              span({
                "class": 'icon-beaker icon-large'
              });
              return span({
                "class": 'icon-reorder icon-large'
              });
            });
            return div({
              "class": 'nav-collapse'
            }, function() {
              ul({
                "class": 'nav'
              }, function() {
                li({
                  "class": 'user'
                }, function() {
                  return span(function() {
                    i({
                      "class": 'icon-user'
                    });
                    return text(" " + (this.get('name')) + " ");
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                li(function() {
                  return a({
                    href: '#lab'
                  }, function() {
                    i({
                      "class": 'icon-headphones'
                    });
                    return text(' Lab');
                  });
                });
                li(function() {
                  return a({
                    href: '#practice'
                  }, function() {
                    i({
                      "class": 'icon-refresh'
                    });
                    return text(' Practice');
                  });
                });
                return li(function() {
                  return a({
                    href: '#achievements'
                  }, function() {
                    i({
                      "class": 'icon-trophy'
                    });
                    return text(' Achievements');
                  });
                });
              });
              return ul({
                "class": 'nav pull-right'
              }, function() {
                li({
                  "class": 'divider-vertical'
                });
                li({
                  "class": 'heartbeats'
                }, function() {
                  return a({
                    href: '#'
                  }, function() {
                    i({
                      "class": 'icon-heart'
                    });
                    return span({
                      "class": 'piggyBank'
                    }, " " + (this.get('piggyBank')));
                  });
                });
                li({
                  "class": 'divider-vertical'
                });
                return li(function() {
                  return a({
                    href: '/studentLogout'
                  }, function() {
                    return i({
                      "class": 'icon-signout'
                    });
                  });
                });
              });
            });
          });
        });
      };

      return TopBar;

    })(Backbone.View);
  });

  module('App', function(exports, top) {
    var Model, Router;
    Model = (function() {

      function Model() {
        this.socketConnect();
        this.fromDB();
        this.data = {
          student: new App.Student.Model(top.data.session.student),
          lab: new App.Lab.Model
        };
        this.views = {
          topBar: new App.Student.Views.TopBar({
            model: this.data.student
          }),
          lab: new App.Lab.Views.Main({
            model: this.data.lab
          })
        };
        this.router = new Router(this.data, this.views);
        Backbone.history.start();
      }

      Model.prototype.fromDB = function() {
        var _this = this;
        return this.connection.on('sync', function(service, data) {
          console.log('service', service, 'data', data);
          switch (service) {
            case 'student':
              return _this.data.student.fromDB(data);
            case 'lab':
              if (data.method === 'join') {
                return _this.router.navigate('lab', true);
              } else {
                return _this.data.lab.fromDB(data);
              }
          }
        });
      };

      Model.prototype.socketConnect = function() {
        this.connection = window.sock = window.io.connect("https://" + data.CFG.API.HOST);
        return this.connectionView = new App.Connection.Views.Main({
          model: this.connection
        });
      };

      return Model;

    })();
    exports.Model = [Model][0];
    return Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.initialize = function(data, views) {
        this.data = data;
        this.views = views;
        return this.showTopBar();
      };

      Router.prototype.routes = {
        '': 'home',
        'lab': 'lab'
      };

      Router.prototype.showTopBar = function() {
        return this.views.topBar.render().open();
      };

      Router.prototype.home = function() {};

      Router.prototype.lab = function() {
        this.clearViews('topBar');
        return this.views.lab.render().open();
      };

      return Router;

    })(Backbone.Router);
  });

  $(function() {
    return window.app = new App.Model;
  });

}).call(this);
