{
  "name": "coffeefilter",
  "description": "Markup as CoffeeScript.",
  "version": "0.4.0",
  "author": {
    "name": "Adam Renberg",
    "email": "tgwizard@gmail.com"
  },
  "homepage": "http://github.com/tgwizard/coffeefilter",
  "repository": {
    "type": "git",
    "url": "git@github.com:tgwizard/coffeefilter.git"
  },
  "dependencies": {
    "coffee-script": ">= 1.3.3",
    "moment": ">= 1.7.0"
  },
  "devDependencies": {
    "mocha": ">= 1.3.0",
    "should": ">= 0.6.3",
    "jade": "0.13.0",
    "eco": "1.1.0-rc-1",
    "ejs": "0.4.3",
    "haml": "0.4.2"
  },
  "keywords": [
    "template",
    "view",
    "coffeescript"
  ],
  "directories": {
    "lib": "./lib"
  },
  "bin": {
    "coffeefilter": "./bin/coffeefilter"
  },
  "main": "./lib/coffeefilter",
  "engines": {
    "node": ">= 0.8.1"
  },
  "contributors": [
    {
      "name": "Maurice Machado",
      "email": "maurice@bitbending.com"
    },
    {
      "name": "Luis Pedro Coelho",
      "email": "lpc@cmu.edu"
    },
    {
      "name": "Rachel Carvalho",
      "email": "rachel.carvalho@gmail.com"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "James Campos",
      "email": "james.r.campos@gmail.com"
    },
    {
      "name": "Martin Westergaard Lassen",
      "email": "martin@mwl.dk"
    },
    {
      "name": "Paul Harper",
      "email": "benekastah@gmail.com"
    },
    {
      "name": "Colin Thomas-Arnold",
      "email": "colinta@mac.com"
    },
    {
      "name": "Esa-Matti Suuronen",
      "email": "esa-matti@suuronen.org"
    },
    {
      "name": "Jason King",
      "email": "jk@handle.it"
    },
    {
      "name": "Brandon Bloom",
      "email": "brandon@brandonbloom.name"
    },
    {
      "name": "Nicholas Kinsey",
      "email": "nicholas.kinsey@feistystudios.com"
    }
  ],
  "readme": "# CoffeeFilter <â˜•/>\n\nThis is my branch of the original\n[Coffeekup](https://github.com/mauricemach/coffeekup). I have great plans for\nit, but they are not all implemented yet.\n\nChanges from CoffeeKup:\n\n* Supports express 3.0.0beta5\n* Supports CoffeeScript 1.3.3\n* Supports template inheritance with the `extend` function, and injecting\n\tcontent into the parent template with the `block` function.\n* `yield` has been renamed to `cede` to work with newer CoffeeScript versions.\n\nTODO:\n\n* Clean up the code (a lot, and rewrite the template inheritance thingy)\n* Allow for partials (or use express3 functionality for it)\n* More...\n\nNot safe for production use...\n\n## Markup as CoffeeScript\n\nCoffeeFilter is a templating engine for [node.js](http://nodejs.org) and browsers\nthat lets you to write your HTML templates in 100% pure\n[CoffeeScript](http://coffeescript.org).\n\nIt was created in celebration of [whyday](http://whyday.org/), as an\napplication of the concept used in\n[Markaby](https://github.com/markaby/markaby) (\"Markup as Ruby\", by Tim\nFletcher and why the lucky stiff) to CoffeeScript.\n\nHere's what a template written for CoffeeFilter looks like:\n\n~~~ coffeescript\ndoctype 5\nhtml ->\n\thead ->\n\t\tmeta charset: 'utf-8'\n\t\ttitle \"#{@title or 'Untitled'} | A completely plausible website\"\n\t\tmeta(name: 'description', content: @description) if @description?\n\n\t\tlink rel: 'stylesheet', href: '/css/app.css'\n\n\t\tstyle '''\n\t\t\tbody {font-family: sans-serif}\n\t\t\theader, nav, section, footer {display: block}\n\t\t'''\n\n\t\tscript src: '/js/jquery.js'\n\n\t\tcoffeescript ->\n\t\t\t$(document).ready ->\n\t\t\t\talert 'Alerts suck!'\n\tbody ->\n\t\theader ->\n\t\t\th1 @title or 'Untitled'\n\n\t\t\tnav ->\n\t\t\t\tul ->\n\t\t\t\t\t(li -> a href: '/', -> 'Home') unless @path is '/'\n\t\t\t\t\tli -> a href: '/chunky', -> 'Bacon!'\n\t\t\t\t\tswitch @user.role\n\t\t\t\t\t\twhen 'owner', 'admin'\n\t\t\t\t\t\t\tli -> a href: '/admin', -> 'Secret Stuff'\n\t\t\t\t\t\twhen 'vip'\n\t\t\t\t\t\t\tli -> a href: '/vip', -> 'Exclusive Stuff'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tli -> a href: '/commoners', -> 'Just Stuff'\n\n\t\tdiv '#myid.myclass.anotherclass', style: 'position: fixed', ->\n\t\t\tp 'Divitis kills! Inline styling too.'\n\n\t\tsection ->\n\t\t\t# A helper function you built and included.\n\t\t\tbreadcrumb separator: '>', clickable: yes\n\n\t\t\th2 \"Let's count to 10:\"\n\t\t\tp i for i in [1..10]\n\n\t\t\t# Another hypothetical helper.\n\t\t\tform_to @post, ->\n\t\t\t\ttextbox '#title', label: 'Title:'\n\t\t\t\ttextbox '#author', label: 'Author:'\n\t\t\t\tsubmit 'Save'\n\n\t\tfooter ->\n\t\t\t# CoffeeScript comments. Not visible in the output document.\n\t\t\tcomment 'HTML comments.'\n\t\t\tp 'Bye!'\n~~~\n\nInteractive demo at [coffeekup.org](http://coffeekup.org).\n\n## _why?\n\n- **One language to rule them all**. JavaScript is everywhere, thus so is\n\tCoffeeScript. Servers, browsers, even databases. If extending this to\n\trendering logic and UI structure (server and client side) is desirable to\n\tyou, CoffeeFilter is your friend.\n\n- **More specifically, one _outstanding_ language**. CoffeeScript is one hell\n\tof a clean, expressive, flexible and powerful language. It's hard to find\n\tsuch combination, especially if you need it to run in the browser too.\n\n- **Not yet another specialized language to learn**. Transferable knowledge\n\tFTW.\n\n- **Embed your templates in CoffeeScript nicely**. Templates are just\n\tfunctions, so they don't lose syntax highlighting and syntax checking when\n\tembedded in CoffeeScript apps.\n\n- **Embed CoffeeScript in your templates nicely**. In the same manner, you can\n\twrite the contents of `<script>` blocks in CoffeeScript, and keep the\n\thighlighting. Perhaps more significantly, the CoffeeScript compiler doesn't\n\thave to be called just to convert these blocks to JS, as in other templating\n\tengines.\n\n- **Extensive editor support**. You benefit from the already existing list of\n\texcellent CoffeeScript [text editor\n\tplugins](https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins).\n\n- **Client-server consistency**. The same template language _and_\n\timplementation in node.js or the browser.\n\n- **Easily extendable into a higher level \"DSL\"**. Since all elements are just\n\tfunctions, it's very easy to define your own custom \"tags\", which will work\n\tand look the same as \"native\" ones.\n\n- **HTML 5 ready**. Boring legacy doctypes and elements also available.\n\n- **Optional auto-escaping**. You can also use the `h` helper on a case-by-case\n\tbasis.\n\n- **Optional formatting**, with line breaks and indentation.\n\n- **Pick your poison**. Works with both CoffeeScript and JavaScript apps.\n\n## Why not?\n\nCoffeeFilter may not be your best choice in those cases:\n\n- You're after the cleanest syntax possible, above all. In this regard a\n\tspecialized language such as [Jade](http://jade-lang.com) just can't be\n\tbeaten.\n\n- You use divs and/or classes for everything. While in CoffeeFilter you can do\n\t`div '#id.class.class'`, specialized languages often have an even shorter\n\tsyntax for that.\n\n- You want CoffeeScript for rendering logic, but you'd rather stick with HTML\n\tfor markup. Then you're looking for [Eco](http://github.com/sstephenson/eco).\n\n- For your specific project/team/preferences, you think a limited and/or\n\tseparate language for templating is actually beneficial.\n\n## Installing\n\n**TODO: add CoffeeFilter to npm**\n\nJust grab [node.js](http://nodejs.org/#download) and\n[npm](http://github.com/isaacs/npm) and you're set:\n\n    npm install coffeefilter\n\nTo get the `coffeefilter` command, install it globally:\n\n    npm install coffeefilter -g\n\nOr to use the latest version:\n\n    git clone git@github.com:tgwizard/coffeefilter.git && cd coffeefilter\n    cake build\n    npm link\n    cd ~/myproject\n    npm link coffeefilter\n\n## Using\n\n~~~ coffeescript\ncf = require 'coffeefilter'\n\ncf.render -> h1 \"You can feed me templates as functions.\"\ncf.render \"h1 'Or strings. I am not too picky.'\"\n~~~\n\nDefining variables:\n**TODO: rewrite this, this is not how it works**\n\n~~~ coffeescript\ntemplate = ->\n\th1 @title\n\tform method: 'post', action: 'login', ->\n\t\ttextbox id: 'username'\n\t\ttextbox id: 'password'\n\t\tbutton @title\n\nhelpers =\n\ttextbox: (attrs) ->\n\t\tattrs.type = 'text'\n\t\tattrs.name = attrs.id\n\t\tinput attrs\n\ncf.render(template, title: 'Log In', hardcode: helpers)\n~~~\n\nPrecompiling to functions:\n\n~~~ coffeescript\ntemplate = cf.compile(template, locals: yes, hardcode: {zig: 'zag'})\n\ntemplate(foo: 'bar', locals: {ping: 'pong'})\n~~~\n\nWith [express](http://expressjs.com):\n\n~~~ coffeescript\ncoffeefilter = require 'coffeefilter'\napp.set 'view engine', 'coffee'\napp.engine '.coffee', coffeefilter.adapters.express\n\napp.get '/', (req, res) ->\n\t# Will render views/index.coffee:\n\tres.render 'index', foo: 'bar'\n~~~\n\nWith [zappa](http://github.com/mauricemach/zappa):\n\n~~~ coffeescript\nget '/': ->\n\t@franks = ['miller', 'oz', 'sinatra', 'zappa']\n\trender 'index'\n\nview index: ->\n\tfor name in @franks\n\t\ta href: \"http://en.wikipedia.org/wiki/Frank_#{name}\", -> name\n~~~\n\nWith\n[meryl](https://github.com/kadirpekel/meryl/tree/master/examples/coffeekup-template):\n\n~~~ coffeescript\ncoffeefilter = require 'coffeefilter'\n\nmeryl.get '/', (req, resp) ->\n\tpeople = ['bob', 'alice', 'meryl']\n\tresp.render 'layout', content: 'index', context: {people: people}\n\nmeryl.run\n\ttemplateExt: '.coffee'\n\ttemplateFunc: coffeefilter.adapters.meryl\n~~~\n\nOn the browser:\n**TODO: make sure this works, it probably doesn't now**\n\n~~~ html\n<script src=\"template.js\"></script>\n<script>\n\t$('body').append(templates.template({foo: 'bar'}));\n</script>\n~~~\n\nThis is one of many browser deployment possibilities, pre-compiling your\ntemplate on the server to a standalone function. To see all serving\nsuggestions, check out\n[regular](http://github.com/tgwizard/coffeefilter/blob/master/examples/browser/regular/index.html),\n[decaf](http://github.com/tgwizard/coffeefilter/blob/master/examples/browser/decaf/index.html)\nand\n[crÃ¨me](http://github.com/tgwizard/coffeefilter/blob/master/examples/browser/creme/index.html).\n\nCommand-line:\n\n    $ coffeefilter -h\n\n    Usage:\n      coffeefilter [options] path/to/template.coffee\n\n          --js           compile template to js function\n      -n, --namespace    global object holding the templates (default: \"templates\")\n      -w, --watch        watch templates for changes, and recompile\n      -o, --output       set the directory for compiled html\n      -p, --print        print the compiled html to stdout\n      -f, --format       apply line breaks and indentation to html output\n      -u, --utils        add helper locals (currently only \"render\")\n      -v, --version      display CoffeeFilter version\n      -h, --help         display this help message\n\nSee [/examples](http://github.com/tgwizard/coffeefilter/tree/master/examples)\nfor complete versions (you have to run `cake build` first).\n\n**TODO: make these examples work...**\n\nPlease note that even though all examples are given in CoffeeScript, you can\nalso use their plain JavaScript counterparts just fine.\n\n## Resources\n\n- [API\n\treference](https://github.com/tgwizard/coffeefilter/blob/master/docs/reference.md)\n\n- [Mailing list](https://groups.google.com/group/coffeekup)\n\n- [Issues](https://github.com/tgwizard/tgwizard/issues)\n\n- **IRC**: #coffeekup on irc.freenode.net\n\n- [A Beginners's Introduction to\n\tCoffeeKup](https://github.com/mark-hahn/coffeekup-intro)\n\n## Tools\n\n- [html2coffeekup](https://github.com/brandonbloom/html2coffeekup) - Converts\n\tHTML to CoffeeKup templates.\n\n- [htmlkup](https://github.com/colinta/htmlkup) - Another HTML converter,\n\tstdin/stdout based.\n\n- [ice](https://github.com/ludicast/ice) - CoffeeKup and Eco in Rails\n\t([screencast](http://vimeo.com/25907220)).\n\n- [coffee-world](https://github.com/khoomeister/coffee-world) - Tool to watch\n\tand compile HTML with CoffeeKup, CSS with coffee-css and JS with\n\tCoffeeScript.\n\n- [cupcake](https://github.com/twilson63/cupcake) - Express app generator with\n\tCoffeeKup support.\n\n## Related projects\n\n- [ck](https://github.com/aeosynth/ck) - \"a smaller, faster coffeekup\":\n\tAlternative, barebones implementation.\n\n- [ckup](https://github.com/satyr/ckup) - \"Markup as Coco\": Similar engine but\n\tfor [Coco](https://github.com/satyr/coco) (\"Unfancy CoffeeScript\").\n\n- [Eco](https://github.com/sstephenson/eco) - \"Embedded CoffeeScript\n\ttemplates\": \"EJS/ERB\" for CoffeeScript.\n\n- [timbits](https://github.com/Postmedia/timbits) - \"Widget framework based on\n\tExpress and CoffeeScript\".\n\n- [coffee-css](https://github.com/khoomeister/coffee-css) - \"More CSS for\n\tCoffeeScript\".\n\n- [ccss](https://github.com/aeosynth/ccss) - \"CoffeeScript CSS\".\n\n## Compatibility\n\nLatest version tested with node 0.8.1 and CoffeeScript 1.3.3.\n\n## Special thanks\n\n- [Jeremy Ashkenas](https://github.com/jashkenas), for the amazing\n\tCoffeeScript language.\n- [why the lucky stiff](Why_the_lucky_stiff), for the inspiration.\n",
  "_id": "coffeefilter@0.4.0",
  "dist": {
    "shasum": "20053e2b65a9b4652e7fb9c042e55298284d5d32"
  },
  "_from": "git://github.com/tgwizard/coffeefilter.git"
}
